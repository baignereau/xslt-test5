<?xml version="1.0" encoding="UTF-8"?>
<test-set xmlns:xs="http://www.w3.org/2001/XMLSchema"
          xmlns="http://www.w3.org/2012/10/xslt-test-catalog"
          name="system-property">
   <description>Tests system-property</description>
   <environment name="systemprop001">
      <source role=".">
         <content><![CDATA[<doc/>]]></content>
      </source>
   </environment>
   <environment name="systemprop009">
      <source role="." file="systemprop009.xml"/>
   </environment>

   <test-case name="system-property-001">
      <description>Test that xsl:version is a valid system-property and the returned result is an xs:string with numeric value between 1.0 and 2.0.</description>
      <created by="Michael Kay" on="2012-10-30"/>
      <environment ref="systemprop001"/>
      <dependencies>
         <spec value="XSLT20+"/>
      </dependencies>
      <test>
         <stylesheet file="system-property-001.xsl"/>
      </test>
      <result>
         <assert-xml><![CDATA[<out>truetrue</out>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="system-property-002">
      <description>Test that xsl:vendor is a valid system-property and the returned result is an xs:string.</description>
      <created by="Michael Kay" on="2012-10-30"/>
      <environment ref="systemprop001"/>
      <dependencies>
         <spec value="XSLT20+"/>
      </dependencies>
      <test>
         <stylesheet file="system-property-002.xsl"/>
      </test>
      <result>
         <assert-xml><![CDATA[<out>true</out>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="system-property-003">
      <description>Test that xsl:vendor-url is a valid system-property and the returned result is an xs:string.</description>
      <created by="Michael Kay" on="2012-10-30"/>
      <environment ref="systemprop001"/>
      <dependencies>
         <spec value="XSLT20+"/>
      </dependencies>
      <test>
         <stylesheet file="system-property-003.xsl"/>
      </test>
      <result>
         <assert-xml><![CDATA[<out>true</out>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="system-property-004">
      <description>Test that xsl:product-name is a valid system-property and the returned result is an xs:string.</description>
      <created by="Michael Kay" on="2012-10-30"/>
      <environment ref="systemprop001"/>
      <dependencies>
         <spec value="XSLT20+"/>
      </dependencies>
      <test>
         <stylesheet file="system-property-004.xsl"/>
      </test>
      <result>
         <assert-xml><![CDATA[<out>true</out>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="system-property-005">
      <description>Test that xsl:product-version is a valid system-property and the returned result is an xs:string.</description>
      <created by="Michael Kay" on="2012-10-30"/>
      <environment ref="systemprop001"/>
      <dependencies>
         <spec value="XSLT20+"/>
      </dependencies>
      <test>
         <stylesheet file="system-property-005.xsl"/>
      </test>
      <result>
         <assert-xml><![CDATA[<out>true</out>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="system-property-006">
      <description>Test that xsl:is-schema-aware is a valid system-property and the returned result is an xs:string - one of 'yes' or 'no'.</description>
      <created by="Michael Kay" on="2012-10-30"/>
      <environment ref="systemprop001"/>
      <dependencies>
         <spec value="XSLT20+"/>
      </dependencies>
      <test>
         <stylesheet file="system-property-006.xsl"/>
      </test>
      <result>
         <assert-xml><![CDATA[<out>truetrue</out>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="system-property-007">
      <description>Test that xsl:supports-serialization is a valid system-property and the returned result is an xs:string. Conditional xsl:if used to verify result value is 'yes' or 'no'</description>
      <created by="Michael Kay" on="2012-10-30"/>
      <environment ref="systemprop001"/>
      <dependencies>
         <spec value="XSLT20+"/>
      </dependencies>
      <test>
         <stylesheet file="system-property-007.xsl"/>
      </test>
      <result>
         <assert-xml><![CDATA[<out>truetrue</out>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="system-property-008">
      <description>Test that xsl:supports-backwards-compatibility is a valid system-property and the returned result is an xs:string - one of 'yes' or 'no'.</description>
      <created by="Michael Kay" on="2012-10-30"/>
      <environment ref="systemprop001"/>
      <dependencies>
         <spec value="XSLT20+"/>
      </dependencies>
      <test>
         <stylesheet file="system-property-008.xsl"/>
      </test>
      <result>
         <assert-xml><![CDATA[<out>truetrue</out>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="system-property-009">
      <description>Test to verify that all specification defined arguments of system-property must be lower case or they will not be recognized.</description>
      <created by="Michael Kay" on="2012-10-30"/>
      <environment ref="systemprop001"/>
      <dependencies>
         <spec value="XSLT20+"/>
      </dependencies>
      <test>
         <stylesheet file="system-property-009.xsl"/>
      </test>
      <result>
         <assert-xml><![CDATA[<out/>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="system-property-010">
      <description>Test to show that empty string is returned if the argument in system-property() does not have a prefix, (even if the default namespace is set to the 'xsl' namespace and the keyword is correct).</description>
      <created by="Michael Kay" on="2012-10-30"/>
      <environment ref="systemprop001"/>
      <dependencies>
         <spec value="XSLT10+"/>
      </dependencies>
      <test>
         <stylesheet file="system-property-010.xsl"/>
      </test>
      <result>
         <assert-xml><![CDATA[<a:out xmlns:a="http://example.org/test"/>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="system-property-011">
      <description>Test to verify that system-property($property) accepts an argument that comes from a node, variable and subsequence and the result returned is an xs:string.</description>
      <created by="Michael Kay" on="2012-10-30"/>
      <environment ref="systemprop009"/>
      <dependencies>
         <spec value="XSLT20+"/>
      </dependencies>
      <test>
         <stylesheet file="system-property-011.xsl"/>
      </test>
      <result>
         <assert-xml file="system-property-011.out"/>
      </result>
   </test-case>
   
   <test-case name="system-property-012">
      <description>Test for system-property('supports-streaming') .</description>
      <created by="Michael Kay" on="2014-10-30"/>
      <dependencies>
         <spec value="XSLT30+"/>
         <feature value="streaming"/>
      </dependencies>           
      <test>
         <stylesheet file="system-property-012.xsl"/>
         <initial-template name="main"/>
      </test>
      <result>
         <assert>/out = 'yes'</assert>
      </result>
   </test-case>
   
   <test-case name="system-property-013">
      <description>Test for system-property('supports-streaming') .</description>
      <created by="Michael Kay" on="2014-10-30"/>
      <dependencies>
         <spec value="XSLT30+"/>
         <feature value="streaming" satisfied="false"/>
      </dependencies>           
      <test>
         <stylesheet file="system-property-012.xsl"/>
         <initial-template name="main"/>
      </test>
      <result>
         <assert>/out = 'no'</assert>
      </result>
   </test-case>
   
   <test-case name="system-property-014a">
      <description>Test for system-property('supports-dynamic-evaluation') .</description>
      <created by="Michael Kay" on="2014-10-30"/>
      <dependencies>
         <spec value="XSLT30+"/>
         <feature value="dynamic_evaluation"/>
      </dependencies>           
      <test>
         <stylesheet file="system-property-014.xsl"/>
         <initial-template name="main"/>
      </test>
      <result>
         <assert>/out = '4yes'</assert>
      </result>
   </test-case>
   
   <test-case name="system-property-014b">
      <description>Test for system-property('supports-dynamic-evaluation') .</description>
      <created by="Michael Kay" on="2014-10-30"/>
      <modified by="Michael Kay" on="2014-11-14" change="@xpath must be a string, the inner quotes were missing"/>
      <dependencies>
         <spec value="XSLT30+"/>
         <feature value="dynamic_evaluation" satisfied="false"/>
      </dependencies>           
      <test>
         <stylesheet file="system-property-014.xsl"/>
         <initial-template name="main"/>
      </test>
      <result>
         <assert>/out = 'no'</assert>
      </result>
   </test-case>
   
   <test-case name="system-property-015">
      <description>Test that xsl:xpath-version is 3.0 or 3.1</description>
      <created by="Michael Kay" on="2015-09-04"/>
      <environment ref="systemprop001"/>
      <dependencies>
         <spec value="XSLT30+"/>
      </dependencies>
      <test>
         <stylesheet file="system-property-015.xsl"/>
      </test>
      <result>
         <assert-xml><![CDATA[<out>truetrue</out>]]></assert-xml>
      </result>
   </test-case>
   
   <test-case name="system-property-016">
      <description>Test that xsl:xsd-version is 1.0 or 1.1</description>
      <created by="Michael Kay" on="2015-09-04"/>
      <environment ref="systemprop001"/>
      <dependencies>
         <spec value="XSLT30+"/>
      </dependencies>
      <test>
         <stylesheet file="system-property-016.xsl"/>
      </test>
      <result>
         <assert-xml><![CDATA[<out>truetrue</out>]]></assert-xml>
      </result>
   </test-case>
   
   <test-case name="system-property-017">
      <description>Test use of an EQName (bug 29113)</description>
      <created by="Michael Kay" on="2015-09-13"/>
      <environment ref="systemprop001"/>
      <dependencies>
         <spec value="XSLT20+"/>
      </dependencies>
      <test>
         <stylesheet file="system-property-017.xsl"/>
      </test>
      <result>
         <assert-xml><![CDATA[<out>truetrue</out>]]></assert-xml>
      </result>
   </test-case>



   <test-case name="system-property-101a">
      <description>
          System-property 'xsl:version' with method set to 'static', testing result = ('3.0') and ns-scope: 'normal'
          See for a more detailed description of the parameters and how this test works, the file system-property-100.xsl
      </description>
      <created by="Abel Braaksma" on="2015-09-30"/>
      <dependencies>
         <spec value="XSLT30+"/>
      </dependencies>
      <test>
         <stylesheet file="system-property-100.xsl"/>
         <param static="yes" name="property" select="'xsl:version'"/>
         <param static="yes" name="result" select="'3.0'"/>
         <param static="yes" name="method" select="'static'"/>
         <param static="yes" name="ns-scope" select="'normal'"/>
      </test>
      <result>
         <all-of>
            <assert>/output/@evaluation-method = 'static'</assert>
            <assert>every $res in /output/global-variables/static-context/* satisfies $res = ('3.0')</assert>
            <assert>every $res in /output/global-variables/dynamic-context/* satisfies $res = ('3.0')</assert>
            <assert>every $eval in (for $i in 1 to 6 return /output/global-variables/static-context/*[$i] = /output/global-variables/dynamic-context/*[$i]) satisfies $eval</assert>
            <assert>every $res in /output/static-context/result satisfies $res = ('3.0')</assert>
            <assert>every $res in /output/dynamic-context/result satisfies $res = ('3.0')</assert>
            <assert>every $res in /output/static-context/result-all/tokenize(., ' ') satisfies $res = ('3.0')</assert>
            <assert>every $res in /output/dynamic-context/result-all/tokenize(., ' ') satisfies $res = ('3.0')</assert>
         </all-of>
      </result>
   </test-case>
   
   <test-case name="system-property-101b">
      <description>
          System-property 'version' with method set to 'static', testing result = ('') and ns-scope: 'other-default-namespace'
          See for a more detailed description of the parameters and how this test works, the file system-property-100.xsl
      </description>
      <created by="Abel Braaksma" on="2015-09-30"/>
      <dependencies>
         <spec value="XSLT30+"/>
      </dependencies>
      <test>
         <stylesheet file="system-property-100.xsl"/>
         <param static="yes" name="property" select="'version'"/>
         <param static="yes" name="result" select="''"/>
         <param static="yes" name="method" select="'static'"/>
         <param static="yes" name="ns-scope" select="'other-default-namespace'"/>
      </test>
      <result>
         <all-of>
            <assert>/output/@evaluation-method = 'static'</assert>
            <assert>every $res in /output/global-variables/static-context/* satisfies $res = ('')</assert>
            <assert>every $res in /output/global-variables/dynamic-context/* satisfies $res = ('')</assert>
            <assert>every $eval in (for $i in 1 to 6 return /output/global-variables/static-context/*[$i] = /output/global-variables/dynamic-context/*[$i]) satisfies $eval</assert>
            <assert>every $res in /output/static-context/result satisfies $res = ('')</assert>
            <assert>every $res in /output/dynamic-context/result satisfies $res = ('')</assert>
            <assert>every $res in /output/static-context/result-all/tokenize(., ' ') satisfies $res = ('')</assert>
            <assert>every $res in /output/dynamic-context/result-all/tokenize(., ' ') satisfies $res = ('')</assert>
         </all-of>
      </result>
   </test-case>
   
   <test-case name="system-property-101c">
      <description>
          System-property 'other:version' with method set to 'static', testing result = ('3.0') and ns-scope: 'switch-xsl-namespace'
          See for a more detailed description of the parameters and how this test works, the file system-property-100.xsl
      </description>
      <created by="Abel Braaksma" on="2015-09-30"/>
      <dependencies>
         <spec value="XSLT30+"/>
      </dependencies>
      <test>
         <stylesheet file="system-property-100.xsl"/>
         <param static="yes" name="property" select="'other:version'"/>
         <param static="yes" name="result" select="'3.0'"/>
         <param static="yes" name="method" select="'static'"/>
         <param static="yes" name="ns-scope" select="'switch-xsl-namespace'"/>
      </test>
      <result>
         <all-of>
            <assert>/output/@evaluation-method = 'static'</assert>
            <assert>every $res in /output/global-variables/static-context/* satisfies $res = ('3.0')</assert>
            <assert>every $res in /output/global-variables/dynamic-context/* satisfies $res = ('3.0')</assert>
            <assert>every $eval in (for $i in 1 to 6 return /output/global-variables/static-context/*[$i] = /output/global-variables/dynamic-context/*[$i]) satisfies $eval</assert>
            <assert>every $res in /output/static-context/result satisfies $res = ('3.0')</assert>
            <assert>every $res in /output/dynamic-context/result satisfies $res = ('3.0')</assert>
            <assert>every $res in /output/static-context/result-all/tokenize(., ' ') satisfies $res = ('3.0')</assert>
            <assert>every $res in /output/dynamic-context/result-all/tokenize(., ' ') satisfies $res = ('3.0')</assert>
         </all-of>
      </result>
   </test-case>
   
   <test-case name="system-property-101d">
      <description>
          System-property 'xsl:version' with method set to 'evaluate', testing result = ('3.0') and ns-scope: 'normal'
          See for a more detailed description of the parameters and how this test works, the file system-property-100.xsl
      </description>
      <created by="Abel Braaksma" on="2015-09-30"/>
      <dependencies>
         <spec value="XSLT30+"/>
      </dependencies>
      <test>
         <stylesheet file="system-property-100.xsl"/>
         <param static="yes" name="property" select="'xsl:version'"/>
         <param static="yes" name="result" select="'3.0'"/>
         <param static="yes" name="method" select="'evaluate'"/>
         <param static="yes" name="ns-scope" select="'normal'"/>
      </test>
      <result>
         <all-of>
            <assert>/output/@evaluation-method = 'evaluate'</assert>
            <assert>every $res in /output/global-variables/static-context/* satisfies $res = ('3.0')</assert>
            <assert>every $res in /output/global-variables/dynamic-context/* satisfies $res = ('3.0')</assert>
            <assert>every $eval in (for $i in 1 to 6 return /output/global-variables/static-context/*[$i] = /output/global-variables/dynamic-context/*[$i]) satisfies $eval</assert>
            <assert>every $res in /output/static-context/result satisfies $res = ('3.0')</assert>
            <assert>every $res in /output/dynamic-context/result satisfies $res = ('3.0')</assert>
            <assert>every $res in /output/static-context/result-all/tokenize(., ' ') satisfies $res = ('3.0')</assert>
            <assert>every $res in /output/dynamic-context/result-all/tokenize(., ' ') satisfies $res = ('3.0')</assert>
         </all-of>
      </result>
   </test-case>
   
   <test-case name="system-property-101e">
      <description>
          System-property 'version' with method set to 'evaluate', testing result = ('') and ns-scope: 'other-default-namespace'
          See for a more detailed description of the parameters and how this test works, the file system-property-100.xsl
      </description>
      <created by="Abel Braaksma" on="2015-09-30"/>
      <dependencies>
         <spec value="XSLT30+"/>
      </dependencies>
      <test>
         <stylesheet file="system-property-100.xsl"/>
         <param static="yes" name="property" select="'version'"/>
         <param static="yes" name="result" select="''"/>
         <param static="yes" name="method" select="'evaluate'"/>
         <param static="yes" name="ns-scope" select="'other-default-namespace'"/>
      </test>
      <result>
         <all-of>
            <assert>/output/@evaluation-method = 'evaluate'</assert>
            <assert>every $res in /output/global-variables/static-context/* satisfies $res = ('')</assert>
            <assert>every $res in /output/global-variables/dynamic-context/* satisfies $res = ('')</assert>
            <assert>every $eval in (for $i in 1 to 6 return /output/global-variables/static-context/*[$i] = /output/global-variables/dynamic-context/*[$i]) satisfies $eval</assert>
            <assert>every $res in /output/static-context/result satisfies $res = ('')</assert>
            <assert>every $res in /output/dynamic-context/result satisfies $res = ('')</assert>
            <assert>every $res in /output/static-context/result-all/tokenize(., ' ') satisfies $res = ('')</assert>
            <assert>every $res in /output/dynamic-context/result-all/tokenize(., ' ') satisfies $res = ('')</assert>
         </all-of>
      </result>
   </test-case>
   
   <test-case name="system-property-101f">
      <description>
          System-property 'other:version' with method set to 'evaluate', testing result = ('3.0') and ns-scope: 'switch-xsl-namespace'
          See for a more detailed description of the parameters and how this test works, the file system-property-100.xsl
      </description>
      <created by="Abel Braaksma" on="2015-09-30"/>
      <dependencies>
         <spec value="XSLT30+"/>
      </dependencies>
      <test>
         <stylesheet file="system-property-100.xsl"/>
         <param static="yes" name="property" select="'other:version'"/>
         <param static="yes" name="result" select="'3.0'"/>
         <param static="yes" name="method" select="'evaluate'"/>
         <param static="yes" name="ns-scope" select="'switch-xsl-namespace'"/>
      </test>
      <result>
         <all-of>
            <assert>/output/@evaluation-method = 'evaluate'</assert>
            <assert>every $res in /output/global-variables/static-context/* satisfies $res = ('3.0')</assert>
            <assert>every $res in /output/global-variables/dynamic-context/* satisfies $res = ('3.0')</assert>
            <assert>every $eval in (for $i in 1 to 6 return /output/global-variables/static-context/*[$i] = /output/global-variables/dynamic-context/*[$i]) satisfies $eval</assert>
            <assert>every $res in /output/static-context/result satisfies $res = ('3.0')</assert>
            <assert>every $res in /output/dynamic-context/result satisfies $res = ('3.0')</assert>
            <assert>every $res in /output/static-context/result-all/tokenize(., ' ') satisfies $res = ('3.0')</assert>
            <assert>every $res in /output/dynamic-context/result-all/tokenize(., ' ') satisfies $res = ('3.0')</assert>
         </all-of>
      </result>
   </test-case>
   
   <test-case name="system-property-101g">
      <description>
          System-property 'xsl:version' with method set to 'apply-templates', testing result = ('3.0') and ns-scope: 'normal'
          See for a more detailed description of the parameters and how this test works, the file system-property-100.xsl
      </description>
      <created by="Abel Braaksma" on="2015-09-30"/>
      <dependencies>
         <spec value="XSLT30+"/>
      </dependencies>
      <test>
         <stylesheet file="system-property-100.xsl"/>
         <param static="yes" name="property" select="'xsl:version'"/>
         <param static="yes" name="result" select="'3.0'"/>
         <param static="yes" name="method" select="'apply-templates'"/>
         <param static="yes" name="ns-scope" select="'normal'"/>
      </test>
      <result>
         <all-of>
            <assert>/output/@evaluation-method = 'apply-templates'</assert>
            <assert>every $res in /output/global-variables/static-context/* satisfies $res = ('3.0')</assert>
            <assert>every $res in /output/global-variables/dynamic-context/* satisfies $res = ('3.0')</assert>
            <assert>every $eval in (for $i in 1 to 6 return /output/global-variables/static-context/*[$i] = /output/global-variables/dynamic-context/*[$i]) satisfies $eval</assert>
            <assert>every $res in /output/static-context/result satisfies $res = ('3.0')</assert>
            <assert>every $res in /output/dynamic-context/result satisfies $res = ('3.0')</assert>
            <assert>every $res in /output/static-context/result-all/tokenize(., ' ') satisfies $res = ('3.0')</assert>
            <assert>every $res in /output/dynamic-context/result-all/tokenize(., ' ') satisfies $res = ('3.0')</assert>
         </all-of>
      </result>
   </test-case>
   
   <test-case name="system-property-101h">
      <description>
          System-property 'version' with method set to 'apply-templates', testing result = ('') and ns-scope: 'other-default-namespace'
          See for a more detailed description of the parameters and how this test works, the file system-property-100.xsl
      </description>
      <created by="Abel Braaksma" on="2015-09-30"/>
      <dependencies>
         <spec value="XSLT30+"/>
      </dependencies>
      <test>
         <stylesheet file="system-property-100.xsl"/>
         <param static="yes" name="property" select="'version'"/>
         <param static="yes" name="result" select="''"/>
         <param static="yes" name="method" select="'apply-templates'"/>
         <param static="yes" name="ns-scope" select="'other-default-namespace'"/>
      </test>
      <result>
         <all-of>
            <assert>/output/@evaluation-method = 'apply-templates'</assert>
            <assert>every $res in /output/global-variables/static-context/* satisfies $res = ('')</assert>
            <assert>every $res in /output/global-variables/dynamic-context/* satisfies $res = ('')</assert>
            <assert>every $eval in (for $i in 1 to 6 return /output/global-variables/static-context/*[$i] = /output/global-variables/dynamic-context/*[$i]) satisfies $eval</assert>
            <assert>every $res in /output/static-context/result satisfies $res = ('')</assert>
            <assert>every $res in /output/dynamic-context/result satisfies $res = ('')</assert>
            <assert>every $res in /output/static-context/result-all/tokenize(., ' ') satisfies $res = ('')</assert>
            <assert>every $res in /output/dynamic-context/result-all/tokenize(., ' ') satisfies $res = ('')</assert>
         </all-of>
      </result>
   </test-case>
   
   <test-case name="system-property-101i">
      <description>
          System-property 'other:version' with method set to 'apply-templates', testing result = ('3.0') and ns-scope: 'switch-xsl-namespace'
          See for a more detailed description of the parameters and how this test works, the file system-property-100.xsl
      </description>
      <created by="Abel Braaksma" on="2015-09-30"/>
      <dependencies>
         <spec value="XSLT30+"/>
      </dependencies>
      <test>
         <stylesheet file="system-property-100.xsl"/>
         <param static="yes" name="property" select="'other:version'"/>
         <param static="yes" name="result" select="'3.0'"/>
         <param static="yes" name="method" select="'apply-templates'"/>
         <param static="yes" name="ns-scope" select="'switch-xsl-namespace'"/>
      </test>
      <result>
         <all-of>
            <assert>/output/@evaluation-method = 'apply-templates'</assert>
            <assert>every $res in /output/global-variables/static-context/* satisfies $res = ('3.0')</assert>
            <assert>every $res in /output/global-variables/dynamic-context/* satisfies $res = ('3.0')</assert>
            <assert>every $eval in (for $i in 1 to 6 return /output/global-variables/static-context/*[$i] = /output/global-variables/dynamic-context/*[$i]) satisfies $eval</assert>
            <assert>every $res in /output/static-context/result satisfies $res = ('3.0')</assert>
            <assert>every $res in /output/dynamic-context/result satisfies $res = ('3.0')</assert>
            <assert>every $res in /output/static-context/result-all/tokenize(., ' ') satisfies $res = ('3.0')</assert>
            <assert>every $res in /output/dynamic-context/result-all/tokenize(., ' ') satisfies $res = ('3.0')</assert>
         </all-of>
      </result>
   </test-case>
   
   <test-case name="system-property-101j">
      <description>
          System-property 'xsl:version' with method set to 'stylesheet-function', testing result = ('3.0') and ns-scope: 'normal'
          See for a more detailed description of the parameters and how this test works, the file system-property-100.xsl
      </description>
      <created by="Abel Braaksma" on="2015-09-30"/>
      <dependencies>
         <spec value="XSLT30+"/>
      </dependencies>
      <test>
         <stylesheet file="system-property-100.xsl"/>
         <param static="yes" name="property" select="'xsl:version'"/>
         <param static="yes" name="result" select="'3.0'"/>
         <param static="yes" name="method" select="'stylesheet-function'"/>
         <param static="yes" name="ns-scope" select="'normal'"/>
      </test>
      <result>
         <all-of>
            <assert>/output/@evaluation-method = 'stylesheet-function'</assert>
            <assert>every $res in /output/global-variables/static-context/* satisfies $res = ('3.0')</assert>
            <assert>every $res in /output/global-variables/dynamic-context/* satisfies $res = ('3.0')</assert>
            <assert>every $eval in (for $i in 1 to 6 return /output/global-variables/static-context/*[$i] = /output/global-variables/dynamic-context/*[$i]) satisfies $eval</assert>
            <assert>every $res in /output/static-context/result satisfies $res = ('3.0')</assert>
            <assert>every $res in /output/dynamic-context/result satisfies $res = ('3.0')</assert>
            <assert>every $res in /output/static-context/result-all/tokenize(., ' ') satisfies $res = ('3.0')</assert>
            <assert>every $res in /output/dynamic-context/result-all/tokenize(., ' ') satisfies $res = ('3.0')</assert>
         </all-of>
      </result>
   </test-case>
   
   <test-case name="system-property-101k">
      <description>
          System-property 'version' with method set to 'stylesheet-function', testing result = ('') and ns-scope: 'other-default-namespace'
          See for a more detailed description of the parameters and how this test works, the file system-property-100.xsl
      </description>
      <created by="Abel Braaksma" on="2015-09-30"/>
      <dependencies>
         <spec value="XSLT30+"/>
      </dependencies>
      <test>
         <stylesheet file="system-property-100.xsl"/>
         <param static="yes" name="property" select="'version'"/>
         <param static="yes" name="result" select="''"/>
         <param static="yes" name="method" select="'stylesheet-function'"/>
         <param static="yes" name="ns-scope" select="'other-default-namespace'"/>
      </test>
      <result>
         <all-of>
            <assert>/output/@evaluation-method = 'stylesheet-function'</assert>
            <assert>every $res in /output/global-variables/static-context/* satisfies $res = ('')</assert>
            <assert>every $res in /output/global-variables/dynamic-context/* satisfies $res = ('')</assert>
            <assert>every $eval in (for $i in 1 to 6 return /output/global-variables/static-context/*[$i] = /output/global-variables/dynamic-context/*[$i]) satisfies $eval</assert>
            <assert>every $res in /output/static-context/result satisfies $res = ('')</assert>
            <assert>every $res in /output/dynamic-context/result satisfies $res = ('')</assert>
            <assert>every $res in /output/static-context/result-all/tokenize(., ' ') satisfies $res = ('')</assert>
            <assert>every $res in /output/dynamic-context/result-all/tokenize(., ' ') satisfies $res = ('')</assert>
         </all-of>
      </result>
   </test-case>
   
   <test-case name="system-property-101l">
      <description>
          System-property 'other:version' with method set to 'stylesheet-function', testing result = ('3.0') and ns-scope: 'switch-xsl-namespace'
          See for a more detailed description of the parameters and how this test works, the file system-property-100.xsl
      </description>
      <created by="Abel Braaksma" on="2015-09-30"/>
      <dependencies>
         <spec value="XSLT30+"/>
      </dependencies>
      <test>
         <stylesheet file="system-property-100.xsl"/>
         <param static="yes" name="property" select="'other:version'"/>
         <param static="yes" name="result" select="'3.0'"/>
         <param static="yes" name="method" select="'stylesheet-function'"/>
         <param static="yes" name="ns-scope" select="'switch-xsl-namespace'"/>
      </test>
      <result>
         <all-of>
            <assert>/output/@evaluation-method = 'stylesheet-function'</assert>
            <assert>every $res in /output/global-variables/static-context/* satisfies $res = ('3.0')</assert>
            <assert>every $res in /output/global-variables/dynamic-context/* satisfies $res = ('3.0')</assert>
            <assert>every $eval in (for $i in 1 to 6 return /output/global-variables/static-context/*[$i] = /output/global-variables/dynamic-context/*[$i]) satisfies $eval</assert>
            <assert>every $res in /output/static-context/result satisfies $res = ('3.0')</assert>
            <assert>every $res in /output/dynamic-context/result satisfies $res = ('3.0')</assert>
            <assert>every $res in /output/static-context/result-all/tokenize(., ' ') satisfies $res = ('3.0')</assert>
            <assert>every $res in /output/dynamic-context/result-all/tokenize(., ' ') satisfies $res = ('3.0')</assert>
         </all-of>
      </result>
   </test-case>
   
   <test-case name="system-property-101m">
      <description>
          System-property 'xsl:version' with method set to 'tunneled', testing result = ('3.0') and ns-scope: 'normal'
          See for a more detailed description of the parameters and how this test works, the file system-property-100.xsl
      </description>
      <created by="Abel Braaksma" on="2015-09-30"/>
      <dependencies>
         <spec value="XSLT30+"/>
      </dependencies>
      <test>
         <stylesheet file="system-property-100.xsl"/>
         <param static="yes" name="property" select="'xsl:version'"/>
         <param static="yes" name="result" select="'3.0'"/>
         <param static="yes" name="method" select="'tunneled'"/>
         <param static="yes" name="ns-scope" select="'normal'"/>
      </test>
      <result>
         <all-of>
            <assert>/output/@evaluation-method = 'tunneled'</assert>
            <assert>every $res in /output/global-variables/static-context/* satisfies $res = ('3.0')</assert>
            <assert>every $res in /output/global-variables/dynamic-context/* satisfies $res = ('3.0')</assert>
            <assert>every $eval in (for $i in 1 to 6 return /output/global-variables/static-context/*[$i] = /output/global-variables/dynamic-context/*[$i]) satisfies $eval</assert>
            <assert>every $res in /output/static-context/result satisfies $res = ('3.0')</assert>
            <assert>every $res in /output/dynamic-context/result satisfies $res = ('3.0')</assert>
            <assert>every $res in /output/static-context/result-all/tokenize(., ' ') satisfies $res = ('3.0')</assert>
            <assert>every $res in /output/dynamic-context/result-all/tokenize(., ' ') satisfies $res = ('3.0')</assert>
         </all-of>
      </result>
   </test-case>
   
   <test-case name="system-property-101n">
      <description>
          System-property 'version' with method set to 'tunneled', testing result = ('') and ns-scope: 'other-default-namespace'
          See for a more detailed description of the parameters and how this test works, the file system-property-100.xsl
      </description>
      <created by="Abel Braaksma" on="2015-09-30"/>
      <dependencies>
         <spec value="XSLT30+"/>
      </dependencies>
      <test>
         <stylesheet file="system-property-100.xsl"/>
         <param static="yes" name="property" select="'version'"/>
         <param static="yes" name="result" select="''"/>
         <param static="yes" name="method" select="'tunneled'"/>
         <param static="yes" name="ns-scope" select="'other-default-namespace'"/>
      </test>
      <result>
         <all-of>
            <assert>/output/@evaluation-method = 'tunneled'</assert>
            <assert>every $res in /output/global-variables/static-context/* satisfies $res = ('')</assert>
            <assert>every $res in /output/global-variables/dynamic-context/* satisfies $res = ('')</assert>
            <assert>every $eval in (for $i in 1 to 6 return /output/global-variables/static-context/*[$i] = /output/global-variables/dynamic-context/*[$i]) satisfies $eval</assert>
            <assert>every $res in /output/static-context/result satisfies $res = ('')</assert>
            <assert>every $res in /output/dynamic-context/result satisfies $res = ('')</assert>
            <assert>every $res in /output/static-context/result-all/tokenize(., ' ') satisfies $res = ('')</assert>
            <assert>every $res in /output/dynamic-context/result-all/tokenize(., ' ') satisfies $res = ('')</assert>
         </all-of>
      </result>
   </test-case>
   
   <test-case name="system-property-101o">
      <description>
          System-property 'other:version' with method set to 'tunneled', testing result = ('3.0') and ns-scope: 'switch-xsl-namespace'
          See for a more detailed description of the parameters and how this test works, the file system-property-100.xsl
      </description>
      <created by="Abel Braaksma" on="2015-09-30"/>
      <dependencies>
         <spec value="XSLT30+"/>
      </dependencies>
      <test>
         <stylesheet file="system-property-100.xsl"/>
         <param static="yes" name="property" select="'other:version'"/>
         <param static="yes" name="result" select="'3.0'"/>
         <param static="yes" name="method" select="'tunneled'"/>
         <param static="yes" name="ns-scope" select="'switch-xsl-namespace'"/>
      </test>
      <result>
         <all-of>
            <assert>/output/@evaluation-method = 'tunneled'</assert>
            <assert>every $res in /output/global-variables/static-context/* satisfies $res = ('3.0')</assert>
            <assert>every $res in /output/global-variables/dynamic-context/* satisfies $res = ('3.0')</assert>
            <assert>every $eval in (for $i in 1 to 6 return /output/global-variables/static-context/*[$i] = /output/global-variables/dynamic-context/*[$i]) satisfies $eval</assert>
            <assert>every $res in /output/static-context/result satisfies $res = ('3.0')</assert>
            <assert>every $res in /output/dynamic-context/result satisfies $res = ('3.0')</assert>
            <assert>every $res in /output/static-context/result-all/tokenize(., ' ') satisfies $res = ('3.0')</assert>
            <assert>every $res in /output/dynamic-context/result-all/tokenize(., ' ') satisfies $res = ('3.0')</assert>
         </all-of>
      </result>
   </test-case>
   
   <test-case name="system-property-102a">
      <description>
          System-property 'xsl:is-schema-aware' with method set to 'static', testing result = ('yes', 'no') and ns-scope: 'normal'
          See for a more detailed description of the parameters and how this test works, the file system-property-100.xsl
      </description>
      <created by="Abel Braaksma" on="2015-09-30"/>
      <dependencies>
         <spec value="XSLT30+"/>
      </dependencies>
      <test>
         <stylesheet file="system-property-100.xsl"/>
         <param static="yes" name="property" select="'xsl:is-schema-aware'"/>
         <param static="yes" name="result" select="'yes', 'no'"/>
         <param static="yes" name="method" select="'static'"/>
         <param static="yes" name="ns-scope" select="'normal'"/>
      </test>
      <result>
         <all-of>
            <assert>/output/@evaluation-method = 'static'</assert>
            <assert>every $res in /output/global-variables/static-context/* satisfies $res = ('yes', 'no')</assert>
            <assert>every $res in /output/global-variables/dynamic-context/* satisfies $res = ('yes', 'no')</assert>
            <assert>every $eval in (for $i in 1 to 6 return /output/global-variables/static-context/*[$i] = /output/global-variables/dynamic-context/*[$i]) satisfies $eval</assert>
            <assert>every $res in /output/static-context/result satisfies $res = ('yes', 'no')</assert>
            <assert>every $res in /output/dynamic-context/result satisfies $res = ('yes', 'no')</assert>
            <assert>every $res in /output/static-context/result-all/tokenize(., ' ') satisfies $res = ('yes', 'no')</assert>
            <assert>every $res in /output/dynamic-context/result-all/tokenize(., ' ') satisfies $res = ('yes', 'no')</assert>
         </all-of>
      </result>
   </test-case>
   
   <test-case name="system-property-102b">
      <description>
          System-property 'is-schema-aware' with method set to 'static', testing result = ('') and ns-scope: 'other-default-namespace'
          See for a more detailed description of the parameters and how this test works, the file system-property-100.xsl
      </description>
      <created by="Abel Braaksma" on="2015-09-30"/>
      <dependencies>
         <spec value="XSLT30+"/>
      </dependencies>
      <test>
         <stylesheet file="system-property-100.xsl"/>
         <param static="yes" name="property" select="'is-schema-aware'"/>
         <param static="yes" name="result" select="''"/>
         <param static="yes" name="method" select="'static'"/>
         <param static="yes" name="ns-scope" select="'other-default-namespace'"/>
      </test>
      <result>
         <all-of>
            <assert>/output/@evaluation-method = 'static'</assert>
            <assert>every $res in /output/global-variables/static-context/* satisfies $res = ('')</assert>
            <assert>every $res in /output/global-variables/dynamic-context/* satisfies $res = ('')</assert>
            <assert>every $eval in (for $i in 1 to 6 return /output/global-variables/static-context/*[$i] = /output/global-variables/dynamic-context/*[$i]) satisfies $eval</assert>
            <assert>every $res in /output/static-context/result satisfies $res = ('')</assert>
            <assert>every $res in /output/dynamic-context/result satisfies $res = ('')</assert>
            <assert>every $res in /output/static-context/result-all/tokenize(., ' ') satisfies $res = ('')</assert>
            <assert>every $res in /output/dynamic-context/result-all/tokenize(., ' ') satisfies $res = ('')</assert>
         </all-of>
      </result>
   </test-case>
   
   <test-case name="system-property-102c">
      <description>
          System-property 'other:is-schema-aware' with method set to 'static', testing result = ('yes', 'no') and ns-scope: 'switch-xsl-namespace'
          See for a more detailed description of the parameters and how this test works, the file system-property-100.xsl
      </description>
      <created by="Abel Braaksma" on="2015-09-30"/>
      <dependencies>
         <spec value="XSLT30+"/>
      </dependencies>
      <test>
         <stylesheet file="system-property-100.xsl"/>
         <param static="yes" name="property" select="'other:is-schema-aware'"/>
         <param static="yes" name="result" select="'yes', 'no'"/>
         <param static="yes" name="method" select="'static'"/>
         <param static="yes" name="ns-scope" select="'switch-xsl-namespace'"/>
      </test>
      <result>
         <all-of>
            <assert>/output/@evaluation-method = 'static'</assert>
            <assert>every $res in /output/global-variables/static-context/* satisfies $res = ('yes', 'no')</assert>
            <assert>every $res in /output/global-variables/dynamic-context/* satisfies $res = ('yes', 'no')</assert>
            <assert>every $eval in (for $i in 1 to 6 return /output/global-variables/static-context/*[$i] = /output/global-variables/dynamic-context/*[$i]) satisfies $eval</assert>
            <assert>every $res in /output/static-context/result satisfies $res = ('yes', 'no')</assert>
            <assert>every $res in /output/dynamic-context/result satisfies $res = ('yes', 'no')</assert>
            <assert>every $res in /output/static-context/result-all/tokenize(., ' ') satisfies $res = ('yes', 'no')</assert>
            <assert>every $res in /output/dynamic-context/result-all/tokenize(., ' ') satisfies $res = ('yes', 'no')</assert>
         </all-of>
      </result>
   </test-case>
   
   <test-case name="system-property-102d">
      <description>
          System-property 'xsl:is-schema-aware' with method set to 'evaluate', testing result = ('yes', 'no') and ns-scope: 'normal'
          See for a more detailed description of the parameters and how this test works, the file system-property-100.xsl
      </description>
      <created by="Abel Braaksma" on="2015-09-30"/>
      <dependencies>
         <spec value="XSLT30+"/>
      </dependencies>
      <test>
         <stylesheet file="system-property-100.xsl"/>
         <param static="yes" name="property" select="'xsl:is-schema-aware'"/>
         <param static="yes" name="result" select="'yes', 'no'"/>
         <param static="yes" name="method" select="'evaluate'"/>
         <param static="yes" name="ns-scope" select="'normal'"/>
      </test>
      <result>
         <all-of>
            <assert>/output/@evaluation-method = 'evaluate'</assert>
            <assert>every $res in /output/global-variables/static-context/* satisfies $res = ('yes', 'no')</assert>
            <assert>every $res in /output/global-variables/dynamic-context/* satisfies $res = ('yes', 'no')</assert>
            <assert>every $eval in (for $i in 1 to 6 return /output/global-variables/static-context/*[$i] = /output/global-variables/dynamic-context/*[$i]) satisfies $eval</assert>
            <assert>every $res in /output/static-context/result satisfies $res = ('yes', 'no')</assert>
            <assert>every $res in /output/dynamic-context/result satisfies $res = ('yes', 'no')</assert>
            <assert>every $res in /output/static-context/result-all/tokenize(., ' ') satisfies $res = ('yes', 'no')</assert>
            <assert>every $res in /output/dynamic-context/result-all/tokenize(., ' ') satisfies $res = ('yes', 'no')</assert>
         </all-of>
      </result>
   </test-case>
   
   <test-case name="system-property-102e">
      <description>
          System-property 'is-schema-aware' with method set to 'evaluate', testing result = ('') and ns-scope: 'other-default-namespace'
          See for a more detailed description of the parameters and how this test works, the file system-property-100.xsl
      </description>
      <created by="Abel Braaksma" on="2015-09-30"/>
      <dependencies>
         <spec value="XSLT30+"/>
      </dependencies>
      <test>
         <stylesheet file="system-property-100.xsl"/>
         <param static="yes" name="property" select="'is-schema-aware'"/>
         <param static="yes" name="result" select="''"/>
         <param static="yes" name="method" select="'evaluate'"/>
         <param static="yes" name="ns-scope" select="'other-default-namespace'"/>
      </test>
      <result>
         <all-of>
            <assert>/output/@evaluation-method = 'evaluate'</assert>
            <assert>every $res in /output/global-variables/static-context/* satisfies $res = ('')</assert>
            <assert>every $res in /output/global-variables/dynamic-context/* satisfies $res = ('')</assert>
            <assert>every $eval in (for $i in 1 to 6 return /output/global-variables/static-context/*[$i] = /output/global-variables/dynamic-context/*[$i]) satisfies $eval</assert>
            <assert>every $res in /output/static-context/result satisfies $res = ('')</assert>
            <assert>every $res in /output/dynamic-context/result satisfies $res = ('')</assert>
            <assert>every $res in /output/static-context/result-all/tokenize(., ' ') satisfies $res = ('')</assert>
            <assert>every $res in /output/dynamic-context/result-all/tokenize(., ' ') satisfies $res = ('')</assert>
         </all-of>
      </result>
   </test-case>
   
   <test-case name="system-property-102f">
      <description>
          System-property 'other:is-schema-aware' with method set to 'evaluate', testing result = ('yes', 'no') and ns-scope: 'switch-xsl-namespace'
          See for a more detailed description of the parameters and how this test works, the file system-property-100.xsl
      </description>
      <created by="Abel Braaksma" on="2015-09-30"/>
      <dependencies>
         <spec value="XSLT30+"/>
      </dependencies>
      <test>
         <stylesheet file="system-property-100.xsl"/>
         <param static="yes" name="property" select="'other:is-schema-aware'"/>
         <param static="yes" name="result" select="'yes', 'no'"/>
         <param static="yes" name="method" select="'evaluate'"/>
         <param static="yes" name="ns-scope" select="'switch-xsl-namespace'"/>
      </test>
      <result>
         <all-of>
            <assert>/output/@evaluation-method = 'evaluate'</assert>
            <assert>every $res in /output/global-variables/static-context/* satisfies $res = ('yes', 'no')</assert>
            <assert>every $res in /output/global-variables/dynamic-context/* satisfies $res = ('yes', 'no')</assert>
            <assert>every $eval in (for $i in 1 to 6 return /output/global-variables/static-context/*[$i] = /output/global-variables/dynamic-context/*[$i]) satisfies $eval</assert>
            <assert>every $res in /output/static-context/result satisfies $res = ('yes', 'no')</assert>
            <assert>every $res in /output/dynamic-context/result satisfies $res = ('yes', 'no')</assert>
            <assert>every $res in /output/static-context/result-all/tokenize(., ' ') satisfies $res = ('yes', 'no')</assert>
            <assert>every $res in /output/dynamic-context/result-all/tokenize(., ' ') satisfies $res = ('yes', 'no')</assert>
         </all-of>
      </result>
   </test-case>
   
   <test-case name="system-property-102g">
      <description>
          System-property 'xsl:is-schema-aware' with method set to 'apply-templates', testing result = ('yes', 'no') and ns-scope: 'normal'
          See for a more detailed description of the parameters and how this test works, the file system-property-100.xsl
      </description>
      <created by="Abel Braaksma" on="2015-09-30"/>
      <dependencies>
         <spec value="XSLT30+"/>
      </dependencies>
      <test>
         <stylesheet file="system-property-100.xsl"/>
         <param static="yes" name="property" select="'xsl:is-schema-aware'"/>
         <param static="yes" name="result" select="'yes', 'no'"/>
         <param static="yes" name="method" select="'apply-templates'"/>
         <param static="yes" name="ns-scope" select="'normal'"/>
      </test>
      <result>
         <all-of>
            <assert>/output/@evaluation-method = 'apply-templates'</assert>
            <assert>every $res in /output/global-variables/static-context/* satisfies $res = ('yes', 'no')</assert>
            <assert>every $res in /output/global-variables/dynamic-context/* satisfies $res = ('yes', 'no')</assert>
            <assert>every $eval in (for $i in 1 to 6 return /output/global-variables/static-context/*[$i] = /output/global-variables/dynamic-context/*[$i]) satisfies $eval</assert>
            <assert>every $res in /output/static-context/result satisfies $res = ('yes', 'no')</assert>
            <assert>every $res in /output/dynamic-context/result satisfies $res = ('yes', 'no')</assert>
            <assert>every $res in /output/static-context/result-all/tokenize(., ' ') satisfies $res = ('yes', 'no')</assert>
            <assert>every $res in /output/dynamic-context/result-all/tokenize(., ' ') satisfies $res = ('yes', 'no')</assert>
         </all-of>
      </result>
   </test-case>
   
   <test-case name="system-property-102h">
      <description>
          System-property 'is-schema-aware' with method set to 'apply-templates', testing result = ('') and ns-scope: 'other-default-namespace'
          See for a more detailed description of the parameters and how this test works, the file system-property-100.xsl
      </description>
      <created by="Abel Braaksma" on="2015-09-30"/>
      <dependencies>
         <spec value="XSLT30+"/>
      </dependencies>
      <test>
         <stylesheet file="system-property-100.xsl"/>
         <param static="yes" name="property" select="'is-schema-aware'"/>
         <param static="yes" name="result" select="''"/>
         <param static="yes" name="method" select="'apply-templates'"/>
         <param static="yes" name="ns-scope" select="'other-default-namespace'"/>
      </test>
      <result>
         <all-of>
            <assert>/output/@evaluation-method = 'apply-templates'</assert>
            <assert>every $res in /output/global-variables/static-context/* satisfies $res = ('')</assert>
            <assert>every $res in /output/global-variables/dynamic-context/* satisfies $res = ('')</assert>
            <assert>every $eval in (for $i in 1 to 6 return /output/global-variables/static-context/*[$i] = /output/global-variables/dynamic-context/*[$i]) satisfies $eval</assert>
            <assert>every $res in /output/static-context/result satisfies $res = ('')</assert>
            <assert>every $res in /output/dynamic-context/result satisfies $res = ('')</assert>
            <assert>every $res in /output/static-context/result-all/tokenize(., ' ') satisfies $res = ('')</assert>
            <assert>every $res in /output/dynamic-context/result-all/tokenize(., ' ') satisfies $res = ('')</assert>
         </all-of>
      </result>
   </test-case>
   
   <test-case name="system-property-102i">
      <description>
          System-property 'other:is-schema-aware' with method set to 'apply-templates', testing result = ('yes', 'no') and ns-scope: 'switch-xsl-namespace'
          See for a more detailed description of the parameters and how this test works, the file system-property-100.xsl
      </description>
      <created by="Abel Braaksma" on="2015-09-30"/>
      <dependencies>
         <spec value="XSLT30+"/>
      </dependencies>
      <test>
         <stylesheet file="system-property-100.xsl"/>
         <param static="yes" name="property" select="'other:is-schema-aware'"/>
         <param static="yes" name="result" select="'yes', 'no'"/>
         <param static="yes" name="method" select="'apply-templates'"/>
         <param static="yes" name="ns-scope" select="'switch-xsl-namespace'"/>
      </test>
      <result>
         <all-of>
            <assert>/output/@evaluation-method = 'apply-templates'</assert>
            <assert>every $res in /output/global-variables/static-context/* satisfies $res = ('yes', 'no')</assert>
            <assert>every $res in /output/global-variables/dynamic-context/* satisfies $res = ('yes', 'no')</assert>
            <assert>every $eval in (for $i in 1 to 6 return /output/global-variables/static-context/*[$i] = /output/global-variables/dynamic-context/*[$i]) satisfies $eval</assert>
            <assert>every $res in /output/static-context/result satisfies $res = ('yes', 'no')</assert>
            <assert>every $res in /output/dynamic-context/result satisfies $res = ('yes', 'no')</assert>
            <assert>every $res in /output/static-context/result-all/tokenize(., ' ') satisfies $res = ('yes', 'no')</assert>
            <assert>every $res in /output/dynamic-context/result-all/tokenize(., ' ') satisfies $res = ('yes', 'no')</assert>
         </all-of>
      </result>
   </test-case>
   
   <test-case name="system-property-102j">
      <description>
          System-property 'xsl:is-schema-aware' with method set to 'stylesheet-function', testing result = ('yes', 'no') and ns-scope: 'normal'
          See for a more detailed description of the parameters and how this test works, the file system-property-100.xsl
      </description>
      <created by="Abel Braaksma" on="2015-09-30"/>
      <dependencies>
         <spec value="XSLT30+"/>
      </dependencies>
      <test>
         <stylesheet file="system-property-100.xsl"/>
         <param static="yes" name="property" select="'xsl:is-schema-aware'"/>
         <param static="yes" name="result" select="'yes', 'no'"/>
         <param static="yes" name="method" select="'stylesheet-function'"/>
         <param static="yes" name="ns-scope" select="'normal'"/>
      </test>
      <result>
         <all-of>
            <assert>/output/@evaluation-method = 'stylesheet-function'</assert>
            <assert>every $res in /output/global-variables/static-context/* satisfies $res = ('yes', 'no')</assert>
            <assert>every $res in /output/global-variables/dynamic-context/* satisfies $res = ('yes', 'no')</assert>
            <assert>every $eval in (for $i in 1 to 6 return /output/global-variables/static-context/*[$i] = /output/global-variables/dynamic-context/*[$i]) satisfies $eval</assert>
            <assert>every $res in /output/static-context/result satisfies $res = ('yes', 'no')</assert>
            <assert>every $res in /output/dynamic-context/result satisfies $res = ('yes', 'no')</assert>
            <assert>every $res in /output/static-context/result-all/tokenize(., ' ') satisfies $res = ('yes', 'no')</assert>
            <assert>every $res in /output/dynamic-context/result-all/tokenize(., ' ') satisfies $res = ('yes', 'no')</assert>
         </all-of>
      </result>
   </test-case>
   
   <test-case name="system-property-102k">
      <description>
          System-property 'is-schema-aware' with method set to 'stylesheet-function', testing result = ('') and ns-scope: 'other-default-namespace'
          See for a more detailed description of the parameters and how this test works, the file system-property-100.xsl
      </description>
      <created by="Abel Braaksma" on="2015-09-30"/>
      <dependencies>
         <spec value="XSLT30+"/>
      </dependencies>
      <test>
         <stylesheet file="system-property-100.xsl"/>
         <param static="yes" name="property" select="'is-schema-aware'"/>
         <param static="yes" name="result" select="''"/>
         <param static="yes" name="method" select="'stylesheet-function'"/>
         <param static="yes" name="ns-scope" select="'other-default-namespace'"/>
      </test>
      <result>
         <all-of>
            <assert>/output/@evaluation-method = 'stylesheet-function'</assert>
            <assert>every $res in /output/global-variables/static-context/* satisfies $res = ('')</assert>
            <assert>every $res in /output/global-variables/dynamic-context/* satisfies $res = ('')</assert>
            <assert>every $eval in (for $i in 1 to 6 return /output/global-variables/static-context/*[$i] = /output/global-variables/dynamic-context/*[$i]) satisfies $eval</assert>
            <assert>every $res in /output/static-context/result satisfies $res = ('')</assert>
            <assert>every $res in /output/dynamic-context/result satisfies $res = ('')</assert>
            <assert>every $res in /output/static-context/result-all/tokenize(., ' ') satisfies $res = ('')</assert>
            <assert>every $res in /output/dynamic-context/result-all/tokenize(., ' ') satisfies $res = ('')</assert>
         </all-of>
      </result>
   </test-case>
   
   <test-case name="system-property-102l">
      <description>
          System-property 'other:is-schema-aware' with method set to 'stylesheet-function', testing result = ('yes', 'no') and ns-scope: 'switch-xsl-namespace'
          See for a more detailed description of the parameters and how this test works, the file system-property-100.xsl
      </description>
      <created by="Abel Braaksma" on="2015-09-30"/>
      <dependencies>
         <spec value="XSLT30+"/>
      </dependencies>
      <test>
         <stylesheet file="system-property-100.xsl"/>
         <param static="yes" name="property" select="'other:is-schema-aware'"/>
         <param static="yes" name="result" select="'yes', 'no'"/>
         <param static="yes" name="method" select="'stylesheet-function'"/>
         <param static="yes" name="ns-scope" select="'switch-xsl-namespace'"/>
      </test>
      <result>
         <all-of>
            <assert>/output/@evaluation-method = 'stylesheet-function'</assert>
            <assert>every $res in /output/global-variables/static-context/* satisfies $res = ('yes', 'no')</assert>
            <assert>every $res in /output/global-variables/dynamic-context/* satisfies $res = ('yes', 'no')</assert>
            <assert>every $eval in (for $i in 1 to 6 return /output/global-variables/static-context/*[$i] = /output/global-variables/dynamic-context/*[$i]) satisfies $eval</assert>
            <assert>every $res in /output/static-context/result satisfies $res = ('yes', 'no')</assert>
            <assert>every $res in /output/dynamic-context/result satisfies $res = ('yes', 'no')</assert>
            <assert>every $res in /output/static-context/result-all/tokenize(., ' ') satisfies $res = ('yes', 'no')</assert>
            <assert>every $res in /output/dynamic-context/result-all/tokenize(., ' ') satisfies $res = ('yes', 'no')</assert>
         </all-of>
      </result>
   </test-case>
   
   <test-case name="system-property-102m">
      <description>
          System-property 'xsl:is-schema-aware' with method set to 'tunneled', testing result = ('yes', 'no') and ns-scope: 'normal'
          See for a more detailed description of the parameters and how this test works, the file system-property-100.xsl
      </description>
      <created by="Abel Braaksma" on="2015-09-30"/>
      <dependencies>
         <spec value="XSLT30+"/>
      </dependencies>
      <test>
         <stylesheet file="system-property-100.xsl"/>
         <param static="yes" name="property" select="'xsl:is-schema-aware'"/>
         <param static="yes" name="result" select="'yes', 'no'"/>
         <param static="yes" name="method" select="'tunneled'"/>
         <param static="yes" name="ns-scope" select="'normal'"/>
      </test>
      <result>
         <all-of>
            <assert>/output/@evaluation-method = 'tunneled'</assert>
            <assert>every $res in /output/global-variables/static-context/* satisfies $res = ('yes', 'no')</assert>
            <assert>every $res in /output/global-variables/dynamic-context/* satisfies $res = ('yes', 'no')</assert>
            <assert>every $eval in (for $i in 1 to 6 return /output/global-variables/static-context/*[$i] = /output/global-variables/dynamic-context/*[$i]) satisfies $eval</assert>
            <assert>every $res in /output/static-context/result satisfies $res = ('yes', 'no')</assert>
            <assert>every $res in /output/dynamic-context/result satisfies $res = ('yes', 'no')</assert>
            <assert>every $res in /output/static-context/result-all/tokenize(., ' ') satisfies $res = ('yes', 'no')</assert>
            <assert>every $res in /output/dynamic-context/result-all/tokenize(., ' ') satisfies $res = ('yes', 'no')</assert>
         </all-of>
      </result>
   </test-case>
   
   <test-case name="system-property-102n">
      <description>
          System-property 'is-schema-aware' with method set to 'tunneled', testing result = ('') and ns-scope: 'other-default-namespace'
          See for a more detailed description of the parameters and how this test works, the file system-property-100.xsl
      </description>
      <created by="Abel Braaksma" on="2015-09-30"/>
      <dependencies>
         <spec value="XSLT30+"/>
      </dependencies>
      <test>
         <stylesheet file="system-property-100.xsl"/>
         <param static="yes" name="property" select="'is-schema-aware'"/>
         <param static="yes" name="result" select="''"/>
         <param static="yes" name="method" select="'tunneled'"/>
         <param static="yes" name="ns-scope" select="'other-default-namespace'"/>
      </test>
      <result>
         <all-of>
            <assert>/output/@evaluation-method = 'tunneled'</assert>
            <assert>every $res in /output/global-variables/static-context/* satisfies $res = ('')</assert>
            <assert>every $res in /output/global-variables/dynamic-context/* satisfies $res = ('')</assert>
            <assert>every $eval in (for $i in 1 to 6 return /output/global-variables/static-context/*[$i] = /output/global-variables/dynamic-context/*[$i]) satisfies $eval</assert>
            <assert>every $res in /output/static-context/result satisfies $res = ('')</assert>
            <assert>every $res in /output/dynamic-context/result satisfies $res = ('')</assert>
            <assert>every $res in /output/static-context/result-all/tokenize(., ' ') satisfies $res = ('')</assert>
            <assert>every $res in /output/dynamic-context/result-all/tokenize(., ' ') satisfies $res = ('')</assert>
         </all-of>
      </result>
   </test-case>
   
   <test-case name="system-property-102o">
      <description>
          System-property 'other:is-schema-aware' with method set to 'tunneled', testing result = ('yes', 'no') and ns-scope: 'switch-xsl-namespace'
          See for a more detailed description of the parameters and how this test works, the file system-property-100.xsl
      </description>
      <created by="Abel Braaksma" on="2015-09-30"/>
      <dependencies>
         <spec value="XSLT30+"/>
      </dependencies>
      <test>
         <stylesheet file="system-property-100.xsl"/>
         <param static="yes" name="property" select="'other:is-schema-aware'"/>
         <param static="yes" name="result" select="'yes', 'no'"/>
         <param static="yes" name="method" select="'tunneled'"/>
         <param static="yes" name="ns-scope" select="'switch-xsl-namespace'"/>
      </test>
      <result>
         <all-of>
            <assert>/output/@evaluation-method = 'tunneled'</assert>
            <assert>every $res in /output/global-variables/static-context/* satisfies $res = ('yes', 'no')</assert>
            <assert>every $res in /output/global-variables/dynamic-context/* satisfies $res = ('yes', 'no')</assert>
            <assert>every $eval in (for $i in 1 to 6 return /output/global-variables/static-context/*[$i] = /output/global-variables/dynamic-context/*[$i]) satisfies $eval</assert>
            <assert>every $res in /output/static-context/result satisfies $res = ('yes', 'no')</assert>
            <assert>every $res in /output/dynamic-context/result satisfies $res = ('yes', 'no')</assert>
            <assert>every $res in /output/static-context/result-all/tokenize(., ' ') satisfies $res = ('yes', 'no')</assert>
            <assert>every $res in /output/dynamic-context/result-all/tokenize(., ' ') satisfies $res = ('yes', 'no')</assert>
         </all-of>
      </result>
   </test-case>
   
   <test-case name="system-property-103a">
      <description>
          System-property 'xsl:supports-serialization' with method set to 'static', testing result = ('yes', 'no') and ns-scope: 'normal'
          See for a more detailed description of the parameters and how this test works, the file system-property-100.xsl
      </description>
      <created by="Abel Braaksma" on="2015-09-30"/>
      <dependencies>
         <spec value="XSLT30+"/>
      </dependencies>
      <test>
         <stylesheet file="system-property-100.xsl"/>
         <param static="yes" name="property" select="'xsl:supports-serialization'"/>
         <param static="yes" name="result" select="'yes', 'no'"/>
         <param static="yes" name="method" select="'static'"/>
         <param static="yes" name="ns-scope" select="'normal'"/>
      </test>
      <result>
         <all-of>
            <assert>/output/@evaluation-method = 'static'</assert>
            <assert>every $res in /output/global-variables/static-context/* satisfies $res = ('yes', 'no')</assert>
            <assert>every $res in /output/global-variables/dynamic-context/* satisfies $res = ('yes', 'no')</assert>
            <assert>every $eval in (for $i in 1 to 6 return /output/global-variables/static-context/*[$i] = /output/global-variables/dynamic-context/*[$i]) satisfies $eval</assert>
            <assert>every $res in /output/static-context/result satisfies $res = ('yes', 'no')</assert>
            <assert>every $res in /output/dynamic-context/result satisfies $res = ('yes', 'no')</assert>
            <assert>every $res in /output/static-context/result-all/tokenize(., ' ') satisfies $res = ('yes', 'no')</assert>
            <assert>every $res in /output/dynamic-context/result-all/tokenize(., ' ') satisfies $res = ('yes', 'no')</assert>
         </all-of>
      </result>
   </test-case>
   
   <test-case name="system-property-103b">
      <description>
          System-property 'supports-serialization' with method set to 'static', testing result = ('') and ns-scope: 'other-default-namespace'
          See for a more detailed description of the parameters and how this test works, the file system-property-100.xsl
      </description>
      <created by="Abel Braaksma" on="2015-09-30"/>
      <dependencies>
         <spec value="XSLT30+"/>
      </dependencies>
      <test>
         <stylesheet file="system-property-100.xsl"/>
         <param static="yes" name="property" select="'supports-serialization'"/>
         <param static="yes" name="result" select="''"/>
         <param static="yes" name="method" select="'static'"/>
         <param static="yes" name="ns-scope" select="'other-default-namespace'"/>
      </test>
      <result>
         <all-of>
            <assert>/output/@evaluation-method = 'static'</assert>
            <assert>every $res in /output/global-variables/static-context/* satisfies $res = ('')</assert>
            <assert>every $res in /output/global-variables/dynamic-context/* satisfies $res = ('')</assert>
            <assert>every $eval in (for $i in 1 to 6 return /output/global-variables/static-context/*[$i] = /output/global-variables/dynamic-context/*[$i]) satisfies $eval</assert>
            <assert>every $res in /output/static-context/result satisfies $res = ('')</assert>
            <assert>every $res in /output/dynamic-context/result satisfies $res = ('')</assert>
            <assert>every $res in /output/static-context/result-all/tokenize(., ' ') satisfies $res = ('')</assert>
            <assert>every $res in /output/dynamic-context/result-all/tokenize(., ' ') satisfies $res = ('')</assert>
         </all-of>
      </result>
   </test-case>
   
   <test-case name="system-property-103c">
      <description>
          System-property 'other:supports-serialization' with method set to 'static', testing result = ('yes', 'no') and ns-scope: 'switch-xsl-namespace'
          See for a more detailed description of the parameters and how this test works, the file system-property-100.xsl
      </description>
      <created by="Abel Braaksma" on="2015-09-30"/>
      <dependencies>
         <spec value="XSLT30+"/>
      </dependencies>
      <test>
         <stylesheet file="system-property-100.xsl"/>
         <param static="yes" name="property" select="'other:supports-serialization'"/>
         <param static="yes" name="result" select="'yes', 'no'"/>
         <param static="yes" name="method" select="'static'"/>
         <param static="yes" name="ns-scope" select="'switch-xsl-namespace'"/>
      </test>
      <result>
         <all-of>
            <assert>/output/@evaluation-method = 'static'</assert>
            <assert>every $res in /output/global-variables/static-context/* satisfies $res = ('yes', 'no')</assert>
            <assert>every $res in /output/global-variables/dynamic-context/* satisfies $res = ('yes', 'no')</assert>
            <assert>every $eval in (for $i in 1 to 6 return /output/global-variables/static-context/*[$i] = /output/global-variables/dynamic-context/*[$i]) satisfies $eval</assert>
            <assert>every $res in /output/static-context/result satisfies $res = ('yes', 'no')</assert>
            <assert>every $res in /output/dynamic-context/result satisfies $res = ('yes', 'no')</assert>
            <assert>every $res in /output/static-context/result-all/tokenize(., ' ') satisfies $res = ('yes', 'no')</assert>
            <assert>every $res in /output/dynamic-context/result-all/tokenize(., ' ') satisfies $res = ('yes', 'no')</assert>
         </all-of>
      </result>
   </test-case>
   
   <test-case name="system-property-103d">
      <description>
          System-property 'xsl:supports-serialization' with method set to 'evaluate', testing result = ('yes', 'no') and ns-scope: 'normal'
          See for a more detailed description of the parameters and how this test works, the file system-property-100.xsl
      </description>
      <created by="Abel Braaksma" on="2015-09-30"/>
      <dependencies>
         <spec value="XSLT30+"/>
      </dependencies>
      <test>
         <stylesheet file="system-property-100.xsl"/>
         <param static="yes" name="property" select="'xsl:supports-serialization'"/>
         <param static="yes" name="result" select="'yes', 'no'"/>
         <param static="yes" name="method" select="'evaluate'"/>
         <param static="yes" name="ns-scope" select="'normal'"/>
      </test>
      <result>
         <all-of>
            <assert>/output/@evaluation-method = 'evaluate'</assert>
            <assert>every $res in /output/global-variables/static-context/* satisfies $res = ('yes', 'no')</assert>
            <assert>every $res in /output/global-variables/dynamic-context/* satisfies $res = ('yes', 'no')</assert>
            <assert>every $eval in (for $i in 1 to 6 return /output/global-variables/static-context/*[$i] = /output/global-variables/dynamic-context/*[$i]) satisfies $eval</assert>
            <assert>every $res in /output/static-context/result satisfies $res = ('yes', 'no')</assert>
            <assert>every $res in /output/dynamic-context/result satisfies $res = ('yes', 'no')</assert>
            <assert>every $res in /output/static-context/result-all/tokenize(., ' ') satisfies $res = ('yes', 'no')</assert>
            <assert>every $res in /output/dynamic-context/result-all/tokenize(., ' ') satisfies $res = ('yes', 'no')</assert>
         </all-of>
      </result>
   </test-case>
   
   <test-case name="system-property-103e">
      <description>
          System-property 'supports-serialization' with method set to 'evaluate', testing result = ('') and ns-scope: 'other-default-namespace'
          See for a more detailed description of the parameters and how this test works, the file system-property-100.xsl
      </description>
      <created by="Abel Braaksma" on="2015-09-30"/>
      <dependencies>
         <spec value="XSLT30+"/>
      </dependencies>
      <test>
         <stylesheet file="system-property-100.xsl"/>
         <param static="yes" name="property" select="'supports-serialization'"/>
         <param static="yes" name="result" select="''"/>
         <param static="yes" name="method" select="'evaluate'"/>
         <param static="yes" name="ns-scope" select="'other-default-namespace'"/>
      </test>
      <result>
         <all-of>
            <assert>/output/@evaluation-method = 'evaluate'</assert>
            <assert>every $res in /output/global-variables/static-context/* satisfies $res = ('')</assert>
            <assert>every $res in /output/global-variables/dynamic-context/* satisfies $res = ('')</assert>
            <assert>every $eval in (for $i in 1 to 6 return /output/global-variables/static-context/*[$i] = /output/global-variables/dynamic-context/*[$i]) satisfies $eval</assert>
            <assert>every $res in /output/static-context/result satisfies $res = ('')</assert>
            <assert>every $res in /output/dynamic-context/result satisfies $res = ('')</assert>
            <assert>every $res in /output/static-context/result-all/tokenize(., ' ') satisfies $res = ('')</assert>
            <assert>every $res in /output/dynamic-context/result-all/tokenize(., ' ') satisfies $res = ('')</assert>
         </all-of>
      </result>
   </test-case>
   
   <test-case name="system-property-103f">
      <description>
          System-property 'other:supports-serialization' with method set to 'evaluate', testing result = ('yes', 'no') and ns-scope: 'switch-xsl-namespace'
          See for a more detailed description of the parameters and how this test works, the file system-property-100.xsl
      </description>
      <created by="Abel Braaksma" on="2015-09-30"/>
      <dependencies>
         <spec value="XSLT30+"/>
      </dependencies>
      <test>
         <stylesheet file="system-property-100.xsl"/>
         <param static="yes" name="property" select="'other:supports-serialization'"/>
         <param static="yes" name="result" select="'yes', 'no'"/>
         <param static="yes" name="method" select="'evaluate'"/>
         <param static="yes" name="ns-scope" select="'switch-xsl-namespace'"/>
      </test>
      <result>
         <all-of>
            <assert>/output/@evaluation-method = 'evaluate'</assert>
            <assert>every $res in /output/global-variables/static-context/* satisfies $res = ('yes', 'no')</assert>
            <assert>every $res in /output/global-variables/dynamic-context/* satisfies $res = ('yes', 'no')</assert>
            <assert>every $eval in (for $i in 1 to 6 return /output/global-variables/static-context/*[$i] = /output/global-variables/dynamic-context/*[$i]) satisfies $eval</assert>
            <assert>every $res in /output/static-context/result satisfies $res = ('yes', 'no')</assert>
            <assert>every $res in /output/dynamic-context/result satisfies $res = ('yes', 'no')</assert>
            <assert>every $res in /output/static-context/result-all/tokenize(., ' ') satisfies $res = ('yes', 'no')</assert>
            <assert>every $res in /output/dynamic-context/result-all/tokenize(., ' ') satisfies $res = ('yes', 'no')</assert>
         </all-of>
      </result>
   </test-case>
   
   <test-case name="system-property-103g">
      <description>
          System-property 'xsl:supports-serialization' with method set to 'apply-templates', testing result = ('yes', 'no') and ns-scope: 'normal'
          See for a more detailed description of the parameters and how this test works, the file system-property-100.xsl
      </description>
      <created by="Abel Braaksma" on="2015-09-30"/>
      <dependencies>
         <spec value="XSLT30+"/>
      </dependencies>
      <test>
         <stylesheet file="system-property-100.xsl"/>
         <param static="yes" name="property" select="'xsl:supports-serialization'"/>
         <param static="yes" name="result" select="'yes', 'no'"/>
         <param static="yes" name="method" select="'apply-templates'"/>
         <param static="yes" name="ns-scope" select="'normal'"/>
      </test>
      <result>
         <all-of>
            <assert>/output/@evaluation-method = 'apply-templates'</assert>
            <assert>every $res in /output/global-variables/static-context/* satisfies $res = ('yes', 'no')</assert>
            <assert>every $res in /output/global-variables/dynamic-context/* satisfies $res = ('yes', 'no')</assert>
            <assert>every $eval in (for $i in 1 to 6 return /output/global-variables/static-context/*[$i] = /output/global-variables/dynamic-context/*[$i]) satisfies $eval</assert>
            <assert>every $res in /output/static-context/result satisfies $res = ('yes', 'no')</assert>
            <assert>every $res in /output/dynamic-context/result satisfies $res = ('yes', 'no')</assert>
            <assert>every $res in /output/static-context/result-all/tokenize(., ' ') satisfies $res = ('yes', 'no')</assert>
            <assert>every $res in /output/dynamic-context/result-all/tokenize(., ' ') satisfies $res = ('yes', 'no')</assert>
         </all-of>
      </result>
   </test-case>
   
   <test-case name="system-property-103h">
      <description>
          System-property 'supports-serialization' with method set to 'apply-templates', testing result = ('') and ns-scope: 'other-default-namespace'
          See for a more detailed description of the parameters and how this test works, the file system-property-100.xsl
      </description>
      <created by="Abel Braaksma" on="2015-09-30"/>
      <dependencies>
         <spec value="XSLT30+"/>
      </dependencies>
      <test>
         <stylesheet file="system-property-100.xsl"/>
         <param static="yes" name="property" select="'supports-serialization'"/>
         <param static="yes" name="result" select="''"/>
         <param static="yes" name="method" select="'apply-templates'"/>
         <param static="yes" name="ns-scope" select="'other-default-namespace'"/>
      </test>
      <result>
         <all-of>
            <assert>/output/@evaluation-method = 'apply-templates'</assert>
            <assert>every $res in /output/global-variables/static-context/* satisfies $res = ('')</assert>
            <assert>every $res in /output/global-variables/dynamic-context/* satisfies $res = ('')</assert>
            <assert>every $eval in (for $i in 1 to 6 return /output/global-variables/static-context/*[$i] = /output/global-variables/dynamic-context/*[$i]) satisfies $eval</assert>
            <assert>every $res in /output/static-context/result satisfies $res = ('')</assert>
            <assert>every $res in /output/dynamic-context/result satisfies $res = ('')</assert>
            <assert>every $res in /output/static-context/result-all/tokenize(., ' ') satisfies $res = ('')</assert>
            <assert>every $res in /output/dynamic-context/result-all/tokenize(., ' ') satisfies $res = ('')</assert>
         </all-of>
      </result>
   </test-case>
   
   <test-case name="system-property-103i">
      <description>
          System-property 'other:supports-serialization' with method set to 'apply-templates', testing result = ('yes', 'no') and ns-scope: 'switch-xsl-namespace'
          See for a more detailed description of the parameters and how this test works, the file system-property-100.xsl
      </description>
      <created by="Abel Braaksma" on="2015-09-30"/>
      <dependencies>
         <spec value="XSLT30+"/>
      </dependencies>
      <test>
         <stylesheet file="system-property-100.xsl"/>
         <param static="yes" name="property" select="'other:supports-serialization'"/>
         <param static="yes" name="result" select="'yes', 'no'"/>
         <param static="yes" name="method" select="'apply-templates'"/>
         <param static="yes" name="ns-scope" select="'switch-xsl-namespace'"/>
      </test>
      <result>
         <all-of>
            <assert>/output/@evaluation-method = 'apply-templates'</assert>
            <assert>every $res in /output/global-variables/static-context/* satisfies $res = ('yes', 'no')</assert>
            <assert>every $res in /output/global-variables/dynamic-context/* satisfies $res = ('yes', 'no')</assert>
            <assert>every $eval in (for $i in 1 to 6 return /output/global-variables/static-context/*[$i] = /output/global-variables/dynamic-context/*[$i]) satisfies $eval</assert>
            <assert>every $res in /output/static-context/result satisfies $res = ('yes', 'no')</assert>
            <assert>every $res in /output/dynamic-context/result satisfies $res = ('yes', 'no')</assert>
            <assert>every $res in /output/static-context/result-all/tokenize(., ' ') satisfies $res = ('yes', 'no')</assert>
            <assert>every $res in /output/dynamic-context/result-all/tokenize(., ' ') satisfies $res = ('yes', 'no')</assert>
         </all-of>
      </result>
   </test-case>
   
   <test-case name="system-property-103j">
      <description>
          System-property 'xsl:supports-serialization' with method set to 'stylesheet-function', testing result = ('yes', 'no') and ns-scope: 'normal'
          See for a more detailed description of the parameters and how this test works, the file system-property-100.xsl
      </description>
      <created by="Abel Braaksma" on="2015-09-30"/>
      <dependencies>
         <spec value="XSLT30+"/>
      </dependencies>
      <test>
         <stylesheet file="system-property-100.xsl"/>
         <param static="yes" name="property" select="'xsl:supports-serialization'"/>
         <param static="yes" name="result" select="'yes', 'no'"/>
         <param static="yes" name="method" select="'stylesheet-function'"/>
         <param static="yes" name="ns-scope" select="'normal'"/>
      </test>
      <result>
         <all-of>
            <assert>/output/@evaluation-method = 'stylesheet-function'</assert>
            <assert>every $res in /output/global-variables/static-context/* satisfies $res = ('yes', 'no')</assert>
            <assert>every $res in /output/global-variables/dynamic-context/* satisfies $res = ('yes', 'no')</assert>
            <assert>every $eval in (for $i in 1 to 6 return /output/global-variables/static-context/*[$i] = /output/global-variables/dynamic-context/*[$i]) satisfies $eval</assert>
            <assert>every $res in /output/static-context/result satisfies $res = ('yes', 'no')</assert>
            <assert>every $res in /output/dynamic-context/result satisfies $res = ('yes', 'no')</assert>
            <assert>every $res in /output/static-context/result-all/tokenize(., ' ') satisfies $res = ('yes', 'no')</assert>
            <assert>every $res in /output/dynamic-context/result-all/tokenize(., ' ') satisfies $res = ('yes', 'no')</assert>
         </all-of>
      </result>
   </test-case>
   
   <test-case name="system-property-103k">
      <description>
          System-property 'supports-serialization' with method set to 'stylesheet-function', testing result = ('') and ns-scope: 'other-default-namespace'
          See for a more detailed description of the parameters and how this test works, the file system-property-100.xsl
      </description>
      <created by="Abel Braaksma" on="2015-09-30"/>
      <dependencies>
         <spec value="XSLT30+"/>
      </dependencies>
      <test>
         <stylesheet file="system-property-100.xsl"/>
         <param static="yes" name="property" select="'supports-serialization'"/>
         <param static="yes" name="result" select="''"/>
         <param static="yes" name="method" select="'stylesheet-function'"/>
         <param static="yes" name="ns-scope" select="'other-default-namespace'"/>
      </test>
      <result>
         <all-of>
            <assert>/output/@evaluation-method = 'stylesheet-function'</assert>
            <assert>every $res in /output/global-variables/static-context/* satisfies $res = ('')</assert>
            <assert>every $res in /output/global-variables/dynamic-context/* satisfies $res = ('')</assert>
            <assert>every $eval in (for $i in 1 to 6 return /output/global-variables/static-context/*[$i] = /output/global-variables/dynamic-context/*[$i]) satisfies $eval</assert>
            <assert>every $res in /output/static-context/result satisfies $res = ('')</assert>
            <assert>every $res in /output/dynamic-context/result satisfies $res = ('')</assert>
            <assert>every $res in /output/static-context/result-all/tokenize(., ' ') satisfies $res = ('')</assert>
            <assert>every $res in /output/dynamic-context/result-all/tokenize(., ' ') satisfies $res = ('')</assert>
         </all-of>
      </result>
   </test-case>
   
   <test-case name="system-property-103l">
      <description>
          System-property 'other:supports-serialization' with method set to 'stylesheet-function', testing result = ('yes', 'no') and ns-scope: 'switch-xsl-namespace'
          See for a more detailed description of the parameters and how this test works, the file system-property-100.xsl
      </description>
      <created by="Abel Braaksma" on="2015-09-30"/>
      <dependencies>
         <spec value="XSLT30+"/>
      </dependencies>
      <test>
         <stylesheet file="system-property-100.xsl"/>
         <param static="yes" name="property" select="'other:supports-serialization'"/>
         <param static="yes" name="result" select="'yes', 'no'"/>
         <param static="yes" name="method" select="'stylesheet-function'"/>
         <param static="yes" name="ns-scope" select="'switch-xsl-namespace'"/>
      </test>
      <result>
         <all-of>
            <assert>/output/@evaluation-method = 'stylesheet-function'</assert>
            <assert>every $res in /output/global-variables/static-context/* satisfies $res = ('yes', 'no')</assert>
            <assert>every $res in /output/global-variables/dynamic-context/* satisfies $res = ('yes', 'no')</assert>
            <assert>every $eval in (for $i in 1 to 6 return /output/global-variables/static-context/*[$i] = /output/global-variables/dynamic-context/*[$i]) satisfies $eval</assert>
            <assert>every $res in /output/static-context/result satisfies $res = ('yes', 'no')</assert>
            <assert>every $res in /output/dynamic-context/result satisfies $res = ('yes', 'no')</assert>
            <assert>every $res in /output/static-context/result-all/tokenize(., ' ') satisfies $res = ('yes', 'no')</assert>
            <assert>every $res in /output/dynamic-context/result-all/tokenize(., ' ') satisfies $res = ('yes', 'no')</assert>
         </all-of>
      </result>
   </test-case>
   
   <test-case name="system-property-103m">
      <description>
          System-property 'xsl:supports-serialization' with method set to 'tunneled', testing result = ('yes', 'no') and ns-scope: 'normal'
          See for a more detailed description of the parameters and how this test works, the file system-property-100.xsl
      </description>
      <created by="Abel Braaksma" on="2015-09-30"/>
      <dependencies>
         <spec value="XSLT30+"/>
      </dependencies>
      <test>
         <stylesheet file="system-property-100.xsl"/>
         <param static="yes" name="property" select="'xsl:supports-serialization'"/>
         <param static="yes" name="result" select="'yes', 'no'"/>
         <param static="yes" name="method" select="'tunneled'"/>
         <param static="yes" name="ns-scope" select="'normal'"/>
      </test>
      <result>
         <all-of>
            <assert>/output/@evaluation-method = 'tunneled'</assert>
            <assert>every $res in /output/global-variables/static-context/* satisfies $res = ('yes', 'no')</assert>
            <assert>every $res in /output/global-variables/dynamic-context/* satisfies $res = ('yes', 'no')</assert>
            <assert>every $eval in (for $i in 1 to 6 return /output/global-variables/static-context/*[$i] = /output/global-variables/dynamic-context/*[$i]) satisfies $eval</assert>
            <assert>every $res in /output/static-context/result satisfies $res = ('yes', 'no')</assert>
            <assert>every $res in /output/dynamic-context/result satisfies $res = ('yes', 'no')</assert>
            <assert>every $res in /output/static-context/result-all/tokenize(., ' ') satisfies $res = ('yes', 'no')</assert>
            <assert>every $res in /output/dynamic-context/result-all/tokenize(., ' ') satisfies $res = ('yes', 'no')</assert>
         </all-of>
      </result>
   </test-case>
   
   <test-case name="system-property-103n">
      <description>
          System-property 'supports-serialization' with method set to 'tunneled', testing result = ('') and ns-scope: 'other-default-namespace'
          See for a more detailed description of the parameters and how this test works, the file system-property-100.xsl
      </description>
      <created by="Abel Braaksma" on="2015-09-30"/>
      <dependencies>
         <spec value="XSLT30+"/>
      </dependencies>
      <test>
         <stylesheet file="system-property-100.xsl"/>
         <param static="yes" name="property" select="'supports-serialization'"/>
         <param static="yes" name="result" select="''"/>
         <param static="yes" name="method" select="'tunneled'"/>
         <param static="yes" name="ns-scope" select="'other-default-namespace'"/>
      </test>
      <result>
         <all-of>
            <assert>/output/@evaluation-method = 'tunneled'</assert>
            <assert>every $res in /output/global-variables/static-context/* satisfies $res = ('')</assert>
            <assert>every $res in /output/global-variables/dynamic-context/* satisfies $res = ('')</assert>
            <assert>every $eval in (for $i in 1 to 6 return /output/global-variables/static-context/*[$i] = /output/global-variables/dynamic-context/*[$i]) satisfies $eval</assert>
            <assert>every $res in /output/static-context/result satisfies $res = ('')</assert>
            <assert>every $res in /output/dynamic-context/result satisfies $res = ('')</assert>
            <assert>every $res in /output/static-context/result-all/tokenize(., ' ') satisfies $res = ('')</assert>
            <assert>every $res in /output/dynamic-context/result-all/tokenize(., ' ') satisfies $res = ('')</assert>
         </all-of>
      </result>
   </test-case>
   
   <test-case name="system-property-103o">
      <description>
          System-property 'other:supports-serialization' with method set to 'tunneled', testing result = ('yes', 'no') and ns-scope: 'switch-xsl-namespace'
          See for a more detailed description of the parameters and how this test works, the file system-property-100.xsl
      </description>
      <created by="Abel Braaksma" on="2015-09-30"/>
      <dependencies>
         <spec value="XSLT30+"/>
      </dependencies>
      <test>
         <stylesheet file="system-property-100.xsl"/>
         <param static="yes" name="property" select="'other:supports-serialization'"/>
         <param static="yes" name="result" select="'yes', 'no'"/>
         <param static="yes" name="method" select="'tunneled'"/>
         <param static="yes" name="ns-scope" select="'switch-xsl-namespace'"/>
      </test>
      <result>
         <all-of>
            <assert>/output/@evaluation-method = 'tunneled'</assert>
            <assert>every $res in /output/global-variables/static-context/* satisfies $res = ('yes', 'no')</assert>
            <assert>every $res in /output/global-variables/dynamic-context/* satisfies $res = ('yes', 'no')</assert>
            <assert>every $eval in (for $i in 1 to 6 return /output/global-variables/static-context/*[$i] = /output/global-variables/dynamic-context/*[$i]) satisfies $eval</assert>
            <assert>every $res in /output/static-context/result satisfies $res = ('yes', 'no')</assert>
            <assert>every $res in /output/dynamic-context/result satisfies $res = ('yes', 'no')</assert>
            <assert>every $res in /output/static-context/result-all/tokenize(., ' ') satisfies $res = ('yes', 'no')</assert>
            <assert>every $res in /output/dynamic-context/result-all/tokenize(., ' ') satisfies $res = ('yes', 'no')</assert>
         </all-of>
      </result>
   </test-case>
   
   <test-case name="system-property-104a">
      <description>
          System-property 'xsl:supports-backwards-compatibility' with method set to 'static', testing result = ('yes', 'no') and ns-scope: 'normal'
          See for a more detailed description of the parameters and how this test works, the file system-property-100.xsl
      </description>
      <created by="Abel Braaksma" on="2015-09-30"/>
      <dependencies>
         <spec value="XSLT30+"/>
      </dependencies>
      <test>
         <stylesheet file="system-property-100.xsl"/>
         <param static="yes" name="property" select="'xsl:supports-backwards-compatibility'"/>
         <param static="yes" name="result" select="'yes', 'no'"/>
         <param static="yes" name="method" select="'static'"/>
         <param static="yes" name="ns-scope" select="'normal'"/>
      </test>
      <result>
         <all-of>
            <assert>/output/@evaluation-method = 'static'</assert>
            <assert>every $res in /output/global-variables/static-context/* satisfies $res = ('yes', 'no')</assert>
            <assert>every $res in /output/global-variables/dynamic-context/* satisfies $res = ('yes', 'no')</assert>
            <assert>every $eval in (for $i in 1 to 6 return /output/global-variables/static-context/*[$i] = /output/global-variables/dynamic-context/*[$i]) satisfies $eval</assert>
            <assert>every $res in /output/static-context/result satisfies $res = ('yes', 'no')</assert>
            <assert>every $res in /output/dynamic-context/result satisfies $res = ('yes', 'no')</assert>
            <assert>every $res in /output/static-context/result-all/tokenize(., ' ') satisfies $res = ('yes', 'no')</assert>
            <assert>every $res in /output/dynamic-context/result-all/tokenize(., ' ') satisfies $res = ('yes', 'no')</assert>
         </all-of>
      </result>
   </test-case>
   
   <test-case name="system-property-104b">
      <description>
          System-property 'supports-backwards-compatibility' with method set to 'static', testing result = ('') and ns-scope: 'other-default-namespace'
          See for a more detailed description of the parameters and how this test works, the file system-property-100.xsl
      </description>
      <created by="Abel Braaksma" on="2015-09-30"/>
      <dependencies>
         <spec value="XSLT30+"/>
      </dependencies>
      <test>
         <stylesheet file="system-property-100.xsl"/>
         <param static="yes" name="property" select="'supports-backwards-compatibility'"/>
         <param static="yes" name="result" select="''"/>
         <param static="yes" name="method" select="'static'"/>
         <param static="yes" name="ns-scope" select="'other-default-namespace'"/>
      </test>
      <result>
         <all-of>
            <assert>/output/@evaluation-method = 'static'</assert>
            <assert>every $res in /output/global-variables/static-context/* satisfies $res = ('')</assert>
            <assert>every $res in /output/global-variables/dynamic-context/* satisfies $res = ('')</assert>
            <assert>every $eval in (for $i in 1 to 6 return /output/global-variables/static-context/*[$i] = /output/global-variables/dynamic-context/*[$i]) satisfies $eval</assert>
            <assert>every $res in /output/static-context/result satisfies $res = ('')</assert>
            <assert>every $res in /output/dynamic-context/result satisfies $res = ('')</assert>
            <assert>every $res in /output/static-context/result-all/tokenize(., ' ') satisfies $res = ('')</assert>
            <assert>every $res in /output/dynamic-context/result-all/tokenize(., ' ') satisfies $res = ('')</assert>
         </all-of>
      </result>
   </test-case>
   
   <test-case name="system-property-104c">
      <description>
          System-property 'other:supports-backwards-compatibility' with method set to 'static', testing result = ('yes', 'no') and ns-scope: 'switch-xsl-namespace'
          See for a more detailed description of the parameters and how this test works, the file system-property-100.xsl
      </description>
      <created by="Abel Braaksma" on="2015-09-30"/>
      <dependencies>
         <spec value="XSLT30+"/>
      </dependencies>
      <test>
         <stylesheet file="system-property-100.xsl"/>
         <param static="yes" name="property" select="'other:supports-backwards-compatibility'"/>
         <param static="yes" name="result" select="'yes', 'no'"/>
         <param static="yes" name="method" select="'static'"/>
         <param static="yes" name="ns-scope" select="'switch-xsl-namespace'"/>
      </test>
      <result>
         <all-of>
            <assert>/output/@evaluation-method = 'static'</assert>
            <assert>every $res in /output/global-variables/static-context/* satisfies $res = ('yes', 'no')</assert>
            <assert>every $res in /output/global-variables/dynamic-context/* satisfies $res = ('yes', 'no')</assert>
            <assert>every $eval in (for $i in 1 to 6 return /output/global-variables/static-context/*[$i] = /output/global-variables/dynamic-context/*[$i]) satisfies $eval</assert>
            <assert>every $res in /output/static-context/result satisfies $res = ('yes', 'no')</assert>
            <assert>every $res in /output/dynamic-context/result satisfies $res = ('yes', 'no')</assert>
            <assert>every $res in /output/static-context/result-all/tokenize(., ' ') satisfies $res = ('yes', 'no')</assert>
            <assert>every $res in /output/dynamic-context/result-all/tokenize(., ' ') satisfies $res = ('yes', 'no')</assert>
         </all-of>
      </result>
   </test-case>
   
   <test-case name="system-property-104d">
      <description>
          System-property 'xsl:supports-backwards-compatibility' with method set to 'evaluate', testing result = ('yes', 'no') and ns-scope: 'normal'
          See for a more detailed description of the parameters and how this test works, the file system-property-100.xsl
      </description>
      <created by="Abel Braaksma" on="2015-09-30"/>
      <dependencies>
         <spec value="XSLT30+"/>
      </dependencies>
      <test>
         <stylesheet file="system-property-100.xsl"/>
         <param static="yes" name="property" select="'xsl:supports-backwards-compatibility'"/>
         <param static="yes" name="result" select="'yes', 'no'"/>
         <param static="yes" name="method" select="'evaluate'"/>
         <param static="yes" name="ns-scope" select="'normal'"/>
      </test>
      <result>
         <all-of>
            <assert>/output/@evaluation-method = 'evaluate'</assert>
            <assert>every $res in /output/global-variables/static-context/* satisfies $res = ('yes', 'no')</assert>
            <assert>every $res in /output/global-variables/dynamic-context/* satisfies $res = ('yes', 'no')</assert>
            <assert>every $eval in (for $i in 1 to 6 return /output/global-variables/static-context/*[$i] = /output/global-variables/dynamic-context/*[$i]) satisfies $eval</assert>
            <assert>every $res in /output/static-context/result satisfies $res = ('yes', 'no')</assert>
            <assert>every $res in /output/dynamic-context/result satisfies $res = ('yes', 'no')</assert>
            <assert>every $res in /output/static-context/result-all/tokenize(., ' ') satisfies $res = ('yes', 'no')</assert>
            <assert>every $res in /output/dynamic-context/result-all/tokenize(., ' ') satisfies $res = ('yes', 'no')</assert>
         </all-of>
      </result>
   </test-case>
   
   <test-case name="system-property-104e">
      <description>
          System-property 'supports-backwards-compatibility' with method set to 'evaluate', testing result = ('') and ns-scope: 'other-default-namespace'
          See for a more detailed description of the parameters and how this test works, the file system-property-100.xsl
      </description>
      <created by="Abel Braaksma" on="2015-09-30"/>
      <dependencies>
         <spec value="XSLT30+"/>
      </dependencies>
      <test>
         <stylesheet file="system-property-100.xsl"/>
         <param static="yes" name="property" select="'supports-backwards-compatibility'"/>
         <param static="yes" name="result" select="''"/>
         <param static="yes" name="method" select="'evaluate'"/>
         <param static="yes" name="ns-scope" select="'other-default-namespace'"/>
      </test>
      <result>
         <all-of>
            <assert>/output/@evaluation-method = 'evaluate'</assert>
            <assert>every $res in /output/global-variables/static-context/* satisfies $res = ('')</assert>
            <assert>every $res in /output/global-variables/dynamic-context/* satisfies $res = ('')</assert>
            <assert>every $eval in (for $i in 1 to 6 return /output/global-variables/static-context/*[$i] = /output/global-variables/dynamic-context/*[$i]) satisfies $eval</assert>
            <assert>every $res in /output/static-context/result satisfies $res = ('')</assert>
            <assert>every $res in /output/dynamic-context/result satisfies $res = ('')</assert>
            <assert>every $res in /output/static-context/result-all/tokenize(., ' ') satisfies $res = ('')</assert>
            <assert>every $res in /output/dynamic-context/result-all/tokenize(., ' ') satisfies $res = ('')</assert>
         </all-of>
      </result>
   </test-case>
   
   <test-case name="system-property-104f">
      <description>
          System-property 'other:supports-backwards-compatibility' with method set to 'evaluate', testing result = ('yes', 'no') and ns-scope: 'switch-xsl-namespace'
          See for a more detailed description of the parameters and how this test works, the file system-property-100.xsl
      </description>
      <created by="Abel Braaksma" on="2015-09-30"/>
      <dependencies>
         <spec value="XSLT30+"/>
      </dependencies>
      <test>
         <stylesheet file="system-property-100.xsl"/>
         <param static="yes" name="property" select="'other:supports-backwards-compatibility'"/>
         <param static="yes" name="result" select="'yes', 'no'"/>
         <param static="yes" name="method" select="'evaluate'"/>
         <param static="yes" name="ns-scope" select="'switch-xsl-namespace'"/>
      </test>
      <result>
         <all-of>
            <assert>/output/@evaluation-method = 'evaluate'</assert>
            <assert>every $res in /output/global-variables/static-context/* satisfies $res = ('yes', 'no')</assert>
            <assert>every $res in /output/global-variables/dynamic-context/* satisfies $res = ('yes', 'no')</assert>
            <assert>every $eval in (for $i in 1 to 6 return /output/global-variables/static-context/*[$i] = /output/global-variables/dynamic-context/*[$i]) satisfies $eval</assert>
            <assert>every $res in /output/static-context/result satisfies $res = ('yes', 'no')</assert>
            <assert>every $res in /output/dynamic-context/result satisfies $res = ('yes', 'no')</assert>
            <assert>every $res in /output/static-context/result-all/tokenize(., ' ') satisfies $res = ('yes', 'no')</assert>
            <assert>every $res in /output/dynamic-context/result-all/tokenize(., ' ') satisfies $res = ('yes', 'no')</assert>
         </all-of>
      </result>
   </test-case>
   
   <test-case name="system-property-104g">
      <description>
          System-property 'xsl:supports-backwards-compatibility' with method set to 'apply-templates', testing result = ('yes', 'no') and ns-scope: 'normal'
          See for a more detailed description of the parameters and how this test works, the file system-property-100.xsl
      </description>
      <created by="Abel Braaksma" on="2015-09-30"/>
      <dependencies>
         <spec value="XSLT30+"/>
      </dependencies>
      <test>
         <stylesheet file="system-property-100.xsl"/>
         <param static="yes" name="property" select="'xsl:supports-backwards-compatibility'"/>
         <param static="yes" name="result" select="'yes', 'no'"/>
         <param static="yes" name="method" select="'apply-templates'"/>
         <param static="yes" name="ns-scope" select="'normal'"/>
      </test>
      <result>
         <all-of>
            <assert>/output/@evaluation-method = 'apply-templates'</assert>
            <assert>every $res in /output/global-variables/static-context/* satisfies $res = ('yes', 'no')</assert>
            <assert>every $res in /output/global-variables/dynamic-context/* satisfies $res = ('yes', 'no')</assert>
            <assert>every $eval in (for $i in 1 to 6 return /output/global-variables/static-context/*[$i] = /output/global-variables/dynamic-context/*[$i]) satisfies $eval</assert>
            <assert>every $res in /output/static-context/result satisfies $res = ('yes', 'no')</assert>
            <assert>every $res in /output/dynamic-context/result satisfies $res = ('yes', 'no')</assert>
            <assert>every $res in /output/static-context/result-all/tokenize(., ' ') satisfies $res = ('yes', 'no')</assert>
            <assert>every $res in /output/dynamic-context/result-all/tokenize(., ' ') satisfies $res = ('yes', 'no')</assert>
         </all-of>
      </result>
   </test-case>
   
   <test-case name="system-property-104h">
      <description>
          System-property 'supports-backwards-compatibility' with method set to 'apply-templates', testing result = ('') and ns-scope: 'other-default-namespace'
          See for a more detailed description of the parameters and how this test works, the file system-property-100.xsl
      </description>
      <created by="Abel Braaksma" on="2015-09-30"/>
      <dependencies>
         <spec value="XSLT30+"/>
      </dependencies>
      <test>
         <stylesheet file="system-property-100.xsl"/>
         <param static="yes" name="property" select="'supports-backwards-compatibility'"/>
         <param static="yes" name="result" select="''"/>
         <param static="yes" name="method" select="'apply-templates'"/>
         <param static="yes" name="ns-scope" select="'other-default-namespace'"/>
      </test>
      <result>
         <all-of>
            <assert>/output/@evaluation-method = 'apply-templates'</assert>
            <assert>every $res in /output/global-variables/static-context/* satisfies $res = ('')</assert>
            <assert>every $res in /output/global-variables/dynamic-context/* satisfies $res = ('')</assert>
            <assert>every $eval in (for $i in 1 to 6 return /output/global-variables/static-context/*[$i] = /output/global-variables/dynamic-context/*[$i]) satisfies $eval</assert>
            <assert>every $res in /output/static-context/result satisfies $res = ('')</assert>
            <assert>every $res in /output/dynamic-context/result satisfies $res = ('')</assert>
            <assert>every $res in /output/static-context/result-all/tokenize(., ' ') satisfies $res = ('')</assert>
            <assert>every $res in /output/dynamic-context/result-all/tokenize(., ' ') satisfies $res = ('')</assert>
         </all-of>
      </result>
   </test-case>
   
   <test-case name="system-property-104i">
      <description>
          System-property 'other:supports-backwards-compatibility' with method set to 'apply-templates', testing result = ('yes', 'no') and ns-scope: 'switch-xsl-namespace'
          See for a more detailed description of the parameters and how this test works, the file system-property-100.xsl
      </description>
      <created by="Abel Braaksma" on="2015-09-30"/>
      <dependencies>
         <spec value="XSLT30+"/>
      </dependencies>
      <test>
         <stylesheet file="system-property-100.xsl"/>
         <param static="yes" name="property" select="'other:supports-backwards-compatibility'"/>
         <param static="yes" name="result" select="'yes', 'no'"/>
         <param static="yes" name="method" select="'apply-templates'"/>
         <param static="yes" name="ns-scope" select="'switch-xsl-namespace'"/>
      </test>
      <result>
         <all-of>
            <assert>/output/@evaluation-method = 'apply-templates'</assert>
            <assert>every $res in /output/global-variables/static-context/* satisfies $res = ('yes', 'no')</assert>
            <assert>every $res in /output/global-variables/dynamic-context/* satisfies $res = ('yes', 'no')</assert>
            <assert>every $eval in (for $i in 1 to 6 return /output/global-variables/static-context/*[$i] = /output/global-variables/dynamic-context/*[$i]) satisfies $eval</assert>
            <assert>every $res in /output/static-context/result satisfies $res = ('yes', 'no')</assert>
            <assert>every $res in /output/dynamic-context/result satisfies $res = ('yes', 'no')</assert>
            <assert>every $res in /output/static-context/result-all/tokenize(., ' ') satisfies $res = ('yes', 'no')</assert>
            <assert>every $res in /output/dynamic-context/result-all/tokenize(., ' ') satisfies $res = ('yes', 'no')</assert>
         </all-of>
      </result>
   </test-case>
   
   <test-case name="system-property-104j">
      <description>
          System-property 'xsl:supports-backwards-compatibility' with method set to 'stylesheet-function', testing result = ('yes', 'no') and ns-scope: 'normal'
          See for a more detailed description of the parameters and how this test works, the file system-property-100.xsl
      </description>
      <created by="Abel Braaksma" on="2015-09-30"/>
      <dependencies>
         <spec value="XSLT30+"/>
      </dependencies>
      <test>
         <stylesheet file="system-property-100.xsl"/>
         <param static="yes" name="property" select="'xsl:supports-backwards-compatibility'"/>
         <param static="yes" name="result" select="'yes', 'no'"/>
         <param static="yes" name="method" select="'stylesheet-function'"/>
         <param static="yes" name="ns-scope" select="'normal'"/>
      </test>
      <result>
         <all-of>
            <assert>/output/@evaluation-method = 'stylesheet-function'</assert>
            <assert>every $res in /output/global-variables/static-context/* satisfies $res = ('yes', 'no')</assert>
            <assert>every $res in /output/global-variables/dynamic-context/* satisfies $res = ('yes', 'no')</assert>
            <assert>every $eval in (for $i in 1 to 6 return /output/global-variables/static-context/*[$i] = /output/global-variables/dynamic-context/*[$i]) satisfies $eval</assert>
            <assert>every $res in /output/static-context/result satisfies $res = ('yes', 'no')</assert>
            <assert>every $res in /output/dynamic-context/result satisfies $res = ('yes', 'no')</assert>
            <assert>every $res in /output/static-context/result-all/tokenize(., ' ') satisfies $res = ('yes', 'no')</assert>
            <assert>every $res in /output/dynamic-context/result-all/tokenize(., ' ') satisfies $res = ('yes', 'no')</assert>
         </all-of>
      </result>
   </test-case>
   
   <test-case name="system-property-104k">
      <description>
          System-property 'supports-backwards-compatibility' with method set to 'stylesheet-function', testing result = ('') and ns-scope: 'other-default-namespace'
          See for a more detailed description of the parameters and how this test works, the file system-property-100.xsl
      </description>
      <created by="Abel Braaksma" on="2015-09-30"/>
      <dependencies>
         <spec value="XSLT30+"/>
      </dependencies>
      <test>
         <stylesheet file="system-property-100.xsl"/>
         <param static="yes" name="property" select="'supports-backwards-compatibility'"/>
         <param static="yes" name="result" select="''"/>
         <param static="yes" name="method" select="'stylesheet-function'"/>
         <param static="yes" name="ns-scope" select="'other-default-namespace'"/>
      </test>
      <result>
         <all-of>
            <assert>/output/@evaluation-method = 'stylesheet-function'</assert>
            <assert>every $res in /output/global-variables/static-context/* satisfies $res = ('')</assert>
            <assert>every $res in /output/global-variables/dynamic-context/* satisfies $res = ('')</assert>
            <assert>every $eval in (for $i in 1 to 6 return /output/global-variables/static-context/*[$i] = /output/global-variables/dynamic-context/*[$i]) satisfies $eval</assert>
            <assert>every $res in /output/static-context/result satisfies $res = ('')</assert>
            <assert>every $res in /output/dynamic-context/result satisfies $res = ('')</assert>
            <assert>every $res in /output/static-context/result-all/tokenize(., ' ') satisfies $res = ('')</assert>
            <assert>every $res in /output/dynamic-context/result-all/tokenize(., ' ') satisfies $res = ('')</assert>
         </all-of>
      </result>
   </test-case>
   
   <test-case name="system-property-104l">
      <description>
          System-property 'other:supports-backwards-compatibility' with method set to 'stylesheet-function', testing result = ('yes', 'no') and ns-scope: 'switch-xsl-namespace'
          See for a more detailed description of the parameters and how this test works, the file system-property-100.xsl
      </description>
      <created by="Abel Braaksma" on="2015-09-30"/>
      <dependencies>
         <spec value="XSLT30+"/>
      </dependencies>
      <test>
         <stylesheet file="system-property-100.xsl"/>
         <param static="yes" name="property" select="'other:supports-backwards-compatibility'"/>
         <param static="yes" name="result" select="'yes', 'no'"/>
         <param static="yes" name="method" select="'stylesheet-function'"/>
         <param static="yes" name="ns-scope" select="'switch-xsl-namespace'"/>
      </test>
      <result>
         <all-of>
            <assert>/output/@evaluation-method = 'stylesheet-function'</assert>
            <assert>every $res in /output/global-variables/static-context/* satisfies $res = ('yes', 'no')</assert>
            <assert>every $res in /output/global-variables/dynamic-context/* satisfies $res = ('yes', 'no')</assert>
            <assert>every $eval in (for $i in 1 to 6 return /output/global-variables/static-context/*[$i] = /output/global-variables/dynamic-context/*[$i]) satisfies $eval</assert>
            <assert>every $res in /output/static-context/result satisfies $res = ('yes', 'no')</assert>
            <assert>every $res in /output/dynamic-context/result satisfies $res = ('yes', 'no')</assert>
            <assert>every $res in /output/static-context/result-all/tokenize(., ' ') satisfies $res = ('yes', 'no')</assert>
            <assert>every $res in /output/dynamic-context/result-all/tokenize(., ' ') satisfies $res = ('yes', 'no')</assert>
         </all-of>
      </result>
   </test-case>
   
   <test-case name="system-property-104m">
      <description>
          System-property 'xsl:supports-backwards-compatibility' with method set to 'tunneled', testing result = ('yes', 'no') and ns-scope: 'normal'
          See for a more detailed description of the parameters and how this test works, the file system-property-100.xsl
      </description>
      <created by="Abel Braaksma" on="2015-09-30"/>
      <dependencies>
         <spec value="XSLT30+"/>
      </dependencies>
      <test>
         <stylesheet file="system-property-100.xsl"/>
         <param static="yes" name="property" select="'xsl:supports-backwards-compatibility'"/>
         <param static="yes" name="result" select="'yes', 'no'"/>
         <param static="yes" name="method" select="'tunneled'"/>
         <param static="yes" name="ns-scope" select="'normal'"/>
      </test>
      <result>
         <all-of>
            <assert>/output/@evaluation-method = 'tunneled'</assert>
            <assert>every $res in /output/global-variables/static-context/* satisfies $res = ('yes', 'no')</assert>
            <assert>every $res in /output/global-variables/dynamic-context/* satisfies $res = ('yes', 'no')</assert>
            <assert>every $eval in (for $i in 1 to 6 return /output/global-variables/static-context/*[$i] = /output/global-variables/dynamic-context/*[$i]) satisfies $eval</assert>
            <assert>every $res in /output/static-context/result satisfies $res = ('yes', 'no')</assert>
            <assert>every $res in /output/dynamic-context/result satisfies $res = ('yes', 'no')</assert>
            <assert>every $res in /output/static-context/result-all/tokenize(., ' ') satisfies $res = ('yes', 'no')</assert>
            <assert>every $res in /output/dynamic-context/result-all/tokenize(., ' ') satisfies $res = ('yes', 'no')</assert>
         </all-of>
      </result>
   </test-case>
   
   <test-case name="system-property-104n">
      <description>
          System-property 'supports-backwards-compatibility' with method set to 'tunneled', testing result = ('') and ns-scope: 'other-default-namespace'
          See for a more detailed description of the parameters and how this test works, the file system-property-100.xsl
      </description>
      <created by="Abel Braaksma" on="2015-09-30"/>
      <dependencies>
         <spec value="XSLT30+"/>
      </dependencies>
      <test>
         <stylesheet file="system-property-100.xsl"/>
         <param static="yes" name="property" select="'supports-backwards-compatibility'"/>
         <param static="yes" name="result" select="''"/>
         <param static="yes" name="method" select="'tunneled'"/>
         <param static="yes" name="ns-scope" select="'other-default-namespace'"/>
      </test>
      <result>
         <all-of>
            <assert>/output/@evaluation-method = 'tunneled'</assert>
            <assert>every $res in /output/global-variables/static-context/* satisfies $res = ('')</assert>
            <assert>every $res in /output/global-variables/dynamic-context/* satisfies $res = ('')</assert>
            <assert>every $eval in (for $i in 1 to 6 return /output/global-variables/static-context/*[$i] = /output/global-variables/dynamic-context/*[$i]) satisfies $eval</assert>
            <assert>every $res in /output/static-context/result satisfies $res = ('')</assert>
            <assert>every $res in /output/dynamic-context/result satisfies $res = ('')</assert>
            <assert>every $res in /output/static-context/result-all/tokenize(., ' ') satisfies $res = ('')</assert>
            <assert>every $res in /output/dynamic-context/result-all/tokenize(., ' ') satisfies $res = ('')</assert>
         </all-of>
      </result>
   </test-case>
   
   <test-case name="system-property-104o">
      <description>
          System-property 'other:supports-backwards-compatibility' with method set to 'tunneled', testing result = ('yes', 'no') and ns-scope: 'switch-xsl-namespace'
          See for a more detailed description of the parameters and how this test works, the file system-property-100.xsl
      </description>
      <created by="Abel Braaksma" on="2015-09-30"/>
      <dependencies>
         <spec value="XSLT30+"/>
      </dependencies>
      <test>
         <stylesheet file="system-property-100.xsl"/>
         <param static="yes" name="property" select="'other:supports-backwards-compatibility'"/>
         <param static="yes" name="result" select="'yes', 'no'"/>
         <param static="yes" name="method" select="'tunneled'"/>
         <param static="yes" name="ns-scope" select="'switch-xsl-namespace'"/>
      </test>
      <result>
         <all-of>
            <assert>/output/@evaluation-method = 'tunneled'</assert>
            <assert>every $res in /output/global-variables/static-context/* satisfies $res = ('yes', 'no')</assert>
            <assert>every $res in /output/global-variables/dynamic-context/* satisfies $res = ('yes', 'no')</assert>
            <assert>every $eval in (for $i in 1 to 6 return /output/global-variables/static-context/*[$i] = /output/global-variables/dynamic-context/*[$i]) satisfies $eval</assert>
            <assert>every $res in /output/static-context/result satisfies $res = ('yes', 'no')</assert>
            <assert>every $res in /output/dynamic-context/result satisfies $res = ('yes', 'no')</assert>
            <assert>every $res in /output/static-context/result-all/tokenize(., ' ') satisfies $res = ('yes', 'no')</assert>
            <assert>every $res in /output/dynamic-context/result-all/tokenize(., ' ') satisfies $res = ('yes', 'no')</assert>
         </all-of>
      </result>
   </test-case>
   
   <test-case name="system-property-105a">
      <description>
          System-property 'xsl:supports-namespace-axis' with method set to 'static', testing result = ('yes', 'no') and ns-scope: 'normal'
          See for a more detailed description of the parameters and how this test works, the file system-property-100.xsl
      </description>
      <created by="Abel Braaksma" on="2015-09-30"/>
      <dependencies>
         <spec value="XSLT30+"/>
      </dependencies>
      <test>
         <stylesheet file="system-property-100.xsl"/>
         <param static="yes" name="property" select="'xsl:supports-namespace-axis'"/>
         <param static="yes" name="result" select="'yes', 'no'"/>
         <param static="yes" name="method" select="'static'"/>
         <param static="yes" name="ns-scope" select="'normal'"/>
      </test>
      <result>
         <all-of>
            <assert>/output/@evaluation-method = 'static'</assert>
            <assert>every $res in /output/global-variables/static-context/* satisfies $res = ('yes', 'no')</assert>
            <assert>every $res in /output/global-variables/dynamic-context/* satisfies $res = ('yes', 'no')</assert>
            <assert>every $eval in (for $i in 1 to 6 return /output/global-variables/static-context/*[$i] = /output/global-variables/dynamic-context/*[$i]) satisfies $eval</assert>
            <assert>every $res in /output/static-context/result satisfies $res = ('yes', 'no')</assert>
            <assert>every $res in /output/dynamic-context/result satisfies $res = ('yes', 'no')</assert>
            <assert>every $res in /output/static-context/result-all/tokenize(., ' ') satisfies $res = ('yes', 'no')</assert>
            <assert>every $res in /output/dynamic-context/result-all/tokenize(., ' ') satisfies $res = ('yes', 'no')</assert>
         </all-of>
      </result>
   </test-case>
   
   <test-case name="system-property-105b">
      <description>
          System-property 'supports-namespace-axis' with method set to 'static', testing result = ('') and ns-scope: 'other-default-namespace'
          See for a more detailed description of the parameters and how this test works, the file system-property-100.xsl
      </description>
      <created by="Abel Braaksma" on="2015-09-30"/>
      <dependencies>
         <spec value="XSLT30+"/>
      </dependencies>
      <test>
         <stylesheet file="system-property-100.xsl"/>
         <param static="yes" name="property" select="'supports-namespace-axis'"/>
         <param static="yes" name="result" select="''"/>
         <param static="yes" name="method" select="'static'"/>
         <param static="yes" name="ns-scope" select="'other-default-namespace'"/>
      </test>
      <result>
         <all-of>
            <assert>/output/@evaluation-method = 'static'</assert>
            <assert>every $res in /output/global-variables/static-context/* satisfies $res = ('')</assert>
            <assert>every $res in /output/global-variables/dynamic-context/* satisfies $res = ('')</assert>
            <assert>every $eval in (for $i in 1 to 6 return /output/global-variables/static-context/*[$i] = /output/global-variables/dynamic-context/*[$i]) satisfies $eval</assert>
            <assert>every $res in /output/static-context/result satisfies $res = ('')</assert>
            <assert>every $res in /output/dynamic-context/result satisfies $res = ('')</assert>
            <assert>every $res in /output/static-context/result-all/tokenize(., ' ') satisfies $res = ('')</assert>
            <assert>every $res in /output/dynamic-context/result-all/tokenize(., ' ') satisfies $res = ('')</assert>
         </all-of>
      </result>
   </test-case>
   
   <test-case name="system-property-105c">
      <description>
          System-property 'other:supports-namespace-axis' with method set to 'static', testing result = ('yes', 'no') and ns-scope: 'switch-xsl-namespace'
          See for a more detailed description of the parameters and how this test works, the file system-property-100.xsl
      </description>
      <created by="Abel Braaksma" on="2015-09-30"/>
      <dependencies>
         <spec value="XSLT30+"/>
      </dependencies>
      <test>
         <stylesheet file="system-property-100.xsl"/>
         <param static="yes" name="property" select="'other:supports-namespace-axis'"/>
         <param static="yes" name="result" select="'yes', 'no'"/>
         <param static="yes" name="method" select="'static'"/>
         <param static="yes" name="ns-scope" select="'switch-xsl-namespace'"/>
      </test>
      <result>
         <all-of>
            <assert>/output/@evaluation-method = 'static'</assert>
            <assert>every $res in /output/global-variables/static-context/* satisfies $res = ('yes', 'no')</assert>
            <assert>every $res in /output/global-variables/dynamic-context/* satisfies $res = ('yes', 'no')</assert>
            <assert>every $eval in (for $i in 1 to 6 return /output/global-variables/static-context/*[$i] = /output/global-variables/dynamic-context/*[$i]) satisfies $eval</assert>
            <assert>every $res in /output/static-context/result satisfies $res = ('yes', 'no')</assert>
            <assert>every $res in /output/dynamic-context/result satisfies $res = ('yes', 'no')</assert>
            <assert>every $res in /output/static-context/result-all/tokenize(., ' ') satisfies $res = ('yes', 'no')</assert>
            <assert>every $res in /output/dynamic-context/result-all/tokenize(., ' ') satisfies $res = ('yes', 'no')</assert>
         </all-of>
      </result>
   </test-case>
   
   <test-case name="system-property-105d">
      <description>
          System-property 'xsl:supports-namespace-axis' with method set to 'evaluate', testing result = ('yes', 'no') and ns-scope: 'normal'
          See for a more detailed description of the parameters and how this test works, the file system-property-100.xsl
      </description>
      <created by="Abel Braaksma" on="2015-09-30"/>
      <dependencies>
         <spec value="XSLT30+"/>
      </dependencies>
      <test>
         <stylesheet file="system-property-100.xsl"/>
         <param static="yes" name="property" select="'xsl:supports-namespace-axis'"/>
         <param static="yes" name="result" select="'yes', 'no'"/>
         <param static="yes" name="method" select="'evaluate'"/>
         <param static="yes" name="ns-scope" select="'normal'"/>
      </test>
      <result>
         <all-of>
            <assert>/output/@evaluation-method = 'evaluate'</assert>
            <assert>every $res in /output/global-variables/static-context/* satisfies $res = ('yes', 'no')</assert>
            <assert>every $res in /output/global-variables/dynamic-context/* satisfies $res = ('yes', 'no')</assert>
            <assert>every $eval in (for $i in 1 to 6 return /output/global-variables/static-context/*[$i] = /output/global-variables/dynamic-context/*[$i]) satisfies $eval</assert>
            <assert>every $res in /output/static-context/result satisfies $res = ('yes', 'no')</assert>
            <assert>every $res in /output/dynamic-context/result satisfies $res = ('yes', 'no')</assert>
            <assert>every $res in /output/static-context/result-all/tokenize(., ' ') satisfies $res = ('yes', 'no')</assert>
            <assert>every $res in /output/dynamic-context/result-all/tokenize(., ' ') satisfies $res = ('yes', 'no')</assert>
         </all-of>
      </result>
   </test-case>
   
   <test-case name="system-property-105e">
      <description>
          System-property 'supports-namespace-axis' with method set to 'evaluate', testing result = ('') and ns-scope: 'other-default-namespace'
          See for a more detailed description of the parameters and how this test works, the file system-property-100.xsl
      </description>
      <created by="Abel Braaksma" on="2015-09-30"/>
      <dependencies>
         <spec value="XSLT30+"/>
      </dependencies>
      <test>
         <stylesheet file="system-property-100.xsl"/>
         <param static="yes" name="property" select="'supports-namespace-axis'"/>
         <param static="yes" name="result" select="''"/>
         <param static="yes" name="method" select="'evaluate'"/>
         <param static="yes" name="ns-scope" select="'other-default-namespace'"/>
      </test>
      <result>
         <all-of>
            <assert>/output/@evaluation-method = 'evaluate'</assert>
            <assert>every $res in /output/global-variables/static-context/* satisfies $res = ('')</assert>
            <assert>every $res in /output/global-variables/dynamic-context/* satisfies $res = ('')</assert>
            <assert>every $eval in (for $i in 1 to 6 return /output/global-variables/static-context/*[$i] = /output/global-variables/dynamic-context/*[$i]) satisfies $eval</assert>
            <assert>every $res in /output/static-context/result satisfies $res = ('')</assert>
            <assert>every $res in /output/dynamic-context/result satisfies $res = ('')</assert>
            <assert>every $res in /output/static-context/result-all/tokenize(., ' ') satisfies $res = ('')</assert>
            <assert>every $res in /output/dynamic-context/result-all/tokenize(., ' ') satisfies $res = ('')</assert>
         </all-of>
      </result>
   </test-case>
   
   <test-case name="system-property-105f">
      <description>
          System-property 'other:supports-namespace-axis' with method set to 'evaluate', testing result = ('yes', 'no') and ns-scope: 'switch-xsl-namespace'
          See for a more detailed description of the parameters and how this test works, the file system-property-100.xsl
      </description>
      <created by="Abel Braaksma" on="2015-09-30"/>
      <dependencies>
         <spec value="XSLT30+"/>
      </dependencies>
      <test>
         <stylesheet file="system-property-100.xsl"/>
         <param static="yes" name="property" select="'other:supports-namespace-axis'"/>
         <param static="yes" name="result" select="'yes', 'no'"/>
         <param static="yes" name="method" select="'evaluate'"/>
         <param static="yes" name="ns-scope" select="'switch-xsl-namespace'"/>
      </test>
      <result>
         <all-of>
            <assert>/output/@evaluation-method = 'evaluate'</assert>
            <assert>every $res in /output/global-variables/static-context/* satisfies $res = ('yes', 'no')</assert>
            <assert>every $res in /output/global-variables/dynamic-context/* satisfies $res = ('yes', 'no')</assert>
            <assert>every $eval in (for $i in 1 to 6 return /output/global-variables/static-context/*[$i] = /output/global-variables/dynamic-context/*[$i]) satisfies $eval</assert>
            <assert>every $res in /output/static-context/result satisfies $res = ('yes', 'no')</assert>
            <assert>every $res in /output/dynamic-context/result satisfies $res = ('yes', 'no')</assert>
            <assert>every $res in /output/static-context/result-all/tokenize(., ' ') satisfies $res = ('yes', 'no')</assert>
            <assert>every $res in /output/dynamic-context/result-all/tokenize(., ' ') satisfies $res = ('yes', 'no')</assert>
         </all-of>
      </result>
   </test-case>
   
   <test-case name="system-property-105g">
      <description>
          System-property 'xsl:supports-namespace-axis' with method set to 'apply-templates', testing result = ('yes', 'no') and ns-scope: 'normal'
          See for a more detailed description of the parameters and how this test works, the file system-property-100.xsl
      </description>
      <created by="Abel Braaksma" on="2015-09-30"/>
      <dependencies>
         <spec value="XSLT30+"/>
      </dependencies>
      <test>
         <stylesheet file="system-property-100.xsl"/>
         <param static="yes" name="property" select="'xsl:supports-namespace-axis'"/>
         <param static="yes" name="result" select="'yes', 'no'"/>
         <param static="yes" name="method" select="'apply-templates'"/>
         <param static="yes" name="ns-scope" select="'normal'"/>
      </test>
      <result>
         <all-of>
            <assert>/output/@evaluation-method = 'apply-templates'</assert>
            <assert>every $res in /output/global-variables/static-context/* satisfies $res = ('yes', 'no')</assert>
            <assert>every $res in /output/global-variables/dynamic-context/* satisfies $res = ('yes', 'no')</assert>
            <assert>every $eval in (for $i in 1 to 6 return /output/global-variables/static-context/*[$i] = /output/global-variables/dynamic-context/*[$i]) satisfies $eval</assert>
            <assert>every $res in /output/static-context/result satisfies $res = ('yes', 'no')</assert>
            <assert>every $res in /output/dynamic-context/result satisfies $res = ('yes', 'no')</assert>
            <assert>every $res in /output/static-context/result-all/tokenize(., ' ') satisfies $res = ('yes', 'no')</assert>
            <assert>every $res in /output/dynamic-context/result-all/tokenize(., ' ') satisfies $res = ('yes', 'no')</assert>
         </all-of>
      </result>
   </test-case>
   
   <test-case name="system-property-105h">
      <description>
          System-property 'supports-namespace-axis' with method set to 'apply-templates', testing result = ('') and ns-scope: 'other-default-namespace'
          See for a more detailed description of the parameters and how this test works, the file system-property-100.xsl
      </description>
      <created by="Abel Braaksma" on="2015-09-30"/>
      <dependencies>
         <spec value="XSLT30+"/>
      </dependencies>
      <test>
         <stylesheet file="system-property-100.xsl"/>
         <param static="yes" name="property" select="'supports-namespace-axis'"/>
         <param static="yes" name="result" select="''"/>
         <param static="yes" name="method" select="'apply-templates'"/>
         <param static="yes" name="ns-scope" select="'other-default-namespace'"/>
      </test>
      <result>
         <all-of>
            <assert>/output/@evaluation-method = 'apply-templates'</assert>
            <assert>every $res in /output/global-variables/static-context/* satisfies $res = ('')</assert>
            <assert>every $res in /output/global-variables/dynamic-context/* satisfies $res = ('')</assert>
            <assert>every $eval in (for $i in 1 to 6 return /output/global-variables/static-context/*[$i] = /output/global-variables/dynamic-context/*[$i]) satisfies $eval</assert>
            <assert>every $res in /output/static-context/result satisfies $res = ('')</assert>
            <assert>every $res in /output/dynamic-context/result satisfies $res = ('')</assert>
            <assert>every $res in /output/static-context/result-all/tokenize(., ' ') satisfies $res = ('')</assert>
            <assert>every $res in /output/dynamic-context/result-all/tokenize(., ' ') satisfies $res = ('')</assert>
         </all-of>
      </result>
   </test-case>
   
   <test-case name="system-property-105i">
      <description>
          System-property 'other:supports-namespace-axis' with method set to 'apply-templates', testing result = ('yes', 'no') and ns-scope: 'switch-xsl-namespace'
          See for a more detailed description of the parameters and how this test works, the file system-property-100.xsl
      </description>
      <created by="Abel Braaksma" on="2015-09-30"/>
      <dependencies>
         <spec value="XSLT30+"/>
      </dependencies>
      <test>
         <stylesheet file="system-property-100.xsl"/>
         <param static="yes" name="property" select="'other:supports-namespace-axis'"/>
         <param static="yes" name="result" select="'yes', 'no'"/>
         <param static="yes" name="method" select="'apply-templates'"/>
         <param static="yes" name="ns-scope" select="'switch-xsl-namespace'"/>
      </test>
      <result>
         <all-of>
            <assert>/output/@evaluation-method = 'apply-templates'</assert>
            <assert>every $res in /output/global-variables/static-context/* satisfies $res = ('yes', 'no')</assert>
            <assert>every $res in /output/global-variables/dynamic-context/* satisfies $res = ('yes', 'no')</assert>
            <assert>every $eval in (for $i in 1 to 6 return /output/global-variables/static-context/*[$i] = /output/global-variables/dynamic-context/*[$i]) satisfies $eval</assert>
            <assert>every $res in /output/static-context/result satisfies $res = ('yes', 'no')</assert>
            <assert>every $res in /output/dynamic-context/result satisfies $res = ('yes', 'no')</assert>
            <assert>every $res in /output/static-context/result-all/tokenize(., ' ') satisfies $res = ('yes', 'no')</assert>
            <assert>every $res in /output/dynamic-context/result-all/tokenize(., ' ') satisfies $res = ('yes', 'no')</assert>
         </all-of>
      </result>
   </test-case>
   
   <test-case name="system-property-105j">
      <description>
          System-property 'xsl:supports-namespace-axis' with method set to 'stylesheet-function', testing result = ('yes', 'no') and ns-scope: 'normal'
          See for a more detailed description of the parameters and how this test works, the file system-property-100.xsl
      </description>
      <created by="Abel Braaksma" on="2015-09-30"/>
      <dependencies>
         <spec value="XSLT30+"/>
      </dependencies>
      <test>
         <stylesheet file="system-property-100.xsl"/>
         <param static="yes" name="property" select="'xsl:supports-namespace-axis'"/>
         <param static="yes" name="result" select="'yes', 'no'"/>
         <param static="yes" name="method" select="'stylesheet-function'"/>
         <param static="yes" name="ns-scope" select="'normal'"/>
      </test>
      <result>
         <all-of>
            <assert>/output/@evaluation-method = 'stylesheet-function'</assert>
            <assert>every $res in /output/global-variables/static-context/* satisfies $res = ('yes', 'no')</assert>
            <assert>every $res in /output/global-variables/dynamic-context/* satisfies $res = ('yes', 'no')</assert>
            <assert>every $eval in (for $i in 1 to 6 return /output/global-variables/static-context/*[$i] = /output/global-variables/dynamic-context/*[$i]) satisfies $eval</assert>
            <assert>every $res in /output/static-context/result satisfies $res = ('yes', 'no')</assert>
            <assert>every $res in /output/dynamic-context/result satisfies $res = ('yes', 'no')</assert>
            <assert>every $res in /output/static-context/result-all/tokenize(., ' ') satisfies $res = ('yes', 'no')</assert>
            <assert>every $res in /output/dynamic-context/result-all/tokenize(., ' ') satisfies $res = ('yes', 'no')</assert>
         </all-of>
      </result>
   </test-case>
   
   <test-case name="system-property-105k">
      <description>
          System-property 'supports-namespace-axis' with method set to 'stylesheet-function', testing result = ('') and ns-scope: 'other-default-namespace'
          See for a more detailed description of the parameters and how this test works, the file system-property-100.xsl
      </description>
      <created by="Abel Braaksma" on="2015-09-30"/>
      <dependencies>
         <spec value="XSLT30+"/>
      </dependencies>
      <test>
         <stylesheet file="system-property-100.xsl"/>
         <param static="yes" name="property" select="'supports-namespace-axis'"/>
         <param static="yes" name="result" select="''"/>
         <param static="yes" name="method" select="'stylesheet-function'"/>
         <param static="yes" name="ns-scope" select="'other-default-namespace'"/>
      </test>
      <result>
         <all-of>
            <assert>/output/@evaluation-method = 'stylesheet-function'</assert>
            <assert>every $res in /output/global-variables/static-context/* satisfies $res = ('')</assert>
            <assert>every $res in /output/global-variables/dynamic-context/* satisfies $res = ('')</assert>
            <assert>every $eval in (for $i in 1 to 6 return /output/global-variables/static-context/*[$i] = /output/global-variables/dynamic-context/*[$i]) satisfies $eval</assert>
            <assert>every $res in /output/static-context/result satisfies $res = ('')</assert>
            <assert>every $res in /output/dynamic-context/result satisfies $res = ('')</assert>
            <assert>every $res in /output/static-context/result-all/tokenize(., ' ') satisfies $res = ('')</assert>
            <assert>every $res in /output/dynamic-context/result-all/tokenize(., ' ') satisfies $res = ('')</assert>
         </all-of>
      </result>
   </test-case>
   
   <test-case name="system-property-105l">
      <description>
          System-property 'other:supports-namespace-axis' with method set to 'stylesheet-function', testing result = ('yes', 'no') and ns-scope: 'switch-xsl-namespace'
          See for a more detailed description of the parameters and how this test works, the file system-property-100.xsl
      </description>
      <created by="Abel Braaksma" on="2015-09-30"/>
      <dependencies>
         <spec value="XSLT30+"/>
      </dependencies>
      <test>
         <stylesheet file="system-property-100.xsl"/>
         <param static="yes" name="property" select="'other:supports-namespace-axis'"/>
         <param static="yes" name="result" select="'yes', 'no'"/>
         <param static="yes" name="method" select="'stylesheet-function'"/>
         <param static="yes" name="ns-scope" select="'switch-xsl-namespace'"/>
      </test>
      <result>
         <all-of>
            <assert>/output/@evaluation-method = 'stylesheet-function'</assert>
            <assert>every $res in /output/global-variables/static-context/* satisfies $res = ('yes', 'no')</assert>
            <assert>every $res in /output/global-variables/dynamic-context/* satisfies $res = ('yes', 'no')</assert>
            <assert>every $eval in (for $i in 1 to 6 return /output/global-variables/static-context/*[$i] = /output/global-variables/dynamic-context/*[$i]) satisfies $eval</assert>
            <assert>every $res in /output/static-context/result satisfies $res = ('yes', 'no')</assert>
            <assert>every $res in /output/dynamic-context/result satisfies $res = ('yes', 'no')</assert>
            <assert>every $res in /output/static-context/result-all/tokenize(., ' ') satisfies $res = ('yes', 'no')</assert>
            <assert>every $res in /output/dynamic-context/result-all/tokenize(., ' ') satisfies $res = ('yes', 'no')</assert>
         </all-of>
      </result>
   </test-case>
   
   <test-case name="system-property-105m">
      <description>
          System-property 'xsl:supports-namespace-axis' with method set to 'tunneled', testing result = ('yes', 'no') and ns-scope: 'normal'
          See for a more detailed description of the parameters and how this test works, the file system-property-100.xsl
      </description>
      <created by="Abel Braaksma" on="2015-09-30"/>
      <dependencies>
         <spec value="XSLT30+"/>
      </dependencies>
      <test>
         <stylesheet file="system-property-100.xsl"/>
         <param static="yes" name="property" select="'xsl:supports-namespace-axis'"/>
         <param static="yes" name="result" select="'yes', 'no'"/>
         <param static="yes" name="method" select="'tunneled'"/>
         <param static="yes" name="ns-scope" select="'normal'"/>
      </test>
      <result>
         <all-of>
            <assert>/output/@evaluation-method = 'tunneled'</assert>
            <assert>every $res in /output/global-variables/static-context/* satisfies $res = ('yes', 'no')</assert>
            <assert>every $res in /output/global-variables/dynamic-context/* satisfies $res = ('yes', 'no')</assert>
            <assert>every $eval in (for $i in 1 to 6 return /output/global-variables/static-context/*[$i] = /output/global-variables/dynamic-context/*[$i]) satisfies $eval</assert>
            <assert>every $res in /output/static-context/result satisfies $res = ('yes', 'no')</assert>
            <assert>every $res in /output/dynamic-context/result satisfies $res = ('yes', 'no')</assert>
            <assert>every $res in /output/static-context/result-all/tokenize(., ' ') satisfies $res = ('yes', 'no')</assert>
            <assert>every $res in /output/dynamic-context/result-all/tokenize(., ' ') satisfies $res = ('yes', 'no')</assert>
         </all-of>
      </result>
   </test-case>
   
   <test-case name="system-property-105n">
      <description>
          System-property 'supports-namespace-axis' with method set to 'tunneled', testing result = ('') and ns-scope: 'other-default-namespace'
          See for a more detailed description of the parameters and how this test works, the file system-property-100.xsl
      </description>
      <created by="Abel Braaksma" on="2015-09-30"/>
      <dependencies>
         <spec value="XSLT30+"/>
      </dependencies>
      <test>
         <stylesheet file="system-property-100.xsl"/>
         <param static="yes" name="property" select="'supports-namespace-axis'"/>
         <param static="yes" name="result" select="''"/>
         <param static="yes" name="method" select="'tunneled'"/>
         <param static="yes" name="ns-scope" select="'other-default-namespace'"/>
      </test>
      <result>
         <all-of>
            <assert>/output/@evaluation-method = 'tunneled'</assert>
            <assert>every $res in /output/global-variables/static-context/* satisfies $res = ('')</assert>
            <assert>every $res in /output/global-variables/dynamic-context/* satisfies $res = ('')</assert>
            <assert>every $eval in (for $i in 1 to 6 return /output/global-variables/static-context/*[$i] = /output/global-variables/dynamic-context/*[$i]) satisfies $eval</assert>
            <assert>every $res in /output/static-context/result satisfies $res = ('')</assert>
            <assert>every $res in /output/dynamic-context/result satisfies $res = ('')</assert>
            <assert>every $res in /output/static-context/result-all/tokenize(., ' ') satisfies $res = ('')</assert>
            <assert>every $res in /output/dynamic-context/result-all/tokenize(., ' ') satisfies $res = ('')</assert>
         </all-of>
      </result>
   </test-case>
   
   <test-case name="system-property-105o">
      <description>
          System-property 'other:supports-namespace-axis' with method set to 'tunneled', testing result = ('yes', 'no') and ns-scope: 'switch-xsl-namespace'
          See for a more detailed description of the parameters and how this test works, the file system-property-100.xsl
      </description>
      <created by="Abel Braaksma" on="2015-09-30"/>
      <dependencies>
         <spec value="XSLT30+"/>
      </dependencies>
      <test>
         <stylesheet file="system-property-100.xsl"/>
         <param static="yes" name="property" select="'other:supports-namespace-axis'"/>
         <param static="yes" name="result" select="'yes', 'no'"/>
         <param static="yes" name="method" select="'tunneled'"/>
         <param static="yes" name="ns-scope" select="'switch-xsl-namespace'"/>
      </test>
      <result>
         <all-of>
            <assert>/output/@evaluation-method = 'tunneled'</assert>
            <assert>every $res in /output/global-variables/static-context/* satisfies $res = ('yes', 'no')</assert>
            <assert>every $res in /output/global-variables/dynamic-context/* satisfies $res = ('yes', 'no')</assert>
            <assert>every $eval in (for $i in 1 to 6 return /output/global-variables/static-context/*[$i] = /output/global-variables/dynamic-context/*[$i]) satisfies $eval</assert>
            <assert>every $res in /output/static-context/result satisfies $res = ('yes', 'no')</assert>
            <assert>every $res in /output/dynamic-context/result satisfies $res = ('yes', 'no')</assert>
            <assert>every $res in /output/static-context/result-all/tokenize(., ' ') satisfies $res = ('yes', 'no')</assert>
            <assert>every $res in /output/dynamic-context/result-all/tokenize(., ' ') satisfies $res = ('yes', 'no')</assert>
         </all-of>
      </result>
   </test-case>
   
   <test-case name="system-property-106a">
      <description>
          System-property 'xsl:supports-streaming' with method set to 'static', testing result = ('yes', 'no') and ns-scope: 'normal'
          See for a more detailed description of the parameters and how this test works, the file system-property-100.xsl
      </description>
      <created by="Abel Braaksma" on="2015-09-30"/>
      <dependencies>
         <spec value="XSLT30+"/>
      </dependencies>
      <test>
         <stylesheet file="system-property-100.xsl"/>
         <param static="yes" name="property" select="'xsl:supports-streaming'"/>
         <param static="yes" name="result" select="'yes', 'no'"/>
         <param static="yes" name="method" select="'static'"/>
         <param static="yes" name="ns-scope" select="'normal'"/>
      </test>
      <result>
         <all-of>
            <assert>/output/@evaluation-method = 'static'</assert>
            <assert>every $res in /output/global-variables/static-context/* satisfies $res = ('yes', 'no')</assert>
            <assert>every $res in /output/global-variables/dynamic-context/* satisfies $res = ('yes', 'no')</assert>
            <assert>every $eval in (for $i in 1 to 6 return /output/global-variables/static-context/*[$i] = /output/global-variables/dynamic-context/*[$i]) satisfies $eval</assert>
            <assert>every $res in /output/static-context/result satisfies $res = ('yes', 'no')</assert>
            <assert>every $res in /output/dynamic-context/result satisfies $res = ('yes', 'no')</assert>
            <assert>every $res in /output/static-context/result-all/tokenize(., ' ') satisfies $res = ('yes', 'no')</assert>
            <assert>every $res in /output/dynamic-context/result-all/tokenize(., ' ') satisfies $res = ('yes', 'no')</assert>
         </all-of>
      </result>
   </test-case>
   
   <test-case name="system-property-106b">
      <description>
          System-property 'supports-streaming' with method set to 'static', testing result = ('') and ns-scope: 'other-default-namespace'
          See for a more detailed description of the parameters and how this test works, the file system-property-100.xsl
      </description>
      <created by="Abel Braaksma" on="2015-09-30"/>
      <dependencies>
         <spec value="XSLT30+"/>
      </dependencies>
      <test>
         <stylesheet file="system-property-100.xsl"/>
         <param static="yes" name="property" select="'supports-streaming'"/>
         <param static="yes" name="result" select="''"/>
         <param static="yes" name="method" select="'static'"/>
         <param static="yes" name="ns-scope" select="'other-default-namespace'"/>
      </test>
      <result>
         <all-of>
            <assert>/output/@evaluation-method = 'static'</assert>
            <assert>every $res in /output/global-variables/static-context/* satisfies $res = ('')</assert>
            <assert>every $res in /output/global-variables/dynamic-context/* satisfies $res = ('')</assert>
            <assert>every $eval in (for $i in 1 to 6 return /output/global-variables/static-context/*[$i] = /output/global-variables/dynamic-context/*[$i]) satisfies $eval</assert>
            <assert>every $res in /output/static-context/result satisfies $res = ('')</assert>
            <assert>every $res in /output/dynamic-context/result satisfies $res = ('')</assert>
            <assert>every $res in /output/static-context/result-all/tokenize(., ' ') satisfies $res = ('')</assert>
            <assert>every $res in /output/dynamic-context/result-all/tokenize(., ' ') satisfies $res = ('')</assert>
         </all-of>
      </result>
   </test-case>
   
   <test-case name="system-property-106c">
      <description>
          System-property 'other:supports-streaming' with method set to 'static', testing result = ('yes', 'no') and ns-scope: 'switch-xsl-namespace'
          See for a more detailed description of the parameters and how this test works, the file system-property-100.xsl
      </description>
      <created by="Abel Braaksma" on="2015-09-30"/>
      <dependencies>
         <spec value="XSLT30+"/>
      </dependencies>
      <test>
         <stylesheet file="system-property-100.xsl"/>
         <param static="yes" name="property" select="'other:supports-streaming'"/>
         <param static="yes" name="result" select="'yes', 'no'"/>
         <param static="yes" name="method" select="'static'"/>
         <param static="yes" name="ns-scope" select="'switch-xsl-namespace'"/>
      </test>
      <result>
         <all-of>
            <assert>/output/@evaluation-method = 'static'</assert>
            <assert>every $res in /output/global-variables/static-context/* satisfies $res = ('yes', 'no')</assert>
            <assert>every $res in /output/global-variables/dynamic-context/* satisfies $res = ('yes', 'no')</assert>
            <assert>every $eval in (for $i in 1 to 6 return /output/global-variables/static-context/*[$i] = /output/global-variables/dynamic-context/*[$i]) satisfies $eval</assert>
            <assert>every $res in /output/static-context/result satisfies $res = ('yes', 'no')</assert>
            <assert>every $res in /output/dynamic-context/result satisfies $res = ('yes', 'no')</assert>
            <assert>every $res in /output/static-context/result-all/tokenize(., ' ') satisfies $res = ('yes', 'no')</assert>
            <assert>every $res in /output/dynamic-context/result-all/tokenize(., ' ') satisfies $res = ('yes', 'no')</assert>
         </all-of>
      </result>
   </test-case>
   
   <test-case name="system-property-106d">
      <description>
          System-property 'xsl:supports-streaming' with method set to 'evaluate', testing result = ('yes', 'no') and ns-scope: 'normal'
          See for a more detailed description of the parameters and how this test works, the file system-property-100.xsl
      </description>
      <created by="Abel Braaksma" on="2015-09-30"/>
      <dependencies>
         <spec value="XSLT30+"/>
      </dependencies>
      <test>
         <stylesheet file="system-property-100.xsl"/>
         <param static="yes" name="property" select="'xsl:supports-streaming'"/>
         <param static="yes" name="result" select="'yes', 'no'"/>
         <param static="yes" name="method" select="'evaluate'"/>
         <param static="yes" name="ns-scope" select="'normal'"/>
      </test>
      <result>
         <all-of>
            <assert>/output/@evaluation-method = 'evaluate'</assert>
            <assert>every $res in /output/global-variables/static-context/* satisfies $res = ('yes', 'no')</assert>
            <assert>every $res in /output/global-variables/dynamic-context/* satisfies $res = ('yes', 'no')</assert>
            <assert>every $eval in (for $i in 1 to 6 return /output/global-variables/static-context/*[$i] = /output/global-variables/dynamic-context/*[$i]) satisfies $eval</assert>
            <assert>every $res in /output/static-context/result satisfies $res = ('yes', 'no')</assert>
            <assert>every $res in /output/dynamic-context/result satisfies $res = ('yes', 'no')</assert>
            <assert>every $res in /output/static-context/result-all/tokenize(., ' ') satisfies $res = ('yes', 'no')</assert>
            <assert>every $res in /output/dynamic-context/result-all/tokenize(., ' ') satisfies $res = ('yes', 'no')</assert>
         </all-of>
      </result>
   </test-case>
   
   <test-case name="system-property-106e">
      <description>
          System-property 'supports-streaming' with method set to 'evaluate', testing result = ('') and ns-scope: 'other-default-namespace'
          See for a more detailed description of the parameters and how this test works, the file system-property-100.xsl
      </description>
      <created by="Abel Braaksma" on="2015-09-30"/>
      <dependencies>
         <spec value="XSLT30+"/>
      </dependencies>
      <test>
         <stylesheet file="system-property-100.xsl"/>
         <param static="yes" name="property" select="'supports-streaming'"/>
         <param static="yes" name="result" select="''"/>
         <param static="yes" name="method" select="'evaluate'"/>
         <param static="yes" name="ns-scope" select="'other-default-namespace'"/>
      </test>
      <result>
         <all-of>
            <assert>/output/@evaluation-method = 'evaluate'</assert>
            <assert>every $res in /output/global-variables/static-context/* satisfies $res = ('')</assert>
            <assert>every $res in /output/global-variables/dynamic-context/* satisfies $res = ('')</assert>
            <assert>every $eval in (for $i in 1 to 6 return /output/global-variables/static-context/*[$i] = /output/global-variables/dynamic-context/*[$i]) satisfies $eval</assert>
            <assert>every $res in /output/static-context/result satisfies $res = ('')</assert>
            <assert>every $res in /output/dynamic-context/result satisfies $res = ('')</assert>
            <assert>every $res in /output/static-context/result-all/tokenize(., ' ') satisfies $res = ('')</assert>
            <assert>every $res in /output/dynamic-context/result-all/tokenize(., ' ') satisfies $res = ('')</assert>
         </all-of>
      </result>
   </test-case>
   
   <test-case name="system-property-106f">
      <description>
          System-property 'other:supports-streaming' with method set to 'evaluate', testing result = ('yes', 'no') and ns-scope: 'switch-xsl-namespace'
          See for a more detailed description of the parameters and how this test works, the file system-property-100.xsl
      </description>
      <created by="Abel Braaksma" on="2015-09-30"/>
      <dependencies>
         <spec value="XSLT30+"/>
      </dependencies>
      <test>
         <stylesheet file="system-property-100.xsl"/>
         <param static="yes" name="property" select="'other:supports-streaming'"/>
         <param static="yes" name="result" select="'yes', 'no'"/>
         <param static="yes" name="method" select="'evaluate'"/>
         <param static="yes" name="ns-scope" select="'switch-xsl-namespace'"/>
      </test>
      <result>
         <all-of>
            <assert>/output/@evaluation-method = 'evaluate'</assert>
            <assert>every $res in /output/global-variables/static-context/* satisfies $res = ('yes', 'no')</assert>
            <assert>every $res in /output/global-variables/dynamic-context/* satisfies $res = ('yes', 'no')</assert>
            <assert>every $eval in (for $i in 1 to 6 return /output/global-variables/static-context/*[$i] = /output/global-variables/dynamic-context/*[$i]) satisfies $eval</assert>
            <assert>every $res in /output/static-context/result satisfies $res = ('yes', 'no')</assert>
            <assert>every $res in /output/dynamic-context/result satisfies $res = ('yes', 'no')</assert>
            <assert>every $res in /output/static-context/result-all/tokenize(., ' ') satisfies $res = ('yes', 'no')</assert>
            <assert>every $res in /output/dynamic-context/result-all/tokenize(., ' ') satisfies $res = ('yes', 'no')</assert>
         </all-of>
      </result>
   </test-case>
   
   <test-case name="system-property-106g">
      <description>
          System-property 'xsl:supports-streaming' with method set to 'apply-templates', testing result = ('yes', 'no') and ns-scope: 'normal'
          See for a more detailed description of the parameters and how this test works, the file system-property-100.xsl
      </description>
      <created by="Abel Braaksma" on="2015-09-30"/>
      <dependencies>
         <spec value="XSLT30+"/>
      </dependencies>
      <test>
         <stylesheet file="system-property-100.xsl"/>
         <param static="yes" name="property" select="'xsl:supports-streaming'"/>
         <param static="yes" name="result" select="'yes', 'no'"/>
         <param static="yes" name="method" select="'apply-templates'"/>
         <param static="yes" name="ns-scope" select="'normal'"/>
      </test>
      <result>
         <all-of>
            <assert>/output/@evaluation-method = 'apply-templates'</assert>
            <assert>every $res in /output/global-variables/static-context/* satisfies $res = ('yes', 'no')</assert>
            <assert>every $res in /output/global-variables/dynamic-context/* satisfies $res = ('yes', 'no')</assert>
            <assert>every $eval in (for $i in 1 to 6 return /output/global-variables/static-context/*[$i] = /output/global-variables/dynamic-context/*[$i]) satisfies $eval</assert>
            <assert>every $res in /output/static-context/result satisfies $res = ('yes', 'no')</assert>
            <assert>every $res in /output/dynamic-context/result satisfies $res = ('yes', 'no')</assert>
            <assert>every $res in /output/static-context/result-all/tokenize(., ' ') satisfies $res = ('yes', 'no')</assert>
            <assert>every $res in /output/dynamic-context/result-all/tokenize(., ' ') satisfies $res = ('yes', 'no')</assert>
         </all-of>
      </result>
   </test-case>
   
   <test-case name="system-property-106h">
      <description>
          System-property 'supports-streaming' with method set to 'apply-templates', testing result = ('') and ns-scope: 'other-default-namespace'
          See for a more detailed description of the parameters and how this test works, the file system-property-100.xsl
      </description>
      <created by="Abel Braaksma" on="2015-09-30"/>
      <dependencies>
         <spec value="XSLT30+"/>
      </dependencies>
      <test>
         <stylesheet file="system-property-100.xsl"/>
         <param static="yes" name="property" select="'supports-streaming'"/>
         <param static="yes" name="result" select="''"/>
         <param static="yes" name="method" select="'apply-templates'"/>
         <param static="yes" name="ns-scope" select="'other-default-namespace'"/>
      </test>
      <result>
         <all-of>
            <assert>/output/@evaluation-method = 'apply-templates'</assert>
            <assert>every $res in /output/global-variables/static-context/* satisfies $res = ('')</assert>
            <assert>every $res in /output/global-variables/dynamic-context/* satisfies $res = ('')</assert>
            <assert>every $eval in (for $i in 1 to 6 return /output/global-variables/static-context/*[$i] = /output/global-variables/dynamic-context/*[$i]) satisfies $eval</assert>
            <assert>every $res in /output/static-context/result satisfies $res = ('')</assert>
            <assert>every $res in /output/dynamic-context/result satisfies $res = ('')</assert>
            <assert>every $res in /output/static-context/result-all/tokenize(., ' ') satisfies $res = ('')</assert>
            <assert>every $res in /output/dynamic-context/result-all/tokenize(., ' ') satisfies $res = ('')</assert>
         </all-of>
      </result>
   </test-case>
   
   <test-case name="system-property-106i">
      <description>
          System-property 'other:supports-streaming' with method set to 'apply-templates', testing result = ('yes', 'no') and ns-scope: 'switch-xsl-namespace'
          See for a more detailed description of the parameters and how this test works, the file system-property-100.xsl
      </description>
      <created by="Abel Braaksma" on="2015-09-30"/>
      <dependencies>
         <spec value="XSLT30+"/>
      </dependencies>
      <test>
         <stylesheet file="system-property-100.xsl"/>
         <param static="yes" name="property" select="'other:supports-streaming'"/>
         <param static="yes" name="result" select="'yes', 'no'"/>
         <param static="yes" name="method" select="'apply-templates'"/>
         <param static="yes" name="ns-scope" select="'switch-xsl-namespace'"/>
      </test>
      <result>
         <all-of>
            <assert>/output/@evaluation-method = 'apply-templates'</assert>
            <assert>every $res in /output/global-variables/static-context/* satisfies $res = ('yes', 'no')</assert>
            <assert>every $res in /output/global-variables/dynamic-context/* satisfies $res = ('yes', 'no')</assert>
            <assert>every $eval in (for $i in 1 to 6 return /output/global-variables/static-context/*[$i] = /output/global-variables/dynamic-context/*[$i]) satisfies $eval</assert>
            <assert>every $res in /output/static-context/result satisfies $res = ('yes', 'no')</assert>
            <assert>every $res in /output/dynamic-context/result satisfies $res = ('yes', 'no')</assert>
            <assert>every $res in /output/static-context/result-all/tokenize(., ' ') satisfies $res = ('yes', 'no')</assert>
            <assert>every $res in /output/dynamic-context/result-all/tokenize(., ' ') satisfies $res = ('yes', 'no')</assert>
         </all-of>
      </result>
   </test-case>
   
   <test-case name="system-property-106j">
      <description>
          System-property 'xsl:supports-streaming' with method set to 'stylesheet-function', testing result = ('yes', 'no') and ns-scope: 'normal'
          See for a more detailed description of the parameters and how this test works, the file system-property-100.xsl
      </description>
      <created by="Abel Braaksma" on="2015-09-30"/>
      <dependencies>
         <spec value="XSLT30+"/>
      </dependencies>
      <test>
         <stylesheet file="system-property-100.xsl"/>
         <param static="yes" name="property" select="'xsl:supports-streaming'"/>
         <param static="yes" name="result" select="'yes', 'no'"/>
         <param static="yes" name="method" select="'stylesheet-function'"/>
         <param static="yes" name="ns-scope" select="'normal'"/>
      </test>
      <result>
         <all-of>
            <assert>/output/@evaluation-method = 'stylesheet-function'</assert>
            <assert>every $res in /output/global-variables/static-context/* satisfies $res = ('yes', 'no')</assert>
            <assert>every $res in /output/global-variables/dynamic-context/* satisfies $res = ('yes', 'no')</assert>
            <assert>every $eval in (for $i in 1 to 6 return /output/global-variables/static-context/*[$i] = /output/global-variables/dynamic-context/*[$i]) satisfies $eval</assert>
            <assert>every $res in /output/static-context/result satisfies $res = ('yes', 'no')</assert>
            <assert>every $res in /output/dynamic-context/result satisfies $res = ('yes', 'no')</assert>
            <assert>every $res in /output/static-context/result-all/tokenize(., ' ') satisfies $res = ('yes', 'no')</assert>
            <assert>every $res in /output/dynamic-context/result-all/tokenize(., ' ') satisfies $res = ('yes', 'no')</assert>
         </all-of>
      </result>
   </test-case>
   
   <test-case name="system-property-106k">
      <description>
          System-property 'supports-streaming' with method set to 'stylesheet-function', testing result = ('') and ns-scope: 'other-default-namespace'
          See for a more detailed description of the parameters and how this test works, the file system-property-100.xsl
      </description>
      <created by="Abel Braaksma" on="2015-09-30"/>
      <dependencies>
         <spec value="XSLT30+"/>
      </dependencies>
      <test>
         <stylesheet file="system-property-100.xsl"/>
         <param static="yes" name="property" select="'supports-streaming'"/>
         <param static="yes" name="result" select="''"/>
         <param static="yes" name="method" select="'stylesheet-function'"/>
         <param static="yes" name="ns-scope" select="'other-default-namespace'"/>
      </test>
      <result>
         <all-of>
            <assert>/output/@evaluation-method = 'stylesheet-function'</assert>
            <assert>every $res in /output/global-variables/static-context/* satisfies $res = ('')</assert>
            <assert>every $res in /output/global-variables/dynamic-context/* satisfies $res = ('')</assert>
            <assert>every $eval in (for $i in 1 to 6 return /output/global-variables/static-context/*[$i] = /output/global-variables/dynamic-context/*[$i]) satisfies $eval</assert>
            <assert>every $res in /output/static-context/result satisfies $res = ('')</assert>
            <assert>every $res in /output/dynamic-context/result satisfies $res = ('')</assert>
            <assert>every $res in /output/static-context/result-all/tokenize(., ' ') satisfies $res = ('')</assert>
            <assert>every $res in /output/dynamic-context/result-all/tokenize(., ' ') satisfies $res = ('')</assert>
         </all-of>
      </result>
   </test-case>
   
   <test-case name="system-property-106l">
      <description>
          System-property 'other:supports-streaming' with method set to 'stylesheet-function', testing result = ('yes', 'no') and ns-scope: 'switch-xsl-namespace'
          See for a more detailed description of the parameters and how this test works, the file system-property-100.xsl
      </description>
      <created by="Abel Braaksma" on="2015-09-30"/>
      <dependencies>
         <spec value="XSLT30+"/>
      </dependencies>
      <test>
         <stylesheet file="system-property-100.xsl"/>
         <param static="yes" name="property" select="'other:supports-streaming'"/>
         <param static="yes" name="result" select="'yes', 'no'"/>
         <param static="yes" name="method" select="'stylesheet-function'"/>
         <param static="yes" name="ns-scope" select="'switch-xsl-namespace'"/>
      </test>
      <result>
         <all-of>
            <assert>/output/@evaluation-method = 'stylesheet-function'</assert>
            <assert>every $res in /output/global-variables/static-context/* satisfies $res = ('yes', 'no')</assert>
            <assert>every $res in /output/global-variables/dynamic-context/* satisfies $res = ('yes', 'no')</assert>
            <assert>every $eval in (for $i in 1 to 6 return /output/global-variables/static-context/*[$i] = /output/global-variables/dynamic-context/*[$i]) satisfies $eval</assert>
            <assert>every $res in /output/static-context/result satisfies $res = ('yes', 'no')</assert>
            <assert>every $res in /output/dynamic-context/result satisfies $res = ('yes', 'no')</assert>
            <assert>every $res in /output/static-context/result-all/tokenize(., ' ') satisfies $res = ('yes', 'no')</assert>
            <assert>every $res in /output/dynamic-context/result-all/tokenize(., ' ') satisfies $res = ('yes', 'no')</assert>
         </all-of>
      </result>
   </test-case>
   
   <test-case name="system-property-106m">
      <description>
          System-property 'xsl:supports-streaming' with method set to 'tunneled', testing result = ('yes', 'no') and ns-scope: 'normal'
          See for a more detailed description of the parameters and how this test works, the file system-property-100.xsl
      </description>
      <created by="Abel Braaksma" on="2015-09-30"/>
      <dependencies>
         <spec value="XSLT30+"/>
      </dependencies>
      <test>
         <stylesheet file="system-property-100.xsl"/>
         <param static="yes" name="property" select="'xsl:supports-streaming'"/>
         <param static="yes" name="result" select="'yes', 'no'"/>
         <param static="yes" name="method" select="'tunneled'"/>
         <param static="yes" name="ns-scope" select="'normal'"/>
      </test>
      <result>
         <all-of>
            <assert>/output/@evaluation-method = 'tunneled'</assert>
            <assert>every $res in /output/global-variables/static-context/* satisfies $res = ('yes', 'no')</assert>
            <assert>every $res in /output/global-variables/dynamic-context/* satisfies $res = ('yes', 'no')</assert>
            <assert>every $eval in (for $i in 1 to 6 return /output/global-variables/static-context/*[$i] = /output/global-variables/dynamic-context/*[$i]) satisfies $eval</assert>
            <assert>every $res in /output/static-context/result satisfies $res = ('yes', 'no')</assert>
            <assert>every $res in /output/dynamic-context/result satisfies $res = ('yes', 'no')</assert>
            <assert>every $res in /output/static-context/result-all/tokenize(., ' ') satisfies $res = ('yes', 'no')</assert>
            <assert>every $res in /output/dynamic-context/result-all/tokenize(., ' ') satisfies $res = ('yes', 'no')</assert>
         </all-of>
      </result>
   </test-case>
   
   <test-case name="system-property-106n">
      <description>
          System-property 'supports-streaming' with method set to 'tunneled', testing result = ('') and ns-scope: 'other-default-namespace'
          See for a more detailed description of the parameters and how this test works, the file system-property-100.xsl
      </description>
      <created by="Abel Braaksma" on="2015-09-30"/>
      <dependencies>
         <spec value="XSLT30+"/>
      </dependencies>
      <test>
         <stylesheet file="system-property-100.xsl"/>
         <param static="yes" name="property" select="'supports-streaming'"/>
         <param static="yes" name="result" select="''"/>
         <param static="yes" name="method" select="'tunneled'"/>
         <param static="yes" name="ns-scope" select="'other-default-namespace'"/>
      </test>
      <result>
         <all-of>
            <assert>/output/@evaluation-method = 'tunneled'</assert>
            <assert>every $res in /output/global-variables/static-context/* satisfies $res = ('')</assert>
            <assert>every $res in /output/global-variables/dynamic-context/* satisfies $res = ('')</assert>
            <assert>every $eval in (for $i in 1 to 6 return /output/global-variables/static-context/*[$i] = /output/global-variables/dynamic-context/*[$i]) satisfies $eval</assert>
            <assert>every $res in /output/static-context/result satisfies $res = ('')</assert>
            <assert>every $res in /output/dynamic-context/result satisfies $res = ('')</assert>
            <assert>every $res in /output/static-context/result-all/tokenize(., ' ') satisfies $res = ('')</assert>
            <assert>every $res in /output/dynamic-context/result-all/tokenize(., ' ') satisfies $res = ('')</assert>
         </all-of>
      </result>
   </test-case>
   
   <test-case name="system-property-106o">
      <description>
          System-property 'other:supports-streaming' with method set to 'tunneled', testing result = ('yes', 'no') and ns-scope: 'switch-xsl-namespace'
          See for a more detailed description of the parameters and how this test works, the file system-property-100.xsl
      </description>
      <created by="Abel Braaksma" on="2015-09-30"/>
      <dependencies>
         <spec value="XSLT30+"/>
      </dependencies>
      <test>
         <stylesheet file="system-property-100.xsl"/>
         <param static="yes" name="property" select="'other:supports-streaming'"/>
         <param static="yes" name="result" select="'yes', 'no'"/>
         <param static="yes" name="method" select="'tunneled'"/>
         <param static="yes" name="ns-scope" select="'switch-xsl-namespace'"/>
      </test>
      <result>
         <all-of>
            <assert>/output/@evaluation-method = 'tunneled'</assert>
            <assert>every $res in /output/global-variables/static-context/* satisfies $res = ('yes', 'no')</assert>
            <assert>every $res in /output/global-variables/dynamic-context/* satisfies $res = ('yes', 'no')</assert>
            <assert>every $eval in (for $i in 1 to 6 return /output/global-variables/static-context/*[$i] = /output/global-variables/dynamic-context/*[$i]) satisfies $eval</assert>
            <assert>every $res in /output/static-context/result satisfies $res = ('yes', 'no')</assert>
            <assert>every $res in /output/dynamic-context/result satisfies $res = ('yes', 'no')</assert>
            <assert>every $res in /output/static-context/result-all/tokenize(., ' ') satisfies $res = ('yes', 'no')</assert>
            <assert>every $res in /output/dynamic-context/result-all/tokenize(., ' ') satisfies $res = ('yes', 'no')</assert>
         </all-of>
      </result>
   </test-case>
   
   <test-case name="system-property-107a">
      <description>
          System-property 'xsl:supports-dynamic-evaluation' with method set to 'static', testing result = ('yes', 'no') and ns-scope: 'normal'
          See for a more detailed description of the parameters and how this test works, the file system-property-100.xsl
      </description>
      <created by="Abel Braaksma" on="2015-09-30"/>
      <dependencies>
         <spec value="XSLT30+"/>
      </dependencies>
      <test>
         <stylesheet file="system-property-100.xsl"/>
         <param static="yes" name="property" select="'xsl:supports-dynamic-evaluation'"/>
         <param static="yes" name="result" select="'yes', 'no'"/>
         <param static="yes" name="method" select="'static'"/>
         <param static="yes" name="ns-scope" select="'normal'"/>
      </test>
      <result>
         <all-of>
            <assert>/output/@evaluation-method = 'static'</assert>
            <assert>every $res in /output/global-variables/static-context/* satisfies $res = ('yes', 'no')</assert>
            <assert>every $res in /output/global-variables/dynamic-context/* satisfies $res = ('yes', 'no')</assert>
            <assert>every $eval in (for $i in 1 to 6 return /output/global-variables/static-context/*[$i] = /output/global-variables/dynamic-context/*[$i]) satisfies $eval</assert>
            <assert>every $res in /output/static-context/result satisfies $res = ('yes', 'no')</assert>
            <assert>every $res in /output/dynamic-context/result satisfies $res = ('yes', 'no')</assert>
            <assert>every $res in /output/static-context/result-all/tokenize(., ' ') satisfies $res = ('yes', 'no')</assert>
            <assert>every $res in /output/dynamic-context/result-all/tokenize(., ' ') satisfies $res = ('yes', 'no')</assert>
         </all-of>
      </result>
   </test-case>
   
   <test-case name="system-property-107b">
      <description>
          System-property 'supports-dynamic-evaluation' with method set to 'static', testing result = ('') and ns-scope: 'other-default-namespace'
          See for a more detailed description of the parameters and how this test works, the file system-property-100.xsl
      </description>
      <created by="Abel Braaksma" on="2015-09-30"/>
      <dependencies>
         <spec value="XSLT30+"/>
      </dependencies>
      <test>
         <stylesheet file="system-property-100.xsl"/>
         <param static="yes" name="property" select="'supports-dynamic-evaluation'"/>
         <param static="yes" name="result" select="''"/>
         <param static="yes" name="method" select="'static'"/>
         <param static="yes" name="ns-scope" select="'other-default-namespace'"/>
      </test>
      <result>
         <all-of>
            <assert>/output/@evaluation-method = 'static'</assert>
            <assert>every $res in /output/global-variables/static-context/* satisfies $res = ('')</assert>
            <assert>every $res in /output/global-variables/dynamic-context/* satisfies $res = ('')</assert>
            <assert>every $eval in (for $i in 1 to 6 return /output/global-variables/static-context/*[$i] = /output/global-variables/dynamic-context/*[$i]) satisfies $eval</assert>
            <assert>every $res in /output/static-context/result satisfies $res = ('')</assert>
            <assert>every $res in /output/dynamic-context/result satisfies $res = ('')</assert>
            <assert>every $res in /output/static-context/result-all/tokenize(., ' ') satisfies $res = ('')</assert>
            <assert>every $res in /output/dynamic-context/result-all/tokenize(., ' ') satisfies $res = ('')</assert>
         </all-of>
      </result>
   </test-case>
   
   <test-case name="system-property-107c">
      <description>
          System-property 'other:supports-dynamic-evaluation' with method set to 'static', testing result = ('yes', 'no') and ns-scope: 'switch-xsl-namespace'
          See for a more detailed description of the parameters and how this test works, the file system-property-100.xsl
      </description>
      <created by="Abel Braaksma" on="2015-09-30"/>
      <dependencies>
         <spec value="XSLT30+"/>
      </dependencies>
      <test>
         <stylesheet file="system-property-100.xsl"/>
         <param static="yes" name="property" select="'other:supports-dynamic-evaluation'"/>
         <param static="yes" name="result" select="'yes', 'no'"/>
         <param static="yes" name="method" select="'static'"/>
         <param static="yes" name="ns-scope" select="'switch-xsl-namespace'"/>
      </test>
      <result>
         <all-of>
            <assert>/output/@evaluation-method = 'static'</assert>
            <assert>every $res in /output/global-variables/static-context/* satisfies $res = ('yes', 'no')</assert>
            <assert>every $res in /output/global-variables/dynamic-context/* satisfies $res = ('yes', 'no')</assert>
            <assert>every $eval in (for $i in 1 to 6 return /output/global-variables/static-context/*[$i] = /output/global-variables/dynamic-context/*[$i]) satisfies $eval</assert>
            <assert>every $res in /output/static-context/result satisfies $res = ('yes', 'no')</assert>
            <assert>every $res in /output/dynamic-context/result satisfies $res = ('yes', 'no')</assert>
            <assert>every $res in /output/static-context/result-all/tokenize(., ' ') satisfies $res = ('yes', 'no')</assert>
            <assert>every $res in /output/dynamic-context/result-all/tokenize(., ' ') satisfies $res = ('yes', 'no')</assert>
         </all-of>
      </result>
   </test-case>
   
   <test-case name="system-property-107d">
      <description>
          System-property 'xsl:supports-dynamic-evaluation' with method set to 'evaluate', testing result = ('yes', 'no') and ns-scope: 'normal'
          See for a more detailed description of the parameters and how this test works, the file system-property-100.xsl
      </description>
      <created by="Abel Braaksma" on="2015-09-30"/>
      <dependencies>
         <spec value="XSLT30+"/>
      </dependencies>
      <test>
         <stylesheet file="system-property-100.xsl"/>
         <param static="yes" name="property" select="'xsl:supports-dynamic-evaluation'"/>
         <param static="yes" name="result" select="'yes', 'no'"/>
         <param static="yes" name="method" select="'evaluate'"/>
         <param static="yes" name="ns-scope" select="'normal'"/>
      </test>
      <result>
         <all-of>
            <assert>/output/@evaluation-method = 'evaluate'</assert>
            <assert>every $res in /output/global-variables/static-context/* satisfies $res = ('yes', 'no')</assert>
            <assert>every $res in /output/global-variables/dynamic-context/* satisfies $res = ('yes', 'no')</assert>
            <assert>every $eval in (for $i in 1 to 6 return /output/global-variables/static-context/*[$i] = /output/global-variables/dynamic-context/*[$i]) satisfies $eval</assert>
            <assert>every $res in /output/static-context/result satisfies $res = ('yes', 'no')</assert>
            <assert>every $res in /output/dynamic-context/result satisfies $res = ('yes', 'no')</assert>
            <assert>every $res in /output/static-context/result-all/tokenize(., ' ') satisfies $res = ('yes', 'no')</assert>
            <assert>every $res in /output/dynamic-context/result-all/tokenize(., ' ') satisfies $res = ('yes', 'no')</assert>
         </all-of>
      </result>
   </test-case>
   
   <test-case name="system-property-107e">
      <description>
          System-property 'supports-dynamic-evaluation' with method set to 'evaluate', testing result = ('') and ns-scope: 'other-default-namespace'
          See for a more detailed description of the parameters and how this test works, the file system-property-100.xsl
      </description>
      <created by="Abel Braaksma" on="2015-09-30"/>
      <dependencies>
         <spec value="XSLT30+"/>
      </dependencies>
      <test>
         <stylesheet file="system-property-100.xsl"/>
         <param static="yes" name="property" select="'supports-dynamic-evaluation'"/>
         <param static="yes" name="result" select="''"/>
         <param static="yes" name="method" select="'evaluate'"/>
         <param static="yes" name="ns-scope" select="'other-default-namespace'"/>
      </test>
      <result>
         <all-of>
            <assert>/output/@evaluation-method = 'evaluate'</assert>
            <assert>every $res in /output/global-variables/static-context/* satisfies $res = ('')</assert>
            <assert>every $res in /output/global-variables/dynamic-context/* satisfies $res = ('')</assert>
            <assert>every $eval in (for $i in 1 to 6 return /output/global-variables/static-context/*[$i] = /output/global-variables/dynamic-context/*[$i]) satisfies $eval</assert>
            <assert>every $res in /output/static-context/result satisfies $res = ('')</assert>
            <assert>every $res in /output/dynamic-context/result satisfies $res = ('')</assert>
            <assert>every $res in /output/static-context/result-all/tokenize(., ' ') satisfies $res = ('')</assert>
            <assert>every $res in /output/dynamic-context/result-all/tokenize(., ' ') satisfies $res = ('')</assert>
         </all-of>
      </result>
   </test-case>
   
   <test-case name="system-property-107f">
      <description>
          System-property 'other:supports-dynamic-evaluation' with method set to 'evaluate', testing result = ('yes', 'no') and ns-scope: 'switch-xsl-namespace'
          See for a more detailed description of the parameters and how this test works, the file system-property-100.xsl
      </description>
      <created by="Abel Braaksma" on="2015-09-30"/>
      <dependencies>
         <spec value="XSLT30+"/>
      </dependencies>
      <test>
         <stylesheet file="system-property-100.xsl"/>
         <param static="yes" name="property" select="'other:supports-dynamic-evaluation'"/>
         <param static="yes" name="result" select="'yes', 'no'"/>
         <param static="yes" name="method" select="'evaluate'"/>
         <param static="yes" name="ns-scope" select="'switch-xsl-namespace'"/>
      </test>
      <result>
         <all-of>
            <assert>/output/@evaluation-method = 'evaluate'</assert>
            <assert>every $res in /output/global-variables/static-context/* satisfies $res = ('yes', 'no')</assert>
            <assert>every $res in /output/global-variables/dynamic-context/* satisfies $res = ('yes', 'no')</assert>
            <assert>every $eval in (for $i in 1 to 6 return /output/global-variables/static-context/*[$i] = /output/global-variables/dynamic-context/*[$i]) satisfies $eval</assert>
            <assert>every $res in /output/static-context/result satisfies $res = ('yes', 'no')</assert>
            <assert>every $res in /output/dynamic-context/result satisfies $res = ('yes', 'no')</assert>
            <assert>every $res in /output/static-context/result-all/tokenize(., ' ') satisfies $res = ('yes', 'no')</assert>
            <assert>every $res in /output/dynamic-context/result-all/tokenize(., ' ') satisfies $res = ('yes', 'no')</assert>
         </all-of>
      </result>
   </test-case>
   
   <test-case name="system-property-107g">
      <description>
          System-property 'xsl:supports-dynamic-evaluation' with method set to 'apply-templates', testing result = ('yes', 'no') and ns-scope: 'normal'
          See for a more detailed description of the parameters and how this test works, the file system-property-100.xsl
      </description>
      <created by="Abel Braaksma" on="2015-09-30"/>
      <dependencies>
         <spec value="XSLT30+"/>
      </dependencies>
      <test>
         <stylesheet file="system-property-100.xsl"/>
         <param static="yes" name="property" select="'xsl:supports-dynamic-evaluation'"/>
         <param static="yes" name="result" select="'yes', 'no'"/>
         <param static="yes" name="method" select="'apply-templates'"/>
         <param static="yes" name="ns-scope" select="'normal'"/>
      </test>
      <result>
         <all-of>
            <assert>/output/@evaluation-method = 'apply-templates'</assert>
            <assert>every $res in /output/global-variables/static-context/* satisfies $res = ('yes', 'no')</assert>
            <assert>every $res in /output/global-variables/dynamic-context/* satisfies $res = ('yes', 'no')</assert>
            <assert>every $eval in (for $i in 1 to 6 return /output/global-variables/static-context/*[$i] = /output/global-variables/dynamic-context/*[$i]) satisfies $eval</assert>
            <assert>every $res in /output/static-context/result satisfies $res = ('yes', 'no')</assert>
            <assert>every $res in /output/dynamic-context/result satisfies $res = ('yes', 'no')</assert>
            <assert>every $res in /output/static-context/result-all/tokenize(., ' ') satisfies $res = ('yes', 'no')</assert>
            <assert>every $res in /output/dynamic-context/result-all/tokenize(., ' ') satisfies $res = ('yes', 'no')</assert>
         </all-of>
      </result>
   </test-case>
   
   <test-case name="system-property-107h">
      <description>
          System-property 'supports-dynamic-evaluation' with method set to 'apply-templates', testing result = ('') and ns-scope: 'other-default-namespace'
          See for a more detailed description of the parameters and how this test works, the file system-property-100.xsl
      </description>
      <created by="Abel Braaksma" on="2015-09-30"/>
      <dependencies>
         <spec value="XSLT30+"/>
      </dependencies>
      <test>
         <stylesheet file="system-property-100.xsl"/>
         <param static="yes" name="property" select="'supports-dynamic-evaluation'"/>
         <param static="yes" name="result" select="''"/>
         <param static="yes" name="method" select="'apply-templates'"/>
         <param static="yes" name="ns-scope" select="'other-default-namespace'"/>
      </test>
      <result>
         <all-of>
            <assert>/output/@evaluation-method = 'apply-templates'</assert>
            <assert>every $res in /output/global-variables/static-context/* satisfies $res = ('')</assert>
            <assert>every $res in /output/global-variables/dynamic-context/* satisfies $res = ('')</assert>
            <assert>every $eval in (for $i in 1 to 6 return /output/global-variables/static-context/*[$i] = /output/global-variables/dynamic-context/*[$i]) satisfies $eval</assert>
            <assert>every $res in /output/static-context/result satisfies $res = ('')</assert>
            <assert>every $res in /output/dynamic-context/result satisfies $res = ('')</assert>
            <assert>every $res in /output/static-context/result-all/tokenize(., ' ') satisfies $res = ('')</assert>
            <assert>every $res in /output/dynamic-context/result-all/tokenize(., ' ') satisfies $res = ('')</assert>
         </all-of>
      </result>
   </test-case>
   
   <test-case name="system-property-107i">
      <description>
          System-property 'other:supports-dynamic-evaluation' with method set to 'apply-templates', testing result = ('yes', 'no') and ns-scope: 'switch-xsl-namespace'
          See for a more detailed description of the parameters and how this test works, the file system-property-100.xsl
      </description>
      <created by="Abel Braaksma" on="2015-09-30"/>
      <dependencies>
         <spec value="XSLT30+"/>
      </dependencies>
      <test>
         <stylesheet file="system-property-100.xsl"/>
         <param static="yes" name="property" select="'other:supports-dynamic-evaluation'"/>
         <param static="yes" name="result" select="'yes', 'no'"/>
         <param static="yes" name="method" select="'apply-templates'"/>
         <param static="yes" name="ns-scope" select="'switch-xsl-namespace'"/>
      </test>
      <result>
         <all-of>
            <assert>/output/@evaluation-method = 'apply-templates'</assert>
            <assert>every $res in /output/global-variables/static-context/* satisfies $res = ('yes', 'no')</assert>
            <assert>every $res in /output/global-variables/dynamic-context/* satisfies $res = ('yes', 'no')</assert>
            <assert>every $eval in (for $i in 1 to 6 return /output/global-variables/static-context/*[$i] = /output/global-variables/dynamic-context/*[$i]) satisfies $eval</assert>
            <assert>every $res in /output/static-context/result satisfies $res = ('yes', 'no')</assert>
            <assert>every $res in /output/dynamic-context/result satisfies $res = ('yes', 'no')</assert>
            <assert>every $res in /output/static-context/result-all/tokenize(., ' ') satisfies $res = ('yes', 'no')</assert>
            <assert>every $res in /output/dynamic-context/result-all/tokenize(., ' ') satisfies $res = ('yes', 'no')</assert>
         </all-of>
      </result>
   </test-case>
   
   <test-case name="system-property-107j">
      <description>
          System-property 'xsl:supports-dynamic-evaluation' with method set to 'stylesheet-function', testing result = ('yes', 'no') and ns-scope: 'normal'
          See for a more detailed description of the parameters and how this test works, the file system-property-100.xsl
      </description>
      <created by="Abel Braaksma" on="2015-09-30"/>
      <dependencies>
         <spec value="XSLT30+"/>
      </dependencies>
      <test>
         <stylesheet file="system-property-100.xsl"/>
         <param static="yes" name="property" select="'xsl:supports-dynamic-evaluation'"/>
         <param static="yes" name="result" select="'yes', 'no'"/>
         <param static="yes" name="method" select="'stylesheet-function'"/>
         <param static="yes" name="ns-scope" select="'normal'"/>
      </test>
      <result>
         <all-of>
            <assert>/output/@evaluation-method = 'stylesheet-function'</assert>
            <assert>every $res in /output/global-variables/static-context/* satisfies $res = ('yes', 'no')</assert>
            <assert>every $res in /output/global-variables/dynamic-context/* satisfies $res = ('yes', 'no')</assert>
            <assert>every $eval in (for $i in 1 to 6 return /output/global-variables/static-context/*[$i] = /output/global-variables/dynamic-context/*[$i]) satisfies $eval</assert>
            <assert>every $res in /output/static-context/result satisfies $res = ('yes', 'no')</assert>
            <assert>every $res in /output/dynamic-context/result satisfies $res = ('yes', 'no')</assert>
            <assert>every $res in /output/static-context/result-all/tokenize(., ' ') satisfies $res = ('yes', 'no')</assert>
            <assert>every $res in /output/dynamic-context/result-all/tokenize(., ' ') satisfies $res = ('yes', 'no')</assert>
         </all-of>
      </result>
   </test-case>
   
   <test-case name="system-property-107k">
      <description>
          System-property 'supports-dynamic-evaluation' with method set to 'stylesheet-function', testing result = ('') and ns-scope: 'other-default-namespace'
          See for a more detailed description of the parameters and how this test works, the file system-property-100.xsl
      </description>
      <created by="Abel Braaksma" on="2015-09-30"/>
      <dependencies>
         <spec value="XSLT30+"/>
      </dependencies>
      <test>
         <stylesheet file="system-property-100.xsl"/>
         <param static="yes" name="property" select="'supports-dynamic-evaluation'"/>
         <param static="yes" name="result" select="''"/>
         <param static="yes" name="method" select="'stylesheet-function'"/>
         <param static="yes" name="ns-scope" select="'other-default-namespace'"/>
      </test>
      <result>
         <all-of>
            <assert>/output/@evaluation-method = 'stylesheet-function'</assert>
            <assert>every $res in /output/global-variables/static-context/* satisfies $res = ('')</assert>
            <assert>every $res in /output/global-variables/dynamic-context/* satisfies $res = ('')</assert>
            <assert>every $eval in (for $i in 1 to 6 return /output/global-variables/static-context/*[$i] = /output/global-variables/dynamic-context/*[$i]) satisfies $eval</assert>
            <assert>every $res in /output/static-context/result satisfies $res = ('')</assert>
            <assert>every $res in /output/dynamic-context/result satisfies $res = ('')</assert>
            <assert>every $res in /output/static-context/result-all/tokenize(., ' ') satisfies $res = ('')</assert>
            <assert>every $res in /output/dynamic-context/result-all/tokenize(., ' ') satisfies $res = ('')</assert>
         </all-of>
      </result>
   </test-case>
   
   <test-case name="system-property-107l">
      <description>
          System-property 'other:supports-dynamic-evaluation' with method set to 'stylesheet-function', testing result = ('yes', 'no') and ns-scope: 'switch-xsl-namespace'
          See for a more detailed description of the parameters and how this test works, the file system-property-100.xsl
      </description>
      <created by="Abel Braaksma" on="2015-09-30"/>
      <dependencies>
         <spec value="XSLT30+"/>
      </dependencies>
      <test>
         <stylesheet file="system-property-100.xsl"/>
         <param static="yes" name="property" select="'other:supports-dynamic-evaluation'"/>
         <param static="yes" name="result" select="'yes', 'no'"/>
         <param static="yes" name="method" select="'stylesheet-function'"/>
         <param static="yes" name="ns-scope" select="'switch-xsl-namespace'"/>
      </test>
      <result>
         <all-of>
            <assert>/output/@evaluation-method = 'stylesheet-function'</assert>
            <assert>every $res in /output/global-variables/static-context/* satisfies $res = ('yes', 'no')</assert>
            <assert>every $res in /output/global-variables/dynamic-context/* satisfies $res = ('yes', 'no')</assert>
            <assert>every $eval in (for $i in 1 to 6 return /output/global-variables/static-context/*[$i] = /output/global-variables/dynamic-context/*[$i]) satisfies $eval</assert>
            <assert>every $res in /output/static-context/result satisfies $res = ('yes', 'no')</assert>
            <assert>every $res in /output/dynamic-context/result satisfies $res = ('yes', 'no')</assert>
            <assert>every $res in /output/static-context/result-all/tokenize(., ' ') satisfies $res = ('yes', 'no')</assert>
            <assert>every $res in /output/dynamic-context/result-all/tokenize(., ' ') satisfies $res = ('yes', 'no')</assert>
         </all-of>
      </result>
   </test-case>
   
   <test-case name="system-property-107m">
      <description>
          System-property 'xsl:supports-dynamic-evaluation' with method set to 'tunneled', testing result = ('yes', 'no') and ns-scope: 'normal'
          See for a more detailed description of the parameters and how this test works, the file system-property-100.xsl
      </description>
      <created by="Abel Braaksma" on="2015-09-30"/>
      <dependencies>
         <spec value="XSLT30+"/>
      </dependencies>
      <test>
         <stylesheet file="system-property-100.xsl"/>
         <param static="yes" name="property" select="'xsl:supports-dynamic-evaluation'"/>
         <param static="yes" name="result" select="'yes', 'no'"/>
         <param static="yes" name="method" select="'tunneled'"/>
         <param static="yes" name="ns-scope" select="'normal'"/>
      </test>
      <result>
         <all-of>
            <assert>/output/@evaluation-method = 'tunneled'</assert>
            <assert>every $res in /output/global-variables/static-context/* satisfies $res = ('yes', 'no')</assert>
            <assert>every $res in /output/global-variables/dynamic-context/* satisfies $res = ('yes', 'no')</assert>
            <assert>every $eval in (for $i in 1 to 6 return /output/global-variables/static-context/*[$i] = /output/global-variables/dynamic-context/*[$i]) satisfies $eval</assert>
            <assert>every $res in /output/static-context/result satisfies $res = ('yes', 'no')</assert>
            <assert>every $res in /output/dynamic-context/result satisfies $res = ('yes', 'no')</assert>
            <assert>every $res in /output/static-context/result-all/tokenize(., ' ') satisfies $res = ('yes', 'no')</assert>
            <assert>every $res in /output/dynamic-context/result-all/tokenize(., ' ') satisfies $res = ('yes', 'no')</assert>
         </all-of>
      </result>
   </test-case>
   
   <test-case name="system-property-107n">
      <description>
          System-property 'supports-dynamic-evaluation' with method set to 'tunneled', testing result = ('') and ns-scope: 'other-default-namespace'
          See for a more detailed description of the parameters and how this test works, the file system-property-100.xsl
      </description>
      <created by="Abel Braaksma" on="2015-09-30"/>
      <dependencies>
         <spec value="XSLT30+"/>
      </dependencies>
      <test>
         <stylesheet file="system-property-100.xsl"/>
         <param static="yes" name="property" select="'supports-dynamic-evaluation'"/>
         <param static="yes" name="result" select="''"/>
         <param static="yes" name="method" select="'tunneled'"/>
         <param static="yes" name="ns-scope" select="'other-default-namespace'"/>
      </test>
      <result>
         <all-of>
            <assert>/output/@evaluation-method = 'tunneled'</assert>
            <assert>every $res in /output/global-variables/static-context/* satisfies $res = ('')</assert>
            <assert>every $res in /output/global-variables/dynamic-context/* satisfies $res = ('')</assert>
            <assert>every $eval in (for $i in 1 to 6 return /output/global-variables/static-context/*[$i] = /output/global-variables/dynamic-context/*[$i]) satisfies $eval</assert>
            <assert>every $res in /output/static-context/result satisfies $res = ('')</assert>
            <assert>every $res in /output/dynamic-context/result satisfies $res = ('')</assert>
            <assert>every $res in /output/static-context/result-all/tokenize(., ' ') satisfies $res = ('')</assert>
            <assert>every $res in /output/dynamic-context/result-all/tokenize(., ' ') satisfies $res = ('')</assert>
         </all-of>
      </result>
   </test-case>
   
   <test-case name="system-property-107o">
      <description>
          System-property 'other:supports-dynamic-evaluation' with method set to 'tunneled', testing result = ('yes', 'no') and ns-scope: 'switch-xsl-namespace'
          See for a more detailed description of the parameters and how this test works, the file system-property-100.xsl
      </description>
      <created by="Abel Braaksma" on="2015-09-30"/>
      <dependencies>
         <spec value="XSLT30+"/>
      </dependencies>
      <test>
         <stylesheet file="system-property-100.xsl"/>
         <param static="yes" name="property" select="'other:supports-dynamic-evaluation'"/>
         <param static="yes" name="result" select="'yes', 'no'"/>
         <param static="yes" name="method" select="'tunneled'"/>
         <param static="yes" name="ns-scope" select="'switch-xsl-namespace'"/>
      </test>
      <result>
         <all-of>
            <assert>/output/@evaluation-method = 'tunneled'</assert>
            <assert>every $res in /output/global-variables/static-context/* satisfies $res = ('yes', 'no')</assert>
            <assert>every $res in /output/global-variables/dynamic-context/* satisfies $res = ('yes', 'no')</assert>
            <assert>every $eval in (for $i in 1 to 6 return /output/global-variables/static-context/*[$i] = /output/global-variables/dynamic-context/*[$i]) satisfies $eval</assert>
            <assert>every $res in /output/static-context/result satisfies $res = ('yes', 'no')</assert>
            <assert>every $res in /output/dynamic-context/result satisfies $res = ('yes', 'no')</assert>
            <assert>every $res in /output/static-context/result-all/tokenize(., ' ') satisfies $res = ('yes', 'no')</assert>
            <assert>every $res in /output/dynamic-context/result-all/tokenize(., ' ') satisfies $res = ('yes', 'no')</assert>
         </all-of>
      </result>
   </test-case>
   
   <test-case name="system-property-108a">
      <description>
          System-property 'xsl:xpath-version' with method set to 'static', testing result = ('3.0', '3.1') and ns-scope: 'normal'
          See for a more detailed description of the parameters and how this test works, the file system-property-100.xsl
      </description>
      <created by="Abel Braaksma" on="2015-09-30"/>
      <dependencies>
         <spec value="XSLT30+"/>
      </dependencies>
      <test>
         <stylesheet file="system-property-100.xsl"/>
         <param static="yes" name="property" select="'xsl:xpath-version'"/>
         <param static="yes" name="result" select="'3.0', '3.1'"/>
         <param static="yes" name="method" select="'static'"/>
         <param static="yes" name="ns-scope" select="'normal'"/>
      </test>
      <result>
         <all-of>
            <assert>/output/@evaluation-method = 'static'</assert>
            <assert>every $res in /output/global-variables/static-context/* satisfies $res = ('3.0', '3.1')</assert>
            <assert>every $res in /output/global-variables/dynamic-context/* satisfies $res = ('3.0', '3.1')</assert>
            <assert>every $eval in (for $i in 1 to 6 return /output/global-variables/static-context/*[$i] = /output/global-variables/dynamic-context/*[$i]) satisfies $eval</assert>
            <assert>every $res in /output/static-context/result satisfies $res = ('3.0', '3.1')</assert>
            <assert>every $res in /output/dynamic-context/result satisfies $res = ('3.0', '3.1')</assert>
            <assert>every $res in /output/static-context/result-all/tokenize(., ' ') satisfies $res = ('3.0', '3.1')</assert>
            <assert>every $res in /output/dynamic-context/result-all/tokenize(., ' ') satisfies $res = ('3.0', '3.1')</assert>
         </all-of>
      </result>
   </test-case>
   
   <test-case name="system-property-108b">
      <description>
          System-property 'xpath-version' with method set to 'static', testing result = ('') and ns-scope: 'other-default-namespace'
          See for a more detailed description of the parameters and how this test works, the file system-property-100.xsl
      </description>
      <created by="Abel Braaksma" on="2015-09-30"/>
      <dependencies>
         <spec value="XSLT30+"/>
      </dependencies>
      <test>
         <stylesheet file="system-property-100.xsl"/>
         <param static="yes" name="property" select="'xpath-version'"/>
         <param static="yes" name="result" select="''"/>
         <param static="yes" name="method" select="'static'"/>
         <param static="yes" name="ns-scope" select="'other-default-namespace'"/>
      </test>
      <result>
         <all-of>
            <assert>/output/@evaluation-method = 'static'</assert>
            <assert>every $res in /output/global-variables/static-context/* satisfies $res = ('')</assert>
            <assert>every $res in /output/global-variables/dynamic-context/* satisfies $res = ('')</assert>
            <assert>every $eval in (for $i in 1 to 6 return /output/global-variables/static-context/*[$i] = /output/global-variables/dynamic-context/*[$i]) satisfies $eval</assert>
            <assert>every $res in /output/static-context/result satisfies $res = ('')</assert>
            <assert>every $res in /output/dynamic-context/result satisfies $res = ('')</assert>
            <assert>every $res in /output/static-context/result-all/tokenize(., ' ') satisfies $res = ('')</assert>
            <assert>every $res in /output/dynamic-context/result-all/tokenize(., ' ') satisfies $res = ('')</assert>
         </all-of>
      </result>
   </test-case>
   
   <test-case name="system-property-108c">
      <description>
          System-property 'other:xpath-version' with method set to 'static', testing result = ('3.0', '3.1') and ns-scope: 'switch-xsl-namespace'
          See for a more detailed description of the parameters and how this test works, the file system-property-100.xsl
      </description>
      <created by="Abel Braaksma" on="2015-09-30"/>
      <dependencies>
         <spec value="XSLT30+"/>
      </dependencies>
      <test>
         <stylesheet file="system-property-100.xsl"/>
         <param static="yes" name="property" select="'other:xpath-version'"/>
         <param static="yes" name="result" select="'3.0', '3.1'"/>
         <param static="yes" name="method" select="'static'"/>
         <param static="yes" name="ns-scope" select="'switch-xsl-namespace'"/>
      </test>
      <result>
         <all-of>
            <assert>/output/@evaluation-method = 'static'</assert>
            <assert>every $res in /output/global-variables/static-context/* satisfies $res = ('3.0', '3.1')</assert>
            <assert>every $res in /output/global-variables/dynamic-context/* satisfies $res = ('3.0', '3.1')</assert>
            <assert>every $eval in (for $i in 1 to 6 return /output/global-variables/static-context/*[$i] = /output/global-variables/dynamic-context/*[$i]) satisfies $eval</assert>
            <assert>every $res in /output/static-context/result satisfies $res = ('3.0', '3.1')</assert>
            <assert>every $res in /output/dynamic-context/result satisfies $res = ('3.0', '3.1')</assert>
            <assert>every $res in /output/static-context/result-all/tokenize(., ' ') satisfies $res = ('3.0', '3.1')</assert>
            <assert>every $res in /output/dynamic-context/result-all/tokenize(., ' ') satisfies $res = ('3.0', '3.1')</assert>
         </all-of>
      </result>
   </test-case>
   
   <test-case name="system-property-108d">
      <description>
          System-property 'xsl:xpath-version' with method set to 'evaluate', testing result = ('3.0', '3.1') and ns-scope: 'normal'
          See for a more detailed description of the parameters and how this test works, the file system-property-100.xsl
      </description>
      <created by="Abel Braaksma" on="2015-09-30"/>
      <dependencies>
         <spec value="XSLT30+"/>
      </dependencies>
      <test>
         <stylesheet file="system-property-100.xsl"/>
         <param static="yes" name="property" select="'xsl:xpath-version'"/>
         <param static="yes" name="result" select="'3.0', '3.1'"/>
         <param static="yes" name="method" select="'evaluate'"/>
         <param static="yes" name="ns-scope" select="'normal'"/>
      </test>
      <result>
         <all-of>
            <assert>/output/@evaluation-method = 'evaluate'</assert>
            <assert>every $res in /output/global-variables/static-context/* satisfies $res = ('3.0', '3.1')</assert>
            <assert>every $res in /output/global-variables/dynamic-context/* satisfies $res = ('3.0', '3.1')</assert>
            <assert>every $eval in (for $i in 1 to 6 return /output/global-variables/static-context/*[$i] = /output/global-variables/dynamic-context/*[$i]) satisfies $eval</assert>
            <assert>every $res in /output/static-context/result satisfies $res = ('3.0', '3.1')</assert>
            <assert>every $res in /output/dynamic-context/result satisfies $res = ('3.0', '3.1')</assert>
            <assert>every $res in /output/static-context/result-all/tokenize(., ' ') satisfies $res = ('3.0', '3.1')</assert>
            <assert>every $res in /output/dynamic-context/result-all/tokenize(., ' ') satisfies $res = ('3.0', '3.1')</assert>
         </all-of>
      </result>
   </test-case>
   
   <test-case name="system-property-108e">
      <description>
          System-property 'xpath-version' with method set to 'evaluate', testing result = ('') and ns-scope: 'other-default-namespace'
          See for a more detailed description of the parameters and how this test works, the file system-property-100.xsl
      </description>
      <created by="Abel Braaksma" on="2015-09-30"/>
      <dependencies>
         <spec value="XSLT30+"/>
      </dependencies>
      <test>
         <stylesheet file="system-property-100.xsl"/>
         <param static="yes" name="property" select="'xpath-version'"/>
         <param static="yes" name="result" select="''"/>
         <param static="yes" name="method" select="'evaluate'"/>
         <param static="yes" name="ns-scope" select="'other-default-namespace'"/>
      </test>
      <result>
         <all-of>
            <assert>/output/@evaluation-method = 'evaluate'</assert>
            <assert>every $res in /output/global-variables/static-context/* satisfies $res = ('')</assert>
            <assert>every $res in /output/global-variables/dynamic-context/* satisfies $res = ('')</assert>
            <assert>every $eval in (for $i in 1 to 6 return /output/global-variables/static-context/*[$i] = /output/global-variables/dynamic-context/*[$i]) satisfies $eval</assert>
            <assert>every $res in /output/static-context/result satisfies $res = ('')</assert>
            <assert>every $res in /output/dynamic-context/result satisfies $res = ('')</assert>
            <assert>every $res in /output/static-context/result-all/tokenize(., ' ') satisfies $res = ('')</assert>
            <assert>every $res in /output/dynamic-context/result-all/tokenize(., ' ') satisfies $res = ('')</assert>
         </all-of>
      </result>
   </test-case>
   
   <test-case name="system-property-108f">
      <description>
          System-property 'other:xpath-version' with method set to 'evaluate', testing result = ('3.0', '3.1') and ns-scope: 'switch-xsl-namespace'
          See for a more detailed description of the parameters and how this test works, the file system-property-100.xsl
      </description>
      <created by="Abel Braaksma" on="2015-09-30"/>
      <dependencies>
         <spec value="XSLT30+"/>
      </dependencies>
      <test>
         <stylesheet file="system-property-100.xsl"/>
         <param static="yes" name="property" select="'other:xpath-version'"/>
         <param static="yes" name="result" select="'3.0', '3.1'"/>
         <param static="yes" name="method" select="'evaluate'"/>
         <param static="yes" name="ns-scope" select="'switch-xsl-namespace'"/>
      </test>
      <result>
         <all-of>
            <assert>/output/@evaluation-method = 'evaluate'</assert>
            <assert>every $res in /output/global-variables/static-context/* satisfies $res = ('3.0', '3.1')</assert>
            <assert>every $res in /output/global-variables/dynamic-context/* satisfies $res = ('3.0', '3.1')</assert>
            <assert>every $eval in (for $i in 1 to 6 return /output/global-variables/static-context/*[$i] = /output/global-variables/dynamic-context/*[$i]) satisfies $eval</assert>
            <assert>every $res in /output/static-context/result satisfies $res = ('3.0', '3.1')</assert>
            <assert>every $res in /output/dynamic-context/result satisfies $res = ('3.0', '3.1')</assert>
            <assert>every $res in /output/static-context/result-all/tokenize(., ' ') satisfies $res = ('3.0', '3.1')</assert>
            <assert>every $res in /output/dynamic-context/result-all/tokenize(., ' ') satisfies $res = ('3.0', '3.1')</assert>
         </all-of>
      </result>
   </test-case>
   
   <test-case name="system-property-108g">
      <description>
          System-property 'xsl:xpath-version' with method set to 'apply-templates', testing result = ('3.0', '3.1') and ns-scope: 'normal'
          See for a more detailed description of the parameters and how this test works, the file system-property-100.xsl
      </description>
      <created by="Abel Braaksma" on="2015-09-30"/>
      <dependencies>
         <spec value="XSLT30+"/>
      </dependencies>
      <test>
         <stylesheet file="system-property-100.xsl"/>
         <param static="yes" name="property" select="'xsl:xpath-version'"/>
         <param static="yes" name="result" select="'3.0', '3.1'"/>
         <param static="yes" name="method" select="'apply-templates'"/>
         <param static="yes" name="ns-scope" select="'normal'"/>
      </test>
      <result>
         <all-of>
            <assert>/output/@evaluation-method = 'apply-templates'</assert>
            <assert>every $res in /output/global-variables/static-context/* satisfies $res = ('3.0', '3.1')</assert>
            <assert>every $res in /output/global-variables/dynamic-context/* satisfies $res = ('3.0', '3.1')</assert>
            <assert>every $eval in (for $i in 1 to 6 return /output/global-variables/static-context/*[$i] = /output/global-variables/dynamic-context/*[$i]) satisfies $eval</assert>
            <assert>every $res in /output/static-context/result satisfies $res = ('3.0', '3.1')</assert>
            <assert>every $res in /output/dynamic-context/result satisfies $res = ('3.0', '3.1')</assert>
            <assert>every $res in /output/static-context/result-all/tokenize(., ' ') satisfies $res = ('3.0', '3.1')</assert>
            <assert>every $res in /output/dynamic-context/result-all/tokenize(., ' ') satisfies $res = ('3.0', '3.1')</assert>
         </all-of>
      </result>
   </test-case>
   
   <test-case name="system-property-108h">
      <description>
          System-property 'xpath-version' with method set to 'apply-templates', testing result = ('') and ns-scope: 'other-default-namespace'
          See for a more detailed description of the parameters and how this test works, the file system-property-100.xsl
      </description>
      <created by="Abel Braaksma" on="2015-09-30"/>
      <dependencies>
         <spec value="XSLT30+"/>
      </dependencies>
      <test>
         <stylesheet file="system-property-100.xsl"/>
         <param static="yes" name="property" select="'xpath-version'"/>
         <param static="yes" name="result" select="''"/>
         <param static="yes" name="method" select="'apply-templates'"/>
         <param static="yes" name="ns-scope" select="'other-default-namespace'"/>
      </test>
      <result>
         <all-of>
            <assert>/output/@evaluation-method = 'apply-templates'</assert>
            <assert>every $res in /output/global-variables/static-context/* satisfies $res = ('')</assert>
            <assert>every $res in /output/global-variables/dynamic-context/* satisfies $res = ('')</assert>
            <assert>every $eval in (for $i in 1 to 6 return /output/global-variables/static-context/*[$i] = /output/global-variables/dynamic-context/*[$i]) satisfies $eval</assert>
            <assert>every $res in /output/static-context/result satisfies $res = ('')</assert>
            <assert>every $res in /output/dynamic-context/result satisfies $res = ('')</assert>
            <assert>every $res in /output/static-context/result-all/tokenize(., ' ') satisfies $res = ('')</assert>
            <assert>every $res in /output/dynamic-context/result-all/tokenize(., ' ') satisfies $res = ('')</assert>
         </all-of>
      </result>
   </test-case>
   
   <test-case name="system-property-108i">
      <description>
          System-property 'other:xpath-version' with method set to 'apply-templates', testing result = ('3.0', '3.1') and ns-scope: 'switch-xsl-namespace'
          See for a more detailed description of the parameters and how this test works, the file system-property-100.xsl
      </description>
      <created by="Abel Braaksma" on="2015-09-30"/>
      <dependencies>
         <spec value="XSLT30+"/>
      </dependencies>
      <test>
         <stylesheet file="system-property-100.xsl"/>
         <param static="yes" name="property" select="'other:xpath-version'"/>
         <param static="yes" name="result" select="'3.0', '3.1'"/>
         <param static="yes" name="method" select="'apply-templates'"/>
         <param static="yes" name="ns-scope" select="'switch-xsl-namespace'"/>
      </test>
      <result>
         <all-of>
            <assert>/output/@evaluation-method = 'apply-templates'</assert>
            <assert>every $res in /output/global-variables/static-context/* satisfies $res = ('3.0', '3.1')</assert>
            <assert>every $res in /output/global-variables/dynamic-context/* satisfies $res = ('3.0', '3.1')</assert>
            <assert>every $eval in (for $i in 1 to 6 return /output/global-variables/static-context/*[$i] = /output/global-variables/dynamic-context/*[$i]) satisfies $eval</assert>
            <assert>every $res in /output/static-context/result satisfies $res = ('3.0', '3.1')</assert>
            <assert>every $res in /output/dynamic-context/result satisfies $res = ('3.0', '3.1')</assert>
            <assert>every $res in /output/static-context/result-all/tokenize(., ' ') satisfies $res = ('3.0', '3.1')</assert>
            <assert>every $res in /output/dynamic-context/result-all/tokenize(., ' ') satisfies $res = ('3.0', '3.1')</assert>
         </all-of>
      </result>
   </test-case>
   
   <test-case name="system-property-108j">
      <description>
          System-property 'xsl:xpath-version' with method set to 'stylesheet-function', testing result = ('3.0', '3.1') and ns-scope: 'normal'
          See for a more detailed description of the parameters and how this test works, the file system-property-100.xsl
      </description>
      <created by="Abel Braaksma" on="2015-09-30"/>
      <dependencies>
         <spec value="XSLT30+"/>
      </dependencies>
      <test>
         <stylesheet file="system-property-100.xsl"/>
         <param static="yes" name="property" select="'xsl:xpath-version'"/>
         <param static="yes" name="result" select="'3.0', '3.1'"/>
         <param static="yes" name="method" select="'stylesheet-function'"/>
         <param static="yes" name="ns-scope" select="'normal'"/>
      </test>
      <result>
         <all-of>
            <assert>/output/@evaluation-method = 'stylesheet-function'</assert>
            <assert>every $res in /output/global-variables/static-context/* satisfies $res = ('3.0', '3.1')</assert>
            <assert>every $res in /output/global-variables/dynamic-context/* satisfies $res = ('3.0', '3.1')</assert>
            <assert>every $eval in (for $i in 1 to 6 return /output/global-variables/static-context/*[$i] = /output/global-variables/dynamic-context/*[$i]) satisfies $eval</assert>
            <assert>every $res in /output/static-context/result satisfies $res = ('3.0', '3.1')</assert>
            <assert>every $res in /output/dynamic-context/result satisfies $res = ('3.0', '3.1')</assert>
            <assert>every $res in /output/static-context/result-all/tokenize(., ' ') satisfies $res = ('3.0', '3.1')</assert>
            <assert>every $res in /output/dynamic-context/result-all/tokenize(., ' ') satisfies $res = ('3.0', '3.1')</assert>
         </all-of>
      </result>
   </test-case>
   
   <test-case name="system-property-108k">
      <description>
          System-property 'xpath-version' with method set to 'stylesheet-function', testing result = ('') and ns-scope: 'other-default-namespace'
          See for a more detailed description of the parameters and how this test works, the file system-property-100.xsl
      </description>
      <created by="Abel Braaksma" on="2015-09-30"/>
      <dependencies>
         <spec value="XSLT30+"/>
      </dependencies>
      <test>
         <stylesheet file="system-property-100.xsl"/>
         <param static="yes" name="property" select="'xpath-version'"/>
         <param static="yes" name="result" select="''"/>
         <param static="yes" name="method" select="'stylesheet-function'"/>
         <param static="yes" name="ns-scope" select="'other-default-namespace'"/>
      </test>
      <result>
         <all-of>
            <assert>/output/@evaluation-method = 'stylesheet-function'</assert>
            <assert>every $res in /output/global-variables/static-context/* satisfies $res = ('')</assert>
            <assert>every $res in /output/global-variables/dynamic-context/* satisfies $res = ('')</assert>
            <assert>every $eval in (for $i in 1 to 6 return /output/global-variables/static-context/*[$i] = /output/global-variables/dynamic-context/*[$i]) satisfies $eval</assert>
            <assert>every $res in /output/static-context/result satisfies $res = ('')</assert>
            <assert>every $res in /output/dynamic-context/result satisfies $res = ('')</assert>
            <assert>every $res in /output/static-context/result-all/tokenize(., ' ') satisfies $res = ('')</assert>
            <assert>every $res in /output/dynamic-context/result-all/tokenize(., ' ') satisfies $res = ('')</assert>
         </all-of>
      </result>
   </test-case>
   
   <test-case name="system-property-108l">
      <description>
          System-property 'other:xpath-version' with method set to 'stylesheet-function', testing result = ('3.0', '3.1') and ns-scope: 'switch-xsl-namespace'
          See for a more detailed description of the parameters and how this test works, the file system-property-100.xsl
      </description>
      <created by="Abel Braaksma" on="2015-09-30"/>
      <dependencies>
         <spec value="XSLT30+"/>
      </dependencies>
      <test>
         <stylesheet file="system-property-100.xsl"/>
         <param static="yes" name="property" select="'other:xpath-version'"/>
         <param static="yes" name="result" select="'3.0', '3.1'"/>
         <param static="yes" name="method" select="'stylesheet-function'"/>
         <param static="yes" name="ns-scope" select="'switch-xsl-namespace'"/>
      </test>
      <result>
         <all-of>
            <assert>/output/@evaluation-method = 'stylesheet-function'</assert>
            <assert>every $res in /output/global-variables/static-context/* satisfies $res = ('3.0', '3.1')</assert>
            <assert>every $res in /output/global-variables/dynamic-context/* satisfies $res = ('3.0', '3.1')</assert>
            <assert>every $eval in (for $i in 1 to 6 return /output/global-variables/static-context/*[$i] = /output/global-variables/dynamic-context/*[$i]) satisfies $eval</assert>
            <assert>every $res in /output/static-context/result satisfies $res = ('3.0', '3.1')</assert>
            <assert>every $res in /output/dynamic-context/result satisfies $res = ('3.0', '3.1')</assert>
            <assert>every $res in /output/static-context/result-all/tokenize(., ' ') satisfies $res = ('3.0', '3.1')</assert>
            <assert>every $res in /output/dynamic-context/result-all/tokenize(., ' ') satisfies $res = ('3.0', '3.1')</assert>
         </all-of>
      </result>
   </test-case>
   
   <test-case name="system-property-108m">
      <description>
          System-property 'xsl:xpath-version' with method set to 'tunneled', testing result = ('3.0', '3.1') and ns-scope: 'normal'
          See for a more detailed description of the parameters and how this test works, the file system-property-100.xsl
      </description>
      <created by="Abel Braaksma" on="2015-09-30"/>
      <dependencies>
         <spec value="XSLT30+"/>
      </dependencies>
      <test>
         <stylesheet file="system-property-100.xsl"/>
         <param static="yes" name="property" select="'xsl:xpath-version'"/>
         <param static="yes" name="result" select="'3.0', '3.1'"/>
         <param static="yes" name="method" select="'tunneled'"/>
         <param static="yes" name="ns-scope" select="'normal'"/>
      </test>
      <result>
         <all-of>
            <assert>/output/@evaluation-method = 'tunneled'</assert>
            <assert>every $res in /output/global-variables/static-context/* satisfies $res = ('3.0', '3.1')</assert>
            <assert>every $res in /output/global-variables/dynamic-context/* satisfies $res = ('3.0', '3.1')</assert>
            <assert>every $eval in (for $i in 1 to 6 return /output/global-variables/static-context/*[$i] = /output/global-variables/dynamic-context/*[$i]) satisfies $eval</assert>
            <assert>every $res in /output/static-context/result satisfies $res = ('3.0', '3.1')</assert>
            <assert>every $res in /output/dynamic-context/result satisfies $res = ('3.0', '3.1')</assert>
            <assert>every $res in /output/static-context/result-all/tokenize(., ' ') satisfies $res = ('3.0', '3.1')</assert>
            <assert>every $res in /output/dynamic-context/result-all/tokenize(., ' ') satisfies $res = ('3.0', '3.1')</assert>
         </all-of>
      </result>
   </test-case>
   
   <test-case name="system-property-108n">
      <description>
          System-property 'xpath-version' with method set to 'tunneled', testing result = ('') and ns-scope: 'other-default-namespace'
          See for a more detailed description of the parameters and how this test works, the file system-property-100.xsl
      </description>
      <created by="Abel Braaksma" on="2015-09-30"/>
      <dependencies>
         <spec value="XSLT30+"/>
      </dependencies>
      <test>
         <stylesheet file="system-property-100.xsl"/>
         <param static="yes" name="property" select="'xpath-version'"/>
         <param static="yes" name="result" select="''"/>
         <param static="yes" name="method" select="'tunneled'"/>
         <param static="yes" name="ns-scope" select="'other-default-namespace'"/>
      </test>
      <result>
         <all-of>
            <assert>/output/@evaluation-method = 'tunneled'</assert>
            <assert>every $res in /output/global-variables/static-context/* satisfies $res = ('')</assert>
            <assert>every $res in /output/global-variables/dynamic-context/* satisfies $res = ('')</assert>
            <assert>every $eval in (for $i in 1 to 6 return /output/global-variables/static-context/*[$i] = /output/global-variables/dynamic-context/*[$i]) satisfies $eval</assert>
            <assert>every $res in /output/static-context/result satisfies $res = ('')</assert>
            <assert>every $res in /output/dynamic-context/result satisfies $res = ('')</assert>
            <assert>every $res in /output/static-context/result-all/tokenize(., ' ') satisfies $res = ('')</assert>
            <assert>every $res in /output/dynamic-context/result-all/tokenize(., ' ') satisfies $res = ('')</assert>
         </all-of>
      </result>
   </test-case>
   
   <test-case name="system-property-108o">
      <description>
          System-property 'other:xpath-version' with method set to 'tunneled', testing result = ('3.0', '3.1') and ns-scope: 'switch-xsl-namespace'
          See for a more detailed description of the parameters and how this test works, the file system-property-100.xsl
      </description>
      <created by="Abel Braaksma" on="2015-09-30"/>
      <dependencies>
         <spec value="XSLT30+"/>
      </dependencies>
      <test>
         <stylesheet file="system-property-100.xsl"/>
         <param static="yes" name="property" select="'other:xpath-version'"/>
         <param static="yes" name="result" select="'3.0', '3.1'"/>
         <param static="yes" name="method" select="'tunneled'"/>
         <param static="yes" name="ns-scope" select="'switch-xsl-namespace'"/>
      </test>
      <result>
         <all-of>
            <assert>/output/@evaluation-method = 'tunneled'</assert>
            <assert>every $res in /output/global-variables/static-context/* satisfies $res = ('3.0', '3.1')</assert>
            <assert>every $res in /output/global-variables/dynamic-context/* satisfies $res = ('3.0', '3.1')</assert>
            <assert>every $eval in (for $i in 1 to 6 return /output/global-variables/static-context/*[$i] = /output/global-variables/dynamic-context/*[$i]) satisfies $eval</assert>
            <assert>every $res in /output/static-context/result satisfies $res = ('3.0', '3.1')</assert>
            <assert>every $res in /output/dynamic-context/result satisfies $res = ('3.0', '3.1')</assert>
            <assert>every $res in /output/static-context/result-all/tokenize(., ' ') satisfies $res = ('3.0', '3.1')</assert>
            <assert>every $res in /output/dynamic-context/result-all/tokenize(., ' ') satisfies $res = ('3.0', '3.1')</assert>
         </all-of>
      </result>
   </test-case>
   
   <test-case name="system-property-109a">
      <description>
          System-property 'xsl:xsd-version' with method set to 'static', testing result = ('1.0', '1.1') and ns-scope: 'normal'
          See for a more detailed description of the parameters and how this test works, the file system-property-100.xsl
      </description>
      <created by="Abel Braaksma" on="2015-09-30"/>
      <dependencies>
         <spec value="XSLT30+"/>
      </dependencies>
      <test>
         <stylesheet file="system-property-100.xsl"/>
         <param static="yes" name="property" select="'xsl:xsd-version'"/>
         <param static="yes" name="result" select="'1.0', '1.1'"/>
         <param static="yes" name="method" select="'static'"/>
         <param static="yes" name="ns-scope" select="'normal'"/>
      </test>
      <result>
         <all-of>
            <assert>/output/@evaluation-method = 'static'</assert>
            <assert>every $res in /output/global-variables/static-context/* satisfies $res = ('1.0', '1.1')</assert>
            <assert>every $res in /output/global-variables/dynamic-context/* satisfies $res = ('1.0', '1.1')</assert>
            <assert>every $eval in (for $i in 1 to 6 return /output/global-variables/static-context/*[$i] = /output/global-variables/dynamic-context/*[$i]) satisfies $eval</assert>
            <assert>every $res in /output/static-context/result satisfies $res = ('1.0', '1.1')</assert>
            <assert>every $res in /output/dynamic-context/result satisfies $res = ('1.0', '1.1')</assert>
            <assert>every $res in /output/static-context/result-all/tokenize(., ' ') satisfies $res = ('1.0', '1.1')</assert>
            <assert>every $res in /output/dynamic-context/result-all/tokenize(., ' ') satisfies $res = ('1.0', '1.1')</assert>
         </all-of>
      </result>
   </test-case>
   
   <test-case name="system-property-109b">
      <description>
          System-property 'xsd-version' with method set to 'static', testing result = ('') and ns-scope: 'other-default-namespace'
          See for a more detailed description of the parameters and how this test works, the file system-property-100.xsl
      </description>
      <created by="Abel Braaksma" on="2015-09-30"/>
      <dependencies>
         <spec value="XSLT30+"/>
      </dependencies>
      <test>
         <stylesheet file="system-property-100.xsl"/>
         <param static="yes" name="property" select="'xsd-version'"/>
         <param static="yes" name="result" select="''"/>
         <param static="yes" name="method" select="'static'"/>
         <param static="yes" name="ns-scope" select="'other-default-namespace'"/>
      </test>
      <result>
         <all-of>
            <assert>/output/@evaluation-method = 'static'</assert>
            <assert>every $res in /output/global-variables/static-context/* satisfies $res = ('')</assert>
            <assert>every $res in /output/global-variables/dynamic-context/* satisfies $res = ('')</assert>
            <assert>every $eval in (for $i in 1 to 6 return /output/global-variables/static-context/*[$i] = /output/global-variables/dynamic-context/*[$i]) satisfies $eval</assert>
            <assert>every $res in /output/static-context/result satisfies $res = ('')</assert>
            <assert>every $res in /output/dynamic-context/result satisfies $res = ('')</assert>
            <assert>every $res in /output/static-context/result-all/tokenize(., ' ') satisfies $res = ('')</assert>
            <assert>every $res in /output/dynamic-context/result-all/tokenize(., ' ') satisfies $res = ('')</assert>
         </all-of>
      </result>
   </test-case>
   
   <test-case name="system-property-109c">
      <description>
          System-property 'other:xsd-version' with method set to 'static', testing result = ('1.0', '1.1') and ns-scope: 'switch-xsl-namespace'
          See for a more detailed description of the parameters and how this test works, the file system-property-100.xsl
      </description>
      <created by="Abel Braaksma" on="2015-09-30"/>
      <dependencies>
         <spec value="XSLT30+"/>
      </dependencies>
      <test>
         <stylesheet file="system-property-100.xsl"/>
         <param static="yes" name="property" select="'other:xsd-version'"/>
         <param static="yes" name="result" select="'1.0', '1.1'"/>
         <param static="yes" name="method" select="'static'"/>
         <param static="yes" name="ns-scope" select="'switch-xsl-namespace'"/>
      </test>
      <result>
         <all-of>
            <assert>/output/@evaluation-method = 'static'</assert>
            <assert>every $res in /output/global-variables/static-context/* satisfies $res = ('1.0', '1.1')</assert>
            <assert>every $res in /output/global-variables/dynamic-context/* satisfies $res = ('1.0', '1.1')</assert>
            <assert>every $eval in (for $i in 1 to 6 return /output/global-variables/static-context/*[$i] = /output/global-variables/dynamic-context/*[$i]) satisfies $eval</assert>
            <assert>every $res in /output/static-context/result satisfies $res = ('1.0', '1.1')</assert>
            <assert>every $res in /output/dynamic-context/result satisfies $res = ('1.0', '1.1')</assert>
            <assert>every $res in /output/static-context/result-all/tokenize(., ' ') satisfies $res = ('1.0', '1.1')</assert>
            <assert>every $res in /output/dynamic-context/result-all/tokenize(., ' ') satisfies $res = ('1.0', '1.1')</assert>
         </all-of>
      </result>
   </test-case>
   
   <test-case name="system-property-109d">
      <description>
          System-property 'xsl:xsd-version' with method set to 'evaluate', testing result = ('1.0', '1.1') and ns-scope: 'normal'
          See for a more detailed description of the parameters and how this test works, the file system-property-100.xsl
      </description>
      <created by="Abel Braaksma" on="2015-09-30"/>
      <dependencies>
         <spec value="XSLT30+"/>
      </dependencies>
      <test>
         <stylesheet file="system-property-100.xsl"/>
         <param static="yes" name="property" select="'xsl:xsd-version'"/>
         <param static="yes" name="result" select="'1.0', '1.1'"/>
         <param static="yes" name="method" select="'evaluate'"/>
         <param static="yes" name="ns-scope" select="'normal'"/>
      </test>
      <result>
         <all-of>
            <assert>/output/@evaluation-method = 'evaluate'</assert>
            <assert>every $res in /output/global-variables/static-context/* satisfies $res = ('1.0', '1.1')</assert>
            <assert>every $res in /output/global-variables/dynamic-context/* satisfies $res = ('1.0', '1.1')</assert>
            <assert>every $eval in (for $i in 1 to 6 return /output/global-variables/static-context/*[$i] = /output/global-variables/dynamic-context/*[$i]) satisfies $eval</assert>
            <assert>every $res in /output/static-context/result satisfies $res = ('1.0', '1.1')</assert>
            <assert>every $res in /output/dynamic-context/result satisfies $res = ('1.0', '1.1')</assert>
            <assert>every $res in /output/static-context/result-all/tokenize(., ' ') satisfies $res = ('1.0', '1.1')</assert>
            <assert>every $res in /output/dynamic-context/result-all/tokenize(., ' ') satisfies $res = ('1.0', '1.1')</assert>
         </all-of>
      </result>
   </test-case>
   
   <test-case name="system-property-109e">
      <description>
          System-property 'xsd-version' with method set to 'evaluate', testing result = ('') and ns-scope: 'other-default-namespace'
          See for a more detailed description of the parameters and how this test works, the file system-property-100.xsl
      </description>
      <created by="Abel Braaksma" on="2015-09-30"/>
      <dependencies>
         <spec value="XSLT30+"/>
      </dependencies>
      <test>
         <stylesheet file="system-property-100.xsl"/>
         <param static="yes" name="property" select="'xsd-version'"/>
         <param static="yes" name="result" select="''"/>
         <param static="yes" name="method" select="'evaluate'"/>
         <param static="yes" name="ns-scope" select="'other-default-namespace'"/>
      </test>
      <result>
         <all-of>
            <assert>/output/@evaluation-method = 'evaluate'</assert>
            <assert>every $res in /output/global-variables/static-context/* satisfies $res = ('')</assert>
            <assert>every $res in /output/global-variables/dynamic-context/* satisfies $res = ('')</assert>
            <assert>every $eval in (for $i in 1 to 6 return /output/global-variables/static-context/*[$i] = /output/global-variables/dynamic-context/*[$i]) satisfies $eval</assert>
            <assert>every $res in /output/static-context/result satisfies $res = ('')</assert>
            <assert>every $res in /output/dynamic-context/result satisfies $res = ('')</assert>
            <assert>every $res in /output/static-context/result-all/tokenize(., ' ') satisfies $res = ('')</assert>
            <assert>every $res in /output/dynamic-context/result-all/tokenize(., ' ') satisfies $res = ('')</assert>
         </all-of>
      </result>
   </test-case>
   
   <test-case name="system-property-109f">
      <description>
          System-property 'other:xsd-version' with method set to 'evaluate', testing result = ('1.0', '1.1') and ns-scope: 'switch-xsl-namespace'
          See for a more detailed description of the parameters and how this test works, the file system-property-100.xsl
      </description>
      <created by="Abel Braaksma" on="2015-09-30"/>
      <dependencies>
         <spec value="XSLT30+"/>
      </dependencies>
      <test>
         <stylesheet file="system-property-100.xsl"/>
         <param static="yes" name="property" select="'other:xsd-version'"/>
         <param static="yes" name="result" select="'1.0', '1.1'"/>
         <param static="yes" name="method" select="'evaluate'"/>
         <param static="yes" name="ns-scope" select="'switch-xsl-namespace'"/>
      </test>
      <result>
         <all-of>
            <assert>/output/@evaluation-method = 'evaluate'</assert>
            <assert>every $res in /output/global-variables/static-context/* satisfies $res = ('1.0', '1.1')</assert>
            <assert>every $res in /output/global-variables/dynamic-context/* satisfies $res = ('1.0', '1.1')</assert>
            <assert>every $eval in (for $i in 1 to 6 return /output/global-variables/static-context/*[$i] = /output/global-variables/dynamic-context/*[$i]) satisfies $eval</assert>
            <assert>every $res in /output/static-context/result satisfies $res = ('1.0', '1.1')</assert>
            <assert>every $res in /output/dynamic-context/result satisfies $res = ('1.0', '1.1')</assert>
            <assert>every $res in /output/static-context/result-all/tokenize(., ' ') satisfies $res = ('1.0', '1.1')</assert>
            <assert>every $res in /output/dynamic-context/result-all/tokenize(., ' ') satisfies $res = ('1.0', '1.1')</assert>
         </all-of>
      </result>
   </test-case>
   
   <test-case name="system-property-109g">
      <description>
          System-property 'xsl:xsd-version' with method set to 'apply-templates', testing result = ('1.0', '1.1') and ns-scope: 'normal'
          See for a more detailed description of the parameters and how this test works, the file system-property-100.xsl
      </description>
      <created by="Abel Braaksma" on="2015-09-30"/>
      <dependencies>
         <spec value="XSLT30+"/>
      </dependencies>
      <test>
         <stylesheet file="system-property-100.xsl"/>
         <param static="yes" name="property" select="'xsl:xsd-version'"/>
         <param static="yes" name="result" select="'1.0', '1.1'"/>
         <param static="yes" name="method" select="'apply-templates'"/>
         <param static="yes" name="ns-scope" select="'normal'"/>
      </test>
      <result>
         <all-of>
            <assert>/output/@evaluation-method = 'apply-templates'</assert>
            <assert>every $res in /output/global-variables/static-context/* satisfies $res = ('1.0', '1.1')</assert>
            <assert>every $res in /output/global-variables/dynamic-context/* satisfies $res = ('1.0', '1.1')</assert>
            <assert>every $eval in (for $i in 1 to 6 return /output/global-variables/static-context/*[$i] = /output/global-variables/dynamic-context/*[$i]) satisfies $eval</assert>
            <assert>every $res in /output/static-context/result satisfies $res = ('1.0', '1.1')</assert>
            <assert>every $res in /output/dynamic-context/result satisfies $res = ('1.0', '1.1')</assert>
            <assert>every $res in /output/static-context/result-all/tokenize(., ' ') satisfies $res = ('1.0', '1.1')</assert>
            <assert>every $res in /output/dynamic-context/result-all/tokenize(., ' ') satisfies $res = ('1.0', '1.1')</assert>
         </all-of>
      </result>
   </test-case>
   
   <test-case name="system-property-109h">
      <description>
          System-property 'xsd-version' with method set to 'apply-templates', testing result = ('') and ns-scope: 'other-default-namespace'
          See for a more detailed description of the parameters and how this test works, the file system-property-100.xsl
      </description>
      <created by="Abel Braaksma" on="2015-09-30"/>
      <dependencies>
         <spec value="XSLT30+"/>
      </dependencies>
      <test>
         <stylesheet file="system-property-100.xsl"/>
         <param static="yes" name="property" select="'xsd-version'"/>
         <param static="yes" name="result" select="''"/>
         <param static="yes" name="method" select="'apply-templates'"/>
         <param static="yes" name="ns-scope" select="'other-default-namespace'"/>
      </test>
      <result>
         <all-of>
            <assert>/output/@evaluation-method = 'apply-templates'</assert>
            <assert>every $res in /output/global-variables/static-context/* satisfies $res = ('')</assert>
            <assert>every $res in /output/global-variables/dynamic-context/* satisfies $res = ('')</assert>
            <assert>every $eval in (for $i in 1 to 6 return /output/global-variables/static-context/*[$i] = /output/global-variables/dynamic-context/*[$i]) satisfies $eval</assert>
            <assert>every $res in /output/static-context/result satisfies $res = ('')</assert>
            <assert>every $res in /output/dynamic-context/result satisfies $res = ('')</assert>
            <assert>every $res in /output/static-context/result-all/tokenize(., ' ') satisfies $res = ('')</assert>
            <assert>every $res in /output/dynamic-context/result-all/tokenize(., ' ') satisfies $res = ('')</assert>
         </all-of>
      </result>
   </test-case>
   
   <test-case name="system-property-109i">
      <description>
          System-property 'other:xsd-version' with method set to 'apply-templates', testing result = ('1.0', '1.1') and ns-scope: 'switch-xsl-namespace'
          See for a more detailed description of the parameters and how this test works, the file system-property-100.xsl
      </description>
      <created by="Abel Braaksma" on="2015-09-30"/>
      <dependencies>
         <spec value="XSLT30+"/>
      </dependencies>
      <test>
         <stylesheet file="system-property-100.xsl"/>
         <param static="yes" name="property" select="'other:xsd-version'"/>
         <param static="yes" name="result" select="'1.0', '1.1'"/>
         <param static="yes" name="method" select="'apply-templates'"/>
         <param static="yes" name="ns-scope" select="'switch-xsl-namespace'"/>
      </test>
      <result>
         <all-of>
            <assert>/output/@evaluation-method = 'apply-templates'</assert>
            <assert>every $res in /output/global-variables/static-context/* satisfies $res = ('1.0', '1.1')</assert>
            <assert>every $res in /output/global-variables/dynamic-context/* satisfies $res = ('1.0', '1.1')</assert>
            <assert>every $eval in (for $i in 1 to 6 return /output/global-variables/static-context/*[$i] = /output/global-variables/dynamic-context/*[$i]) satisfies $eval</assert>
            <assert>every $res in /output/static-context/result satisfies $res = ('1.0', '1.1')</assert>
            <assert>every $res in /output/dynamic-context/result satisfies $res = ('1.0', '1.1')</assert>
            <assert>every $res in /output/static-context/result-all/tokenize(., ' ') satisfies $res = ('1.0', '1.1')</assert>
            <assert>every $res in /output/dynamic-context/result-all/tokenize(., ' ') satisfies $res = ('1.0', '1.1')</assert>
         </all-of>
      </result>
   </test-case>
   
   <test-case name="system-property-109j">
      <description>
          System-property 'xsl:xsd-version' with method set to 'stylesheet-function', testing result = ('1.0', '1.1') and ns-scope: 'normal'
          See for a more detailed description of the parameters and how this test works, the file system-property-100.xsl
      </description>
      <created by="Abel Braaksma" on="2015-09-30"/>
      <dependencies>
         <spec value="XSLT30+"/>
      </dependencies>
      <test>
         <stylesheet file="system-property-100.xsl"/>
         <param static="yes" name="property" select="'xsl:xsd-version'"/>
         <param static="yes" name="result" select="'1.0', '1.1'"/>
         <param static="yes" name="method" select="'stylesheet-function'"/>
         <param static="yes" name="ns-scope" select="'normal'"/>
      </test>
      <result>
         <all-of>
            <assert>/output/@evaluation-method = 'stylesheet-function'</assert>
            <assert>every $res in /output/global-variables/static-context/* satisfies $res = ('1.0', '1.1')</assert>
            <assert>every $res in /output/global-variables/dynamic-context/* satisfies $res = ('1.0', '1.1')</assert>
            <assert>every $eval in (for $i in 1 to 6 return /output/global-variables/static-context/*[$i] = /output/global-variables/dynamic-context/*[$i]) satisfies $eval</assert>
            <assert>every $res in /output/static-context/result satisfies $res = ('1.0', '1.1')</assert>
            <assert>every $res in /output/dynamic-context/result satisfies $res = ('1.0', '1.1')</assert>
            <assert>every $res in /output/static-context/result-all/tokenize(., ' ') satisfies $res = ('1.0', '1.1')</assert>
            <assert>every $res in /output/dynamic-context/result-all/tokenize(., ' ') satisfies $res = ('1.0', '1.1')</assert>
         </all-of>
      </result>
   </test-case>
   
   <test-case name="system-property-109k">
      <description>
          System-property 'xsd-version' with method set to 'stylesheet-function', testing result = ('') and ns-scope: 'other-default-namespace'
          See for a more detailed description of the parameters and how this test works, the file system-property-100.xsl
      </description>
      <created by="Abel Braaksma" on="2015-09-30"/>
      <dependencies>
         <spec value="XSLT30+"/>
      </dependencies>
      <test>
         <stylesheet file="system-property-100.xsl"/>
         <param static="yes" name="property" select="'xsd-version'"/>
         <param static="yes" name="result" select="''"/>
         <param static="yes" name="method" select="'stylesheet-function'"/>
         <param static="yes" name="ns-scope" select="'other-default-namespace'"/>
      </test>
      <result>
         <all-of>
            <assert>/output/@evaluation-method = 'stylesheet-function'</assert>
            <assert>every $res in /output/global-variables/static-context/* satisfies $res = ('')</assert>
            <assert>every $res in /output/global-variables/dynamic-context/* satisfies $res = ('')</assert>
            <assert>every $eval in (for $i in 1 to 6 return /output/global-variables/static-context/*[$i] = /output/global-variables/dynamic-context/*[$i]) satisfies $eval</assert>
            <assert>every $res in /output/static-context/result satisfies $res = ('')</assert>
            <assert>every $res in /output/dynamic-context/result satisfies $res = ('')</assert>
            <assert>every $res in /output/static-context/result-all/tokenize(., ' ') satisfies $res = ('')</assert>
            <assert>every $res in /output/dynamic-context/result-all/tokenize(., ' ') satisfies $res = ('')</assert>
         </all-of>
      </result>
   </test-case>
   
   <test-case name="system-property-109l">
      <description>
          System-property 'other:xsd-version' with method set to 'stylesheet-function', testing result = ('1.0', '1.1') and ns-scope: 'switch-xsl-namespace'
          See for a more detailed description of the parameters and how this test works, the file system-property-100.xsl
      </description>
      <created by="Abel Braaksma" on="2015-09-30"/>
      <dependencies>
         <spec value="XSLT30+"/>
      </dependencies>
      <test>
         <stylesheet file="system-property-100.xsl"/>
         <param static="yes" name="property" select="'other:xsd-version'"/>
         <param static="yes" name="result" select="'1.0', '1.1'"/>
         <param static="yes" name="method" select="'stylesheet-function'"/>
         <param static="yes" name="ns-scope" select="'switch-xsl-namespace'"/>
      </test>
      <result>
         <all-of>
            <assert>/output/@evaluation-method = 'stylesheet-function'</assert>
            <assert>every $res in /output/global-variables/static-context/* satisfies $res = ('1.0', '1.1')</assert>
            <assert>every $res in /output/global-variables/dynamic-context/* satisfies $res = ('1.0', '1.1')</assert>
            <assert>every $eval in (for $i in 1 to 6 return /output/global-variables/static-context/*[$i] = /output/global-variables/dynamic-context/*[$i]) satisfies $eval</assert>
            <assert>every $res in /output/static-context/result satisfies $res = ('1.0', '1.1')</assert>
            <assert>every $res in /output/dynamic-context/result satisfies $res = ('1.0', '1.1')</assert>
            <assert>every $res in /output/static-context/result-all/tokenize(., ' ') satisfies $res = ('1.0', '1.1')</assert>
            <assert>every $res in /output/dynamic-context/result-all/tokenize(., ' ') satisfies $res = ('1.0', '1.1')</assert>
         </all-of>
      </result>
   </test-case>
   
   <test-case name="system-property-109m">
      <description>
          System-property 'xsl:xsd-version' with method set to 'tunneled', testing result = ('1.0', '1.1') and ns-scope: 'normal'
          See for a more detailed description of the parameters and how this test works, the file system-property-100.xsl
      </description>
      <created by="Abel Braaksma" on="2015-09-30"/>
      <dependencies>
         <spec value="XSLT30+"/>
      </dependencies>
      <test>
         <stylesheet file="system-property-100.xsl"/>
         <param static="yes" name="property" select="'xsl:xsd-version'"/>
         <param static="yes" name="result" select="'1.0', '1.1'"/>
         <param static="yes" name="method" select="'tunneled'"/>
         <param static="yes" name="ns-scope" select="'normal'"/>
      </test>
      <result>
         <all-of>
            <assert>/output/@evaluation-method = 'tunneled'</assert>
            <assert>every $res in /output/global-variables/static-context/* satisfies $res = ('1.0', '1.1')</assert>
            <assert>every $res in /output/global-variables/dynamic-context/* satisfies $res = ('1.0', '1.1')</assert>
            <assert>every $eval in (for $i in 1 to 6 return /output/global-variables/static-context/*[$i] = /output/global-variables/dynamic-context/*[$i]) satisfies $eval</assert>
            <assert>every $res in /output/static-context/result satisfies $res = ('1.0', '1.1')</assert>
            <assert>every $res in /output/dynamic-context/result satisfies $res = ('1.0', '1.1')</assert>
            <assert>every $res in /output/static-context/result-all/tokenize(., ' ') satisfies $res = ('1.0', '1.1')</assert>
            <assert>every $res in /output/dynamic-context/result-all/tokenize(., ' ') satisfies $res = ('1.0', '1.1')</assert>
         </all-of>
      </result>
   </test-case>
   
   <test-case name="system-property-109n">
      <description>
          System-property 'xsd-version' with method set to 'tunneled', testing result = ('') and ns-scope: 'other-default-namespace'
          See for a more detailed description of the parameters and how this test works, the file system-property-100.xsl
      </description>
      <created by="Abel Braaksma" on="2015-09-30"/>
      <dependencies>
         <spec value="XSLT30+"/>
      </dependencies>
      <test>
         <stylesheet file="system-property-100.xsl"/>
         <param static="yes" name="property" select="'xsd-version'"/>
         <param static="yes" name="result" select="''"/>
         <param static="yes" name="method" select="'tunneled'"/>
         <param static="yes" name="ns-scope" select="'other-default-namespace'"/>
      </test>
      <result>
         <all-of>
            <assert>/output/@evaluation-method = 'tunneled'</assert>
            <assert>every $res in /output/global-variables/static-context/* satisfies $res = ('')</assert>
            <assert>every $res in /output/global-variables/dynamic-context/* satisfies $res = ('')</assert>
            <assert>every $eval in (for $i in 1 to 6 return /output/global-variables/static-context/*[$i] = /output/global-variables/dynamic-context/*[$i]) satisfies $eval</assert>
            <assert>every $res in /output/static-context/result satisfies $res = ('')</assert>
            <assert>every $res in /output/dynamic-context/result satisfies $res = ('')</assert>
            <assert>every $res in /output/static-context/result-all/tokenize(., ' ') satisfies $res = ('')</assert>
            <assert>every $res in /output/dynamic-context/result-all/tokenize(., ' ') satisfies $res = ('')</assert>
         </all-of>
      </result>
   </test-case>
   
   <test-case name="system-property-109o">
      <description>
          System-property 'other:xsd-version' with method set to 'tunneled', testing result = ('1.0', '1.1') and ns-scope: 'switch-xsl-namespace'
          See for a more detailed description of the parameters and how this test works, the file system-property-100.xsl
      </description>
      <created by="Abel Braaksma" on="2015-09-30"/>
      <dependencies>
         <spec value="XSLT30+"/>
      </dependencies>
      <test>
         <stylesheet file="system-property-100.xsl"/>
         <param static="yes" name="property" select="'other:xsd-version'"/>
         <param static="yes" name="result" select="'1.0', '1.1'"/>
         <param static="yes" name="method" select="'tunneled'"/>
         <param static="yes" name="ns-scope" select="'switch-xsl-namespace'"/>
      </test>
      <result>
         <all-of>
            <assert>/output/@evaluation-method = 'tunneled'</assert>
            <assert>every $res in /output/global-variables/static-context/* satisfies $res = ('1.0', '1.1')</assert>
            <assert>every $res in /output/global-variables/dynamic-context/* satisfies $res = ('1.0', '1.1')</assert>
            <assert>every $eval in (for $i in 1 to 6 return /output/global-variables/static-context/*[$i] = /output/global-variables/dynamic-context/*[$i]) satisfies $eval</assert>
            <assert>every $res in /output/static-context/result satisfies $res = ('1.0', '1.1')</assert>
            <assert>every $res in /output/dynamic-context/result satisfies $res = ('1.0', '1.1')</assert>
            <assert>every $res in /output/static-context/result-all/tokenize(., ' ') satisfies $res = ('1.0', '1.1')</assert>
            <assert>every $res in /output/dynamic-context/result-all/tokenize(., ' ') satisfies $res = ('1.0', '1.1')</assert>
         </all-of>
      </result>
   </test-case>



   <test-case name="system-property-999gen">
      <description>
         NOTE: this test is only here to check if test-gen results are available, it does not test a specific XSLT feature
         
         Tests if the test-generator works and whether all auto-generated tests have been added in the testset.
         Note: the test-generator generates XML in no-namespace and is designed that all tests matching /*/test-case
         should be added. The test numbers start with 101 and end with 100+ count(available-systemproperties()), minus 
         the system properties xsl:product, xsl:vendor, xsl:vendor-url, which is 9, and each subtest numbered a-g.
      </description>
      <created by="Abel Braaksma" on="2015-09-30"/>
      <environment>
         <resource file="_system-property-test-set.xml" uri="_system-property-test-set.xml"/>
      </environment>
      <dependencies>
         <spec value="XSLT30+"/>         
      </dependencies>
      <test>
         <stylesheet file="_generate-property-tests.xsl"/>         
      </test>
      <result>
         <all-of>
            <!-- note: the result of this test is NOT in the test-case namespace, it is in no-namespace -->
            <assert>count(/*/test-case) = 15 * 9</assert>
            <!-- check test names -->
            <assert>every $result in (for $i in 1 to 9 return (for $a in 97 to 114 return not(empty(/*/test-case[starts-with(@name, 'system-property-10' || $i)])))) satisfies $result</assert>
            <!-- the following 9 tests test the presence of property names in the resulting test sets -->
            <assert>count(/*/test-case/test/param[@select/(ends-with(., 'version''') and not(contains(., 'xsd')) and not(contains(., 'xpath')))]) = 15</assert>
            <assert>count(/*/test-case/test/param[@select/ends-with(., 'is-schema-aware''')]) = 15</assert>
            <assert>count(/*/test-case/test/param[@select/ends-with(., 'supports-serialization''')]) = 15</assert>
            <assert>count(/*/test-case/test/param[@select/ends-with(., 'supports-backwards-compatibility''')]) = 15</assert>
            <assert>count(/*/test-case/test/param[@select/ends-with(., 'supports-namespace-axis''')]) = 15</assert>
            <assert>count(/*/test-case/test/param[@select/ends-with(., 'supports-streaming''')]) = 15</assert>
            <assert>count(/*/test-case/test/param[@select/ends-with(., 'supports-dynamic-evaluation''')]) = 15</assert>
            <assert>count(/*/test-case/test/param[@select/ends-with(., 'xpath-version''')]) = 15</assert>
            <assert>count(/*/test-case/test/param[@select/ends-with(., 'xsd-version''')]) = 15</assert>
            <!-- test if they are all in this test set (xpath assumes environment for available documents can reach the resources) -->
            <assert>
               every $name in /*/test-case/@name 
               satisfies 
                  exists(doc('_system-property-test-set.xml')
                  /*/*:test-case/@name[. = $name])</assert>
         </all-of>
      </result>
   </test-case>

</test-set>
