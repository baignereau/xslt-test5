<?xml version="1.0" encoding="UTF-8"?>
<test-set xmlns:xs="http://www.w3.org/2001/XMLSchema"
          xmlns="http://www.w3.org/2012/10/xslt-test-catalog"
          name="stream">
   <description>
   		Tests the xsl:stream instruction introduced in XSLT 3.0.
   		The tests in this section focus on variants of the xsl:stream instruction itself,
   		and not on testing the streamability of its content.
   </description>

   <environment name="stream-A">
     <stylesheet file="stream-A.xsl"/>
   </environment>
   
   <environment name="stream-B">
     <stylesheet file="stream-B.xsl"/>
     <schema role="stylesheet-import" file="books.xsd"/> 
   </environment>
   
   <dependencies>
      <spec value="XSLT30+"/>
      <feature value="streaming"/>
   </dependencies>
   
   <test-case name="stream-001">
      <description>Test empty xsl:stream instruction</description>
      <created by="Michael Kay" on="2013-12-03"/>
      <environment ref="stream-A"/>
      <test>
         <initial-template name="s-001"/>
      </test>
      <result>
         <assert-xml><![CDATA[<out/>]]></assert-xml>
      </result>
   </test-case>
   
   <test-case name="stream-002">
      <description>Test xsl:stream instruction, non-existent document</description>
      <created by="Michael Kay" on="2013-12-03"/>
      <environment ref="stream-A"/>
      <test>
         <initial-template name="s-002"/>
      </test>
      <result>
         <error code="FODC0002"/>
      </result>
   </test-case>
   
   <test-case name="stream-003">
      <description>Test xsl:stream instruction, computed document URI</description>
      <created by="Michael Kay" on="2013-12-03"/>
      <environment ref="stream-A"/>
      <test>
         <initial-template name="s-003"/>
      </test>
      <result>
         <assert>/out/BOOKLIST</assert>
      </result>
   </test-case>
   
   <test-case name="stream-004">
      <description>Test xsl:stream instruction, use base URI</description>
      <created by="Michael Kay" on="2013-12-03"/>
      <environment ref="stream-A"/>
      <test>
         <initial-template name="s-004"/>
      </test>
      <result>
         <assert>/out/*:catalog</assert>
      </result>
   </test-case>
   
   <test-case name="stream-005">
      <description>Context position is 1</description>
      <created by="Michael Kay" on="2013-12-03"/>
      <environment ref="stream-A"/>
      <test>
         <initial-template name="s-005"/>
      </test>
      <result>
         <all-of>
           <assert>/out/@position = "1"</assert>
           <assert>/out/@is-doc = "true"</assert>
           <assert>ends-with(/out/@base-uri, 'insn/stream/books.xml')</assert>
         </all-of>
      </result>
   </test-case>
   
   <test-case name="stream-006">
      <description>Test xsl:stream instruction, invalid URI</description>
      <created by="Michael Kay" on="2013-12-03"/>
      <environment ref="stream-A"/>
      <test>
         <initial-template name="s-006"/>
      </test>
      <result>
         <error code="FODC0005"/>
      </result>
   </test-case>
   
   <test-case name="stream-007">
      <description>Test xsl:stream instruction, use strip-space</description>
      <created by="Michael Kay" on="2013-12-03"/>
      <environment ref="stream-A"/>
      <test>
         <initial-template name="s-007"/>
      </test>
      <result>
         <assert>/out = "0"</assert>
      </result>
   </test-case>
   
   <test-case name="stream-008">
      <description>Test xsl:stream instruction, use preserve-space</description>
      <created by="Michael Kay" on="2013-12-03"/>
      <environment ref="stream-A"/>
      <test>
         <initial-template name="s-008"/>
      </test>
      <result>
         <assert>/out = "4"</assert>
      </result>
   </test-case>
   
   <test-case name="stream-009">
      <description>Test xsl:stream instruction, xsl:fallback child is ignored</description>
      <created by="Michael Kay" on="2013-12-03"/>
      <environment ref="stream-A"/>
      <test>
         <initial-template name="s-009"/>
      </test>
      <result>
         <assert>/out = "4"</assert>
      </result>
   </test-case>
   
   <test-case name="stream-010">
      <description>Test xsl:stream instruction, two nested streams over the same document</description>
      <created by="Michael Kay" on="2013-12-03"/>
      <environment ref="stream-A"/>
      <test>
         <initial-template name="s-010"/>
      </test>
      <result>
         <all-of>
           <assert>/out/cat[@code="P"][@count="4"]</assert>
           <assert>/out/cat[@code="MMP"][@count="1"]</assert>
           <assert>/out/cat[@code="H"][@count="1"]</assert>
         </all-of>  
      </result>
   </test-case>
   
   <test-case name="stream-011">
      <description>Test xsl:stream instruction, validation="strip"</description>
      <created by="Michael Kay" on="2013-12-03"/>
      <environment ref="stream-A"/>
      <test>
         <initial-template name="s-011"/>
      </test>
      <result>
         <assert>/out = "true"</assert>
      </result>
   </test-case>
   
   <test-case name="stream-012">
      <description>Test xsl:stream instruction, validation="preserve"</description>
      <created by="Michael Kay" on="2013-12-03"/>
      <environment ref="stream-A"/>
      <test>
         <initial-template name="s-012"/>
      </test>
      <result>
         <assert>/out = "true"</assert>
      </result>
   </test-case>

   <test-case name="stream-013">
      <description>Test xsl:stream instruction, validation="lax"</description>
      <created by="Michael Kay" on="2013-12-03"/>
      <environment ref="stream-A"/>
      <test>
         <initial-template name="s-013"/>
      </test>
      <result>
         <assert>/out = "true"</assert>
      </result>
   </test-case>
   
   <test-case name="stream-101">
      <description>Test xsl:stream instruction, validation="strict"</description>
      <created by="Michael Kay" on="2013-12-03"/>
      <environment ref="stream-B"/>
      <dependencies>
        <feature value="schema_aware"/>
      </dependencies>
      <test>
         <initial-template name="s-101"/>
      </test>
      <result>
         <assert>/out = "true"</assert>
      </result>
   </test-case>
   
   <test-case name="stream-102">
      <description>Test xsl:stream instruction, validation="strict" failure</description>
      <created by="Michael Kay" on="2013-12-03"/>
      <environment ref="stream-B"/>
      <dependencies>
        <feature value="schema_aware"/>
      </dependencies>
      <test>
         <initial-template name="s-102"/>
      </test>
      <result>
         <error code="XTTE1510"/>
      </result>
   </test-case>
   
   <test-case name="stream-103">
      <description>Test xsl:stream instruction, validation by type</description>
      <created by="Michael Kay" on="2013-12-03"/>
      <environment ref="stream-B"/>
      <dependencies>
        <feature value="schema_aware"/>
      </dependencies>
      <test>
         <initial-template name="s-103"/>
      </test>
      <result>
         <assert>/out = "true"</assert>
      </result>
   </test-case>
   
   <test-case name="stream-104">
      <description>Test xsl:stream instruction, validation by type, invalid</description>
      <created by="Michael Kay" on="2013-12-03"/>
      <environment ref="stream-B"/>
      <dependencies>
        <feature value="schema_aware"/>
      </dependencies>
      <test>
         <initial-template name="s-104"/>
      </test>
      <result>
         <error code="XTTE1540"/>
      </result>
   </test-case>
   
   <test-case name="stream-105">
      <description>Test xsl:stream instruction, partial validation, valid</description>
      <created by="Michael Kay" on="2013-12-03"/>
      <environment ref="stream-B"/>
      <dependencies>
        <feature value="schema_aware"/>
      </dependencies>
      <test>
         <initial-template name="s-105"/>
      </test>
      <result>
         <assert>/out/ITEM/TITLE = "Pride and Prejudice"</assert>
      </result>
   </test-case>
   
   <test-case name="stream-106">
      <description>Test xsl:stream instruction, partial validation, invalid</description>
      <created by="Michael Kay" on="2013-12-03"/>
      <environment ref="stream-B"/>
      <dependencies>
        <feature value="schema_aware"/>
      </dependencies>
      <test>
         <initial-template name="s-106"/>
      </test>
      <result>
         <error code="XTTE1510"/>
      </result>
   </test-case>
   
   <test-case name="stream-107">
      <description>Test xsl:stream called within a function</description>
      <created by="Michael Kay" on="2015-07-09"/>
      <environment ref="stream-B"/>
      <test>
         <initial-template name="s-107"/>
      </test>
      <result>
         <assert>/out = '9.06'</assert>
      </result>
   </test-case>
   
   <test-case name="stream-108">
      <description>Test xsl:stream called with early termination</description>
      <created by="Michael Kay" on="2015-07-09"/>
      <environment ref="stream-B"/>
      <test>
         <initial-template name="s-108"/>
      </test>
      <result>
         <assert>/out = 'true'</assert>
      </result>
   </test-case>
   
   <test-case name="stream-109">
      <description>Test xsl:stream called within a function calling a constructor function</description>
      <created by="Michael Kay" on="2015-07-09"/>
      <environment ref="stream-B"/>
      <test>
         <initial-template name="s-109"/>
      </test>
      <result>
         <assert>/out = '9.06'</assert>
      </result>
   </test-case>
   
   <test-case name="stream-200">
      <description>Extract two parts from a partwise MusicXML score</description>
      <created by="Michael Kay" on="2016-02-13"/>
      <test>
         <stylesheet file="stream-200.xsl"/>
      </test>
      <result>
         <all-of>
            <assert>exists(//part[@id="P1"])</assert>
            <assert>exists(//part[@id="P2"])</assert>
            <assert>empty(//part[@id="P3"])</assert>
            <assert>empty(//part[@id="P4"])</assert>
         </all-of>
      </result>
   </test-case>
   
   <test-case name="stream-201">
      <description>Extract two parts from a partwise MusicXML score: variant using predicate in pattern</description>
      <created by="Michael Kay" on="2016-02-13"/>
      <test>
         <stylesheet file="stream-201.xsl"/>
      </test>
      <result>
         <all-of>
            <assert>exists(//part[@id="P1"])</assert>
            <assert>exists(//part[@id="P2"])</assert>
            <assert>empty(//part[@id="P3"])</assert>
            <assert>empty(//part[@id="P4"])</assert>
         </all-of>
      </result>
   </test-case>
   
   <test-case name="stream-202">
      <description>Extract two parts from a partwise MusicXML score: variant using xs:string in map</description>
      <created by="Michael Kay" on="2016-02-13"/>
      <test>
         <stylesheet file="stream-202.xsl"/>
      </test>
      <result>
         <all-of>
            <assert>exists(//part[@id="P1"])</assert>
            <assert>exists(//part[@id="P2"])</assert>
            <assert>empty(//part[@id="P3"])</assert>
            <assert>empty(//part[@id="P4"])</assert>
         </all-of>
      </result>
   </test-case>
   
   <test-case name="stream-203">
      <description>Extract two parts from a partwise MusicXML score: cannot put xs:untypedAtomic in map that expects xs:string</description>
      <created by="Michael Kay" on="2016-02-13"/>
      <test>
         <stylesheet file="stream-203.xsl"/>
      </test>
      <result>
         <error code="XPTY0004"/>
      </result>
   </test-case>
   
   <test-case name="stream-204">
      <description>Extract two parts from a partwise MusicXML score: variant with non-motionless pattern in accumulator rule</description>
      <created by="Michael Kay" on="2016-02-13"/>
      <test>
         <stylesheet file="stream-204.xsl"/>
      </test>
      <result>
         <error code="XTSE3430"/>
      </result>
   </test-case>
   
   <test-case name="stream-210">
      <description>xsl:stream reading the same input file more than once</description>
      <created by="Michael Kay after Martin Honnen" on="2016-02-19"/>
      <test>
         <stylesheet file="stream-210.xsl"/>
      </test>
      <result>
         <all-of>
            <assert-result-document uri="product-1-result.xml">
               <assert-xml><![CDATA[<root xmlns:xs="http://www.w3.org/2001/XMLSchema"><product type="product-1"><foo>BOOT</foo></product><product type="product-1"><foo>HAT</foo></product></root>]]></assert-xml>
            </assert-result-document>
            <assert-result-document uri="product-3-result.xml">
               <assert-xml><![CDATA[<root xmlns:xs="http://www.w3.org/2001/XMLSchema"><product type="product-3"><foo>SCARF</foo></product></root>]]></assert-xml>
            </assert-result-document>
         </all-of>
      </result>
   </test-case>
   
   <test-case name="stream-500">
      <description>Test xsl:stream instruction. From a Saxon 9.6 bug report (bug 2389).</description>
      <created by="Michael Kay" on="2015-06-05"/>
      <test>
         <stylesheet file="stream-500.xsl"/>
         <initial-template name="main"/>
      </test>
      <result>
         <assert-xml><![CDATA[<root xmlns="urn:gba:sqg"
      xmlns:ds="http://www.w3.org/2000/09/xmldsig#"
      xmlns:xenc="http://www.w3.org/2001/04/xmlenc#"><body><cases module="17/7" pseud_procedure="17/5_17/7"
      ><case><patient twodigitik="10"><pseudonym V="1234567890" alg="0"/></patient><test id="1"/></case
	  ><case><patient twodigitik="10"><pseudonym V="0987654321" alg="0"/></patient><test id="2"/></case
	  ></cases></body></root>]]></assert-xml>
      </result>
   </test-case>

</test-set>
