<?xml version="1.0" encoding="UTF-8"?>
<test-set xmlns:xs="http://www.w3.org/2001/XMLSchema"
          xmlns="http://www.w3.org/2012/10/xslt-test-catalog"
          name="sx-GeneralComp-ge">
   <description>">=" operator with streaming</description>
   
   <environment name="sx-gc-ge-A">
     <stylesheet file="sx-gc-ge-A.xsl"/>
   </environment>
   
   <environment name="sx-gc-ge-B">
     <stylesheet file="sx-gc-ge-B.xsl"/>
   </environment>
   
   <dependencies>
      <spec value="XSLT30+"/>
      <feature value="streaming"/>
   </dependencies>
   
   <test-case name="sx-gc-ge-003">
      <description>Basic Test of xsl:stream instruction with ">="</description>
      <created by="Michael Kay" on="2013-12-14"/>
      <environment ref="sx-gc-ge-A"/>
      <test>
         <initial-template name="s-003"/>
      </test>
      <result>
         <assert>/out = 'true'</assert>
      </result>
   </test-case>

   <test-case name="sx-gc-ge-004">
      <description>Test of xsl:stream instruction with ">=", filtered with a motionless predicate</description>
      <created by="Michael Kay" on="2013-12-14"/>
      <environment ref="sx-gc-ge-A"/>
      <test>
         <initial-template name="s-004"/>
      </test>
      <result>
         <assert>/out = 'true'</assert>
      </result>
   </test-case>

   <test-case name="sx-gc-ge-005">
      <description>Test of xsl:stream instruction with ">=", filtered with a positional predicate</description>
      <created by="Michael Kay" on="2013-12-14"/>
      <environment ref="sx-gc-ge-A"/>
      <test>
         <initial-template name="s-005"/>
      </test>
      <result>
         <assert>/out = 'true'</assert>
      </result>
   </test-case>

   <test-case name="sx-gc-ge-006">
      <description>Test of xsl:stream instruction with ">=", filtered with a positional predicate</description>
      <created by="Michael Kay" on="2013-12-14"/>
      <environment ref="sx-gc-ge-A"/>
      <test>
         <initial-template name="s-006"/>
      </test>
      <result>
         <assert>/out = 'true'</assert>
      </result>
   </test-case>

   <test-case name="sx-gc-ge-007">
      <description>Test of xsl:stream instruction with ">=", filtered with a positional predicate</description>
      <created by="Michael Kay" on="2013-12-14"/>
      <environment ref="sx-gc-ge-A"/>
      <test>
         <initial-template name="s-007"/>
      </test>
      <result>
         <assert>/out = 'true'</assert>
      </result>
   </test-case>
   
   <test-case name="sx-gc-ge-008">
      <description>Test of xsl:stream instruction with ">=", filtered with data() to make the predicates motionless</description>
      <created by="Michael Kay" on="2013-12-14"/>
      <environment ref="sx-gc-ge-A"/>
      <test>
         <initial-template name="s-008"/>
      </test>
      <result>
         <assert>/out = 'true'</assert>
      </result>
   </test-case>
   
   <test-case name="sx-gc-ge-009">
      <description>Test of xsl:stream instruction with ">=", filtered with text() to make the predicates motionless</description>
      <created by="Michael Kay" on="2013-12-14"/>
      <environment ref="sx-gc-ge-A"/>
      <test>
         <initial-template name="s-009"/>
      </test>
      <result>
         <assert>/out = 'true'</assert>
      </result>
   </test-case>
   
   <test-case name="sx-gc-ge-010">
      <description>Test of xsl:stream instruction with ">=", filtered with number() to make the predicates motionless</description>
      <created by="Michael Kay" on="2013-12-14"/>
      <environment ref="sx-gc-ge-A"/>
      <test>
         <initial-template name="s-010"/>
      </test>
      <result>
         <assert>/out = 'true'</assert>
      </result>
   </test-case>
   
   <test-case name="sx-gc-ge-011">
      <description>">=" selecting nothing, returning the $zero case</description>
      <created by="Michael Kay" on="2013-12-14"/>
      <environment ref="sx-gc-ge-A"/>
      <test>
         <initial-template name="s-011"/>
      </test>
      <result>
         <assert>/out = 'false'</assert>
      </result>
   </test-case>
   
   <test-case name="sx-gc-ge-012">
      <description>">=" selecting both streamed nodes and literals</description>
      <created by="Michael Kay" on="2013-12-14"/>
      <environment ref="sx-gc-ge-A"/>
      <test>
         <initial-template name="s-012"/>
      </test>
      <result>
         <assert>/out = 'true'</assert>
      </result>
   </test-case>
   
   <test-case name="sx-gc-ge-013">
      <description>">=" selecting both streamed nodes and literals while also filtering</description>
      <created by="Michael Kay" on="2013-12-14"/>
      <environment ref="sx-gc-ge-A"/>
      <test>
         <initial-template name="s-013"/>
      </test>
      <result>
         <assert>/out = 'true'</assert>
      </result>
   </test-case>
   
   <test-case name="sx-gc-ge-015">
      <description>Test of xsl:stream instruction with ">=" of a computed value</description>
      <created by="Michael Kay" on="2013-12-14"/>
      <environment ref="sx-gc-ge-A"/>
      <test>
         <initial-template name="s-015"/>
      </test>
      <result>
         <assert>/out = 'true'</assert>
      </result>
   </test-case>
   
   <test-case name="sx-gc-ge-016">
      <description>Test of xsl:stream instruction with ">=" of a computed value</description>
      <created by="Michael Kay" on="2013-12-14"/>
      <environment ref="sx-gc-ge-A"/>
      <test>
         <initial-template name="s-016"/>
      </test>
      <result>
         <assert>/out = 'true'</assert>
      </result>
   </test-case>
   
   <test-case name="sx-gc-ge-017">
      <description>Test of xsl:stream instruction with ">=" using copy-of to make it streamable</description>
      <created by="Michael Kay" on="2013-12-14"/>
      <environment ref="sx-gc-ge-A"/>
      <test>
         <initial-template name="s-017"/>
      </test>
      <result>
         <assert>/out = 'true'</assert>
      </result>
   </test-case>
   
   <test-case name="sx-gc-ge-018">
      <description>Test of xsl:stream instruction with ">=" over attribute values</description>
      <created by="Michael Kay" on="2013-12-14"/>
      <environment ref="sx-gc-ge-A"/>
      <test>
         <initial-template name="s-018"/>
      </test>
      <result>
         <assert>/out = 'true'</assert>
      </result>
   </test-case>
   
   <test-case name="sx-gc-ge-019">
      <description>Test of xsl:stream instruction with ">=" over attribute values, filtered</description>
      <created by="Michael Kay" on="2013-12-14"/>
      <environment ref="sx-gc-ge-A"/>
      <test>
         <initial-template name="s-019"/>
      </test>
      <result>
         <assert>/out = 'true'</assert>
      </result>
   </test-case>
   
   <test-case name="sx-gc-ge-020">
      <description>">=" over attribute values, computed</description>
      <created by="Michael Kay" on="2013-12-14"/>
      <environment ref="sx-gc-ge-A"/>
      <test>
         <initial-template name="s-020"/>
      </test>
      <result>
         <assert>/out = 'true'</assert>
      </result>
   </test-case>
   
   <test-case name="sx-gc-ge-021">
      <description>">=" over values that depend on a condition</description>
      <created by="Michael Kay" on="2013-12-14"/>
      <environment ref="sx-gc-ge-A"/>
      <test>
         <initial-template name="s-021"/>
      </test>
      <result>
         <assert>/out = 'true'</assert>
      </result>
   </test-case>
   
   <test-case name="sx-gc-ge-022">
      <description>">=" with a loop used to compute each value</description>
      <created by="Michael Kay" on="2013-12-14"/>
      <environment ref="sx-gc-ge-A"/>
      <test>
         <initial-template name="s-022"/>
      </test>
      <result>
         <assert>/out = 'true'</assert>
      </result>
   </test-case>
   
   <test-case name="sx-gc-ge-023">
      <description>">=" over a crawling expression</description>
      <created by="Michael Kay" on="2013-12-14"/>
      <environment ref="sx-gc-ge-A"/>
      <test>
         <initial-template name="s-023"/>
      </test>
      <result>
         <assert>/out = 'true'</assert>
      </result>
   </test-case>
   
   <test-case name="sx-gc-ge-024">
      <description>"=" with a mix of untypedAtomic and numeric values</description>
      <created by="Michael Kay" on="2014-05-12"/>
      <environment ref="sx-gc-ge-A"/>
      <test>
         <initial-template name="s-024"/>
      </test>
      <result>
         <assert>/out = 'true'</assert>
      </result>
   </test-case>
   
   <test-case name="sx-gc-ge-025">
      <description>">=" with a mix of untypedAtomic and numeric values. True result</description>
      <created by="Michael Kay" on="2014-05-12"/>
      <environment ref="sx-gc-ge-A"/>
      <test>
         <initial-template name="s-025"/>
      </test>
      <result>
         <assert>/out = 'true'</assert>
      </result>
   </test-case>  
   
   <test-case name="sx-gc-ge-026">
      <description>">=" with a mix of untypedAtomic and numeric values. Error result</description>
      <created by="Michael Kay" on="2014-05-12"/>
      <environment ref="sx-gc-ge-A"/>
      <test>
         <initial-template name="s-026"/>
      </test>
      <result>
         <error code="FORG0001"/>
      </result>
   </test-case>
   
   <test-case name="sx-gc-ge-027">
      <description>">=" comparing the incomparable. Error result</description>
      <created by="Michael Kay" on="2014-05-12"/>
      <environment ref="sx-gc-ge-A"/>
      <test>
         <initial-template name="s-027"/>
      </test>
      <result>
         <error code="XPTY0004"/>
      </result>
   </test-case>  
   
   <test-case name="sx-gc-ge-028">
      <description>">=" comparing double to decimal. Success result</description>
      <created by="Michael Kay" on="2014-05-12"/>
      <environment ref="sx-gc-ge-A"/>
      <test>
         <initial-template name="s-028"/>
      </test>
      <result>
         <assert>/out = 'true'</assert>
      </result>
   </test-case>            
   
    <test-case name="sx-gc-ge-103">
      <description>Basic Test of xsl:stream instruction with ">="</description>
      <created by="Michael Kay" on="2013-12-14"/>
      <environment ref="sx-gc-ge-B"/>
      <test>
         <initial-template name="s-003"/>
      </test>
      <result>
         <assert>/out = 'true'</assert>
      </result>
   </test-case>

   <test-case name="sx-gc-ge-104">
      <description>Test of xsl:stream instruction with ">=", filtered with a motionless predicate</description>
      <created by="Michael Kay" on="2013-12-14"/>
      <environment ref="sx-gc-ge-B"/>
      <test>
         <initial-template name="s-004"/>
      </test>
      <result>
         <assert>/out = 'true'</assert>
      </result>
   </test-case>

   <test-case name="sx-gc-ge-105">
      <description>Test of xsl:stream instruction with ">=", filtered with a positional predicate</description>
      <created by="Michael Kay" on="2013-12-14"/>
      <environment ref="sx-gc-ge-B"/>
      <test>
         <initial-template name="s-005"/>
      </test>
      <result>
         <assert>/out = 'true'</assert>
      </result>
   </test-case>

   <test-case name="sx-gc-ge-106">
      <description>Test of xsl:stream instruction with ">=", filtered with a positional predicate</description>
      <created by="Michael Kay" on="2013-12-14"/>
      <environment ref="sx-gc-ge-B"/>
      <test>
         <initial-template name="s-006"/>
      </test>
      <result>
         <assert>/out = 'true'</assert>
      </result>
   </test-case>

   <test-case name="sx-gc-ge-107">
      <description>Test of xsl:stream instruction with ">=", filtered with a positional predicate</description>
      <created by="Michael Kay" on="2013-12-14"/>
      <environment ref="sx-gc-ge-B"/>
      <test>
         <initial-template name="s-007"/>
      </test>
      <result>
         <assert>/out = 'true'</assert>
      </result>
   </test-case>
   
   <test-case name="sx-gc-ge-108">
      <description>Test of xsl:stream instruction with ">=", filtered with data() to make the predicates motionless</description>
      <created by="Michael Kay" on="2013-12-14"/>
      <environment ref="sx-gc-ge-B"/>
      <test>
         <initial-template name="s-008"/>
      </test>
      <result>
         <assert>/out = 'true'</assert>
      </result>
   </test-case>
   
   <test-case name="sx-gc-ge-109">
      <description>Test of xsl:stream instruction with ">=", filtered with text() to make the predicates motionless</description>
      <created by="Michael Kay" on="2013-12-14"/>
      <environment ref="sx-gc-ge-B"/>
      <test>
         <initial-template name="s-009"/>
      </test>
      <result>
         <assert>/out = 'true'</assert>
      </result>
   </test-case>
   
   <test-case name="sx-gc-ge-110">
      <description>Test of xsl:stream instruction with ">=", filtered with number() to make the predicates motionless</description>
      <created by="Michael Kay" on="2013-12-14"/>
      <environment ref="sx-gc-ge-B"/>
      <test>
         <initial-template name="s-010"/>
      </test>
      <result>
         <assert>/out = 'true'</assert>
      </result>
   </test-case>
   
   <test-case name="sx-gc-ge-111">
      <description>">=" selecting nothing, returning the $zero case</description>
      <created by="Michael Kay" on="2013-12-14"/>
      <environment ref="sx-gc-ge-B"/>
      <test>
         <initial-template name="s-011"/>
      </test>
      <result>
         <assert>/out = 'false'</assert>
      </result>
   </test-case>
   
   <test-case name="sx-gc-ge-112">
      <description>">=" selecting both streamed nodes and literals</description>
      <created by="Michael Kay" on="2013-12-14"/>
      <environment ref="sx-gc-ge-B"/>
      <test>
         <initial-template name="s-012"/>
      </test>
      <result>
         <assert>/out = 'true'</assert>
      </result>
   </test-case>
   
   <test-case name="sx-gc-ge-113">
      <description>">=" selecting both streamed nodes and literals while also filtering</description>
      <created by="Michael Kay" on="2013-12-14"/>
      <environment ref="sx-gc-ge-B"/>
      <test>
         <initial-template name="s-013"/>
      </test>
      <result>
         <assert>/out = 'true'</assert>
      </result>
   </test-case>
   
   <test-case name="sx-gc-ge-115">
      <description>Test of xsl:stream instruction with ">=" of a computed value</description>
      <created by="Michael Kay" on="2013-12-14"/>
      <environment ref="sx-gc-ge-B"/>
      <test>
         <initial-template name="s-015"/>
      </test>
      <result>
         <assert>/out = 'true'</assert>
      </result>
   </test-case>
   
   <test-case name="sx-gc-ge-116">
      <description>Test of xsl:stream instruction with ">=" of a computed value</description>
      <created by="Michael Kay" on="2013-12-14"/>
      <environment ref="sx-gc-ge-B"/>
      <test>
         <initial-template name="s-016"/>
      </test>
      <result>
         <assert>/out = 'true'</assert>
      </result>
   </test-case>
   
   <test-case name="sx-gc-ge-117">
      <description>Test of xsl:stream instruction with ">=" using copy-of to make it streamable</description>
      <created by="Michael Kay" on="2013-12-14"/>
      <environment ref="sx-gc-ge-B"/>
      <test>
         <initial-template name="s-017"/>
      </test>
      <result>
         <assert>/out = 'true'</assert>
      </result>
   </test-case>
   
   <test-case name="sx-gc-ge-118">
      <description>Test of xsl:stream instruction with ">=" over attribute values</description>
      <created by="Michael Kay" on="2013-12-14"/>
      <environment ref="sx-gc-ge-B"/>
      <test>
         <initial-template name="s-018"/>
      </test>
      <result>
         <assert>/out = 'true'</assert>
      </result>
   </test-case>
   
   <test-case name="sx-gc-ge-119">
      <description>Test of xsl:stream instruction with ">=" over attribute values, filtered</description>
      <created by="Michael Kay" on="2013-12-14"/>
      <environment ref="sx-gc-ge-B"/>
      <test>
         <initial-template name="s-019"/>
      </test>
      <result>
         <assert>/out = 'true'</assert>
      </result>
   </test-case>
   
   <test-case name="sx-gc-ge-120">
      <description>">=" over attribute values, computed</description>
      <created by="Michael Kay" on="2013-12-14"/>
      <environment ref="sx-gc-ge-B"/>
      <test>
         <initial-template name="s-020"/>
      </test>
      <result>
         <assert>/out = 'true'</assert>
      </result>
   </test-case>
   
   <test-case name="sx-gc-ge-121">
      <description>">=" over values that depend on a condition</description>
      <created by="Michael Kay" on="2013-12-14"/>
      <environment ref="sx-gc-ge-B"/>
      <test>
         <initial-template name="s-021"/>
      </test>
      <result>
         <assert>/out = 'true'</assert>
      </result>
   </test-case>
   
   <test-case name="sx-gc-ge-122">
      <description>">=" with a loop used to compute each value</description>
      <created by="Michael Kay" on="2013-12-14"/>
      <environment ref="sx-gc-ge-B"/>
      <test>
         <initial-template name="s-022"/>
      </test>
      <result>
         <assert>/out = 'true'</assert>
      </result>
   </test-case>
   
   <test-case name="sx-gc-ge-123">
      <description>">=" over a crawling expression</description>
      <created by="Michael Kay" on="2013-12-14"/>
      <environment ref="sx-gc-ge-B"/>
      <test>
         <initial-template name="s-023"/>
      </test>
      <result>
         <assert>/out = 'true'</assert>
      </result>
   </test-case>
   
   <test-case name="sx-gc-ge-124">
      <description>"=" with a mix of untypedAtomic and numeric values</description>
      <created by="Michael Kay" on="2014-05-12"/>
      <environment ref="sx-gc-ge-B"/>
      <test>
         <initial-template name="s-024"/>
      </test>
      <result>
         <assert>/out = 'true'</assert>
      </result>
   </test-case>
   
   <test-case name="sx-gc-ge-125">
      <description>">=" with a mix of untypedAtomic and numeric values. True result</description>
      <created by="Michael Kay" on="2014-05-12"/>
      <environment ref="sx-gc-ge-B"/>
      <test>
         <initial-template name="s-025"/>
      </test>
      <result>
         <assert>/out = 'true'</assert>
      </result>
   </test-case>  
   
   <test-case name="sx-gc-ge-126">
      <description>">=" with a mix of untypedAtomic and numeric values. Error result</description>
      <created by="Michael Kay" on="2014-05-12"/>
      <environment ref="sx-gc-ge-B"/>
      <test>
         <initial-template name="s-026"/>
      </test>
      <result>
         <error code="FORG0001"/>
      </result>
   </test-case>
   
   <test-case name="sx-gc-ge-127">
      <description>">=" comparing the incomparable. Error result</description>
      <created by="Michael Kay" on="2014-05-12"/>
      <environment ref="sx-gc-ge-B"/>
      <test>
         <initial-template name="s-027"/>
      </test>
      <result>
         <error code="XPTY0004"/>
      </result>
   </test-case>  
   
   <test-case name="sx-gc-ge-128">
      <description>">=" comparing double to decimal. Success result</description>
      <created by="Michael Kay" on="2014-05-12"/>
      <environment ref="sx-gc-ge-B"/>
      <test>
         <initial-template name="s-028"/>
      </test>
      <result>
         <assert>/out = 'true'</assert>
      </result>
   </test-case>   

  

   <test-case name="sx-gc-ge-901">
      <description>Test of xsl:stream instruction with ">=", filtered with predicate that atomizes.</description>
      <created by="Michael Kay" on="2013-12-14"/>
      <test>
         <stylesheet file="sx-gc-ge-901.xsl"/>
         <initial-template name="main"/>
      </test>
      <result>
         <error code="XTSE3430"/>
      </result>
   </test-case>
   
   <test-case name="sx-gc-ge-902">
      <description>Test of xsl:stream instruction with ">=", filtered with predicate that uses last().</description>
      <created by="Michael Kay" on="2013-12-14"/>
      <test>
         <stylesheet file="sx-gc-ge-902.xsl"/>
         <initial-template name="main"/>
      </test>
      <result>
         <error code="XTSE3430"/>
      </result>
   </test-case>


</test-set>