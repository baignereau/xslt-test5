<?xml version="1.0" encoding="UTF-8"?>
<test-set xmlns:xs="http://www.w3.org/2001/XMLSchema"
          xmlns="http://www.w3.org/2012/10/xslt-test-catalog"
          name="sf-boolean">
   <description>boolean() function with streaming. </description>
   
   <environment name="sf-boolean-A">
     <stylesheet file="sf-boolean-001.xsl"/>
   </environment>
   
   <dependencies>
      <spec value="XSLT30+"/>
      <feature value="streaming"/>
   </dependencies>
   
   <test-case name="sf-boolean-001">
      <description>Test of xsl:stream instruction with boolean(): count descendant nodes</description>
      <created by="Michael Kay" on="2012-11-07"/>
      <environment ref="sf-boolean-A"/>
      <test>
         <stylesheet file="sf-boolean-001.xsl"/>
         <initial-template name="c-001"/>
      </test>
      <result>
         <assert>/out = "true"</assert>
      </result>
   </test-case>

   <test-case name="sf-boolean-002">
      <description>Test of xsl:stream instruction with boolean(), filtered with motionless predicate</description>
      <created by="Michael Kay" on="2012-11-07"/>
      <environment ref="sf-boolean-A"/>
      <test>
         <initial-template name="c-002"/>
      </test>
      <result>
         <assert>/out = "true"</assert>
      </result>
   </test-case>
   
   <test-case name="sf-boolean-003">
      <description>Test of xsl:stream instruction with boolean(), applied to ancestor nodes</description>
      <created by="Michael Kay" on="2013-11-18"/>
      <environment ref="sf-boolean-A"/>
      <test>
         <initial-template name="c-003"/>
      </test>
      <result>
         <assert>/out = "true"</assert>
      </result>
   </test-case>
   
   <test-case name="sf-boolean-004">
      <description>Test of xsl:stream instruction with boolean(), applied to grounded consuming items</description>
      <created by="Michael Kay" on="2013-11-18"/>
      <environment ref="sf-boolean-A"/>
      <test>
         <initial-template name="c-004"/>
      </test>
      <result>
         <error code="FORG0006"/>
      </result>
   </test-case>
   
   <test-case name="sf-boolean-005">
      <description>Test of xsl:stream instruction with boolean(), applied to attributes of ancestor nodes</description>
      <created by="Michael Kay" on="2013-11-18"/>
      <environment ref="sf-boolean-A"/>
      <test>
         <initial-template name="c-005"/>
      </test>
      <result>
         <assert>/out = "true"</assert>
      </result>
   </test-case>
   
   <test-case name="sf-boolean-006">
      <description>Test of xsl:stream instruction with boolean(), applied to namespaces of ancestor nodes</description>
      <created by="Michael Kay" on="2013-11-18"/>
      <environment ref="sf-boolean-A"/>
      <test>
         <initial-template name="c-006"/>
      </test>
      <result>
         <assert>/out = "true"</assert>
      </result>
   </test-case>

   <test-case name="sf-boolean-007">
      <description>boolean() with empty downwards selection</description>
      <created by="Michael Kay" on="2013-11-18"/>
      <environment ref="sf-boolean-A"/>
      <test>
         <initial-template name="c-007"/>
      </test>
      <result>
         <assert>/out = "false"</assert>
      </result>
   </test-case>
   
   <test-case name="sf-boolean-008">
      <description>boolean() with empty downwards selection</description>
      <created by="Michael Kay" on="2013-11-18"/>
      <environment ref="sf-boolean-A"/>
      <test>
         <initial-template name="c-008"/>
      </test>
      <result>
         <assert>/out = "false"</assert>
      </result>
   </test-case> 
   
   <test-case name="sf-boolean-009">
      <description>boolean() with a striding(?) union</description>
      <created by="Michael Kay" on="2013-11-18"/>
      <environment ref="sf-boolean-A"/>
      <test>
         <initial-template name="c-009"/>
      </test>
      <result>
         <assert>/out = "true"</assert>
      </result>
   </test-case>
   
   <test-case name="sf-boolean-010">
      <description>boolean() with a crawling union</description>
      <created by="Michael Kay" on="2013-11-18"/>
      <environment ref="sf-boolean-A"/>
      <test>
         <initial-template name="c-010"/>
      </test>
      <result>
         <assert-xml><![CDATA[<out>true</out>]]></assert-xml>
      </result>
   </test-case> 
   
   <test-case name="sf-boolean-011">
      <description>simple motionless boolean()</description>
      <created by="Michael Kay" on="2013-11-18"/>
      <environment ref="sf-boolean-A"/>
      <test>
         <initial-template name="c-011"/>
      </test>
      <result>
         <assert>/out = "true"</assert>
      </result>
   </test-case>
   
   <test-case name="sf-boolean-012">
      <description>boolean() filtered grounded sequence</description>
      <created by="Michael Kay" on="2013-11-18"/>
      <environment ref="sf-boolean-A"/>
      <test>
         <initial-template name="c-012"/>
      </test>
      <result>
         <error code="FORG0006"/>
      </result>
   </test-case>
   
   <test-case name="sf-boolean-013">
      <description>boolean() filtered crawling sequence</description>
      <created by="Michael Kay" on="2013-11-18"/>
      <environment ref="sf-boolean-A"/>
      <test>
         <initial-template name="c-013"/>
      </test>
      <result>
         <assert>/out = "true"</assert>
      </result>
   </test-case>
   
   <test-case name="sf-boolean-014">
      <description>boolean() with twice-filtered crawling sequence</description>
      <created by="Michael Kay" on="2013-11-18"/>
      <environment ref="sf-boolean-A"/>
      <test>
         <initial-template name="c-014"/>
      </test>
      <result>
         <assert>/out = "true"</assert>
      </result>
   </test-case> 
   
   <test-case name="sf-boolean-015">
      <description>boolean() applied to a non-existent element</description>
      <created by="Michael Kay" on="2013-11-18"/>
      <environment ref="sf-boolean-A"/>
      <test>
         <initial-template name="c-015"/>
      </test>
      <result>
         <assert>/out = "false"</assert>
      </result>
   </test-case> 
   
   <test-case name="sf-boolean-016">
      <description>boolean() applied to an existent attribute (can exit early)</description>
      <created by="Michael Kay" on="2013-11-18"/>
      <environment ref="sf-boolean-A"/>
      <test>
         <initial-template name="c-016"/>
      </test>
      <result>
         <assert>/out = "true"</assert>
      </result>
   </test-case>
   
   <test-case name="sf-boolean-017">
      <description>boolean() and a boolean filter</description>
      <created by="Michael Kay" on="2013-11-18"/>
      <environment ref="sf-boolean-A"/>
      <test>
         <initial-template name="c-017"/>
      </test>
      <result>
         <assert>/out = "false"</assert>
      </result>
   </test-case>
   
   <test-case name="sf-boolean-018">
      <description>boolean() and both a positional and a boolean filter</description>
      <created by="Michael Kay" on="2013-11-18"/>
      <environment ref="sf-boolean-A"/>
      <test>
         <initial-template name="c-018"/>
      </test>
      <result>
         <assert>/out = "false"</assert>
      </result>
   </test-case> 
   
   <test-case name="sf-boolean-100">
      <description>boolean() on a sequence containing streamed nodes and atomic values</description>
      <created by="Michael Kay" on="2013-11-18"/>
      <environment ref="sf-boolean-A"/>
      <test>
         <initial-template name="c-100"/>
      </test>
      <result>
         <assert>/out = "true"</assert>
      </result>
   </test-case>
   
   <test-case name="sf-boolean-101">
      <description>boolean() on a sequence containing streamed nodes and atomic values</description>
      <created by="Michael Kay" on="2013-11-18"/>
      <environment ref="sf-boolean-A"/>
      <test>
         <initial-template name="c-101"/>
      </test>
      <result>
         <assert>/out = "true"</assert>
      </result>
   </test-case>
   
   <test-case name="sf-boolean-102">
      <description>boolean() on a sequence containing streamed nodes and atomic values</description>
      <created by="Michael Kay" on="2013-11-18"/>
      <environment ref="sf-boolean-A"/>
      <test>
         <initial-template name="c-102"/>
      </test>
      <result>
         <assert>/out = "true"</assert>
      </result>
   </test-case>
   
   <test-case name="sf-boolean-103">
      <description>boolean() on a sequence containing streamed nodes and atomic values</description>
      <created by="Michael Kay" on="2013-11-18"/>
      <environment ref="sf-boolean-A"/>
      <test>
         <initial-template name="c-103"/>
      </test>
      <result>
         <error code="FORG0006"/>
      </result>
   </test-case>
   
   <test-case name="sf-boolean-104">
      <description>boolean() on a sequence containing a single xs:anyURI</description>
      <created by="Michael Kay" on="2014-01-06"/>
      <environment ref="sf-boolean-A"/>
      <test>
         <initial-template name="c-104"/>
      </test>
      <result>
         <assert>/out = "true"</assert>
      </result>
   </test-case> 
   
   <test-case name="sf-boolean-105">
      <description>boolean() on a sequence containing a single xs:date</description>
      <created by="Michael Kay" on="2014-01-06"/>
      <environment ref="sf-boolean-A"/>
      <test>
         <initial-template name="c-105"/>
      </test>
      <result>
         <error code="FORG0006"/>
      </result>
   </test-case> 
   
   <test-case name="sf-boolean-106">
      <description>boolean() on a sequence containing a single xs:date; error is caught</description>
      <created by="Michael Kay" on="2014-01-06"/>
      <environment ref="sf-boolean-A"/>
      <test>
         <initial-template name="c-106"/>
      </test>
      <result>
         <assert>/out = "caught"</assert>
      </result>
   </test-case>   
   
   <test-case name="sf-boolean-107">
      <description>test that streaming resumes OK after a caught error</description>
      <created by="Michael Kay" on="2014-01-06"/>
      <environment ref="sf-boolean-A"/>
      <test>
         <initial-template name="c-107"/>
      </test>
      <result>
         <all-of>
           <assert>every $b in /out/t satisfies $b = ('true', 'false', 'invalid')</assert>
           <assert>count(/out/t) = 100000</assert>
         </all-of>  
      </result>
   </test-case>    
   
   <test-case name="sf-boolean-901">
      <description>Test of xsl:stream instruction with boolean(), filtered with non-motionless predicate.</description>
      <created by="Michael Kay" on="2012-11-07"/>
      <test>
         <stylesheet file="sf-boolean-901.xsl"/>
         <initial-template name="main"/>
      </test>
      <result>
         <error code="XTSE3430"/>
      </result>
   </test-case>   
</test-set>