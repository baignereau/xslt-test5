<?xml version="1.0" encoding="UTF-8"?>
<test-set xmlns:xs="http://www.w3.org/2001/XMLSchema"
          xmlns="http://www.w3.org/2012/10/xslt-test-catalog"
          name="sx-GeneralComp-eq">
   <description>"=" operator with streaming</description>
   
   <environment name="sx-gc-eq-A">
     <stylesheet file="sx-gc-eq-A.xsl"/>
   </environment>
   
   <environment name="sx-gc-eq-B">
     <stylesheet file="sx-gc-eq-B.xsl"/>
   </environment>
   
   <dependencies>
      <spec value="XSLT30+"/>
      <feature value="streaming"/>
   </dependencies>
   
   <test-case name="sx-gc-eq-003">
      <description>Basic Test of xsl:stream instruction with "="</description>
      <created by="Michael Kay" on="2013-12-14"/>
      <environment ref="sx-gc-eq-A"/>
      <test>
         <initial-template name="s-003"/>
      </test>
      <result>
         <assert>/out = 'true'</assert>
      </result>
   </test-case>

   <test-case name="sx-gc-eq-004">
      <description>Test of xsl:stream instruction with "=", filtered with a motionless predicate</description>
      <created by="Michael Kay" on="2013-12-14"/>
      <environment ref="sx-gc-eq-A"/>
      <test>
         <initial-template name="s-004"/>
      </test>
      <result>
         <assert>/out = 'true'</assert>
      </result>
   </test-case>

   <test-case name="sx-gc-eq-005">
      <description>Test of xsl:stream instruction with "=", filtered with a positional predicate</description>
      <created by="Michael Kay" on="2013-12-14"/>
      <environment ref="sx-gc-eq-A"/>
      <test>
         <initial-template name="s-005"/>
      </test>
      <result>
         <assert>/out = 'true'</assert>
      </result>
   </test-case>

   <test-case name="sx-gc-eq-006">
      <description>Test of xsl:stream instruction with "=", filtered with a positional predicate</description>
      <created by="Michael Kay" on="2013-12-14"/>
      <environment ref="sx-gc-eq-A"/>
      <test>
         <initial-template name="s-006"/>
      </test>
      <result>
         <assert>/out = 'true'</assert>
      </result>
   </test-case>

   <test-case name="sx-gc-eq-007">
      <description>Test of xsl:stream instruction with "=", filtered with a positional predicate</description>
      <created by="Michael Kay" on="2013-12-14"/>
      <environment ref="sx-gc-eq-A"/>
      <test>
         <initial-template name="s-007"/>
      </test>
      <result>
         <assert>/out = 'true'</assert>
      </result>
   </test-case>
   
   <test-case name="sx-gc-eq-008">
      <description>Test of xsl:stream instruction with "=", filtered with data() to make the predicates motionless</description>
      <created by="Michael Kay" on="2013-12-14"/>
      <environment ref="sx-gc-eq-A"/>
      <test>
         <initial-template name="s-008"/>
      </test>
      <result>
         <assert>/out = 'true'</assert>
      </result>
   </test-case>
   
   <test-case name="sx-gc-eq-009">
      <description>Test of xsl:stream instruction with "=", filtered with text() to make the predicates motionless</description>
      <created by="Michael Kay" on="2013-12-14"/>
      <environment ref="sx-gc-eq-A"/>
      <test>
         <initial-template name="s-009"/>
      </test>
      <result>
         <assert>/out = 'true'</assert>
      </result>
   </test-case>
   
   <test-case name="sx-gc-eq-010">
      <description>Test of xsl:stream instruction with "=", filtered with number() to make the predicates motionless</description>
      <created by="Michael Kay" on="2013-12-14"/>
      <environment ref="sx-gc-eq-A"/>
      <test>
         <initial-template name="s-010"/>
      </test>
      <result>
         <assert>/out = 'true'</assert>
      </result>
   </test-case>
   
   <test-case name="sx-gc-eq-011">
      <description>"=" selecting nothing, returning the $zero case</description>
      <created by="Michael Kay" on="2013-12-14"/>
      <environment ref="sx-gc-eq-A"/>
      <test>
         <initial-template name="s-011"/>
      </test>
      <result>
         <assert>/out = 'false'</assert>
      </result>
   </test-case>
   
   <test-case name="sx-gc-eq-012">
      <description>"=" selecting both streamed nodes and literals</description>
      <created by="Michael Kay" on="2013-12-14"/>
      <environment ref="sx-gc-eq-A"/>
      <test>
         <initial-template name="s-012"/>
      </test>
      <result>
         <assert>/out = 'true'</assert>
      </result>
   </test-case>
   
   <test-case name="sx-gc-eq-013">
      <description>"=" selecting both streamed nodes and literals while also filtering</description>
      <created by="Michael Kay" on="2013-12-14"/>
      <environment ref="sx-gc-eq-A"/>
      <test>
         <initial-template name="s-013"/>
      </test>
      <result>
         <assert>/out = 'true'</assert>
      </result>
   </test-case>
   
   <test-case name="sx-gc-eq-015">
      <description>Test of xsl:stream instruction with "=" of a computed value</description>
      <created by="Michael Kay" on="2013-12-14"/>
      <environment ref="sx-gc-eq-A"/>
      <test>
         <initial-template name="s-015"/>
      </test>
      <result>
         <assert>/out = 'true'</assert>
      </result>
   </test-case>
   
   <test-case name="sx-gc-eq-016">
      <description>Test of xsl:stream instruction with "=" of a computed value</description>
      <created by="Michael Kay" on="2013-12-14"/>
      <environment ref="sx-gc-eq-A"/>
      <test>
         <initial-template name="s-016"/>
      </test>
      <result>
         <assert>/out = 'true'</assert>
      </result>
   </test-case>
   
   <test-case name="sx-gc-eq-017">
      <description>Test of xsl:stream instruction with "=" using copy-of to make it streamable</description>
      <created by="Michael Kay" on="2013-12-14"/>
      <environment ref="sx-gc-eq-A"/>
      <test>
         <initial-template name="s-017"/>
      </test>
      <result>
         <assert>/out = 'true'</assert>
      </result>
   </test-case>
   
   <test-case name="sx-gc-eq-018">
      <description>Test of xsl:stream instruction with "=" over attribute values</description>
      <created by="Michael Kay" on="2013-12-14"/>
      <environment ref="sx-gc-eq-A"/>
      <test>
         <initial-template name="s-018"/>
      </test>
      <result>
         <assert>/out = 'true'</assert>
      </result>
   </test-case>
   
   <test-case name="sx-gc-eq-019">
      <description>Test of xsl:stream instruction with "=" over attribute values, filtered</description>
      <created by="Michael Kay" on="2013-12-14"/>
      <environment ref="sx-gc-eq-A"/>
      <test>
         <initial-template name="s-019"/>
      </test>
      <result>
         <assert>/out = 'true'</assert>
      </result>
   </test-case>
   
   <test-case name="sx-gc-eq-020">
      <description>"=" over attribute values, computed</description>
      <created by="Michael Kay" on="2013-12-14"/>
      <environment ref="sx-gc-eq-A"/>
      <test>
         <initial-template name="s-020"/>
      </test>
      <result>
         <assert>/out = 'true'</assert>
      </result>
   </test-case>
   
   <test-case name="sx-gc-eq-021">
      <description>"=" over values that depend on a condition</description>
      <created by="Michael Kay" on="2013-12-14"/>
      <environment ref="sx-gc-eq-A"/>
      <test>
         <initial-template name="s-021"/>
      </test>
      <result>
         <assert>/out = 'true'</assert>
      </result>
   </test-case>
   
   <test-case name="sx-gc-eq-022">
      <description>"=" with a loop used to compute each value</description>
      <created by="Michael Kay" on="2013-12-14"/>
      <environment ref="sx-gc-eq-A"/>
      <test>
         <initial-template name="s-022"/>
      </test>
      <result>
         <assert>/out = 'true'</assert>
      </result>
   </test-case>
   
   <test-case name="sx-gc-eq-023">
      <description>"=" over a crawling expression</description>
      <created by="Michael Kay" on="2013-12-14"/>
      <environment ref="sx-gc-eq-A"/>
      <test>
         <initial-template name="s-023"/>
      </test>
      <result>
         <assert>/out = 'true'</assert>
      </result>
   </test-case>
   
   <test-case name="sx-gc-eq-024">
      <description>"=" with a mix of untypedAtomic and numeric values</description>
      <created by="Michael Kay" on="2014-05-12"/>
      <environment ref="sx-gc-eq-A"/>
      <test>
         <initial-template name="s-024"/>
      </test>
      <result>
         <assert>/out = 'true'</assert>
      </result>
   </test-case>
   
   <test-case name="sx-gc-eq-025">
      <description>"=" with a mix of untypedAtomic and numeric values. False result</description>
      <created by="Michael Kay" on="2014-05-12"/>
      <environment ref="sx-gc-eq-A"/>
      <test>
         <initial-template name="s-025"/>
      </test>
      <result>
         <assert>/out = 'false'</assert>
      </result>
   </test-case>  
   
   <test-case name="sx-gc-eq-026">
      <description>"=" with a mix of untypedAtomic and numeric values. Error result</description>
      <created by="Michael Kay" on="2014-05-12"/>
      <environment ref="sx-gc-eq-A"/>
      <test>
         <initial-template name="s-026"/>
      </test>
      <result>
         <error code="FORG0001"/>
      </result>
   </test-case>
   
   <test-case name="sx-gc-eq-027">
      <description>"=" comparing the incomparable. Error result</description>
      <created by="Michael Kay" on="2014-05-12"/>
      <environment ref="sx-gc-eq-A"/>
      <test>
         <initial-template name="s-027"/>
      </test>
      <result>
         <error code="XPTY0004"/>
      </result>
   </test-case>  
   
   <test-case name="sx-gc-eq-028">
      <description>"=" comparing double to decimal. Success result</description>
      <created by="Michael Kay" on="2014-05-12"/>
      <environment ref="sx-gc-eq-A"/>
      <test>
         <initial-template name="s-028"/>
      </test>
      <result>
         <assert>/out = 'true'</assert>
      </result>
   </test-case>                     
   
    <test-case name="sx-gc-eq-103">
      <description>Basic Test of xsl:stream instruction with "="</description>
      <created by="Michael Kay" on="2013-12-14"/>
      <environment ref="sx-gc-eq-B"/>
      <test>
         <initial-template name="s-003"/>
      </test>
      <result>
         <assert>/out = 'true'</assert>
      </result>
   </test-case>

   <test-case name="sx-gc-eq-104">
      <description>Test of xsl:stream instruction with "=", filtered with a motionless predicate</description>
      <created by="Michael Kay" on="2013-12-14"/>
      <environment ref="sx-gc-eq-B"/>
      <test>
         <initial-template name="s-004"/>
      </test>
      <result>
         <assert>/out = 'true'</assert>
      </result>
   </test-case>

   <test-case name="sx-gc-eq-105">
      <description>Test of xsl:stream instruction with "=", filtered with a positional predicate</description>
      <created by="Michael Kay" on="2013-12-14"/>
      <environment ref="sx-gc-eq-B"/>
      <test>
         <initial-template name="s-005"/>
      </test>
      <result>
         <assert>/out = 'true'</assert>
      </result>
   </test-case>

   <test-case name="sx-gc-eq-106">
      <description>Test of xsl:stream instruction with "=", filtered with a positional predicate</description>
      <created by="Michael Kay" on="2013-12-14"/>
      <environment ref="sx-gc-eq-B"/>
      <test>
         <initial-template name="s-006"/>
      </test>
      <result>
         <assert>/out = 'true'</assert>
      </result>
   </test-case>

   <test-case name="sx-gc-eq-107">
      <description>Test of xsl:stream instruction with "=", filtered with a positional predicate</description>
      <created by="Michael Kay" on="2013-12-14"/>
      <environment ref="sx-gc-eq-B"/>
      <test>
         <initial-template name="s-007"/>
      </test>
      <result>
         <assert>/out = 'true'</assert>
      </result>
   </test-case>
   
   <test-case name="sx-gc-eq-108">
      <description>Test of xsl:stream instruction with "=", filtered with data() to make the predicates motionless</description>
      <created by="Michael Kay" on="2013-12-14"/>
      <environment ref="sx-gc-eq-B"/>
      <test>
         <initial-template name="s-008"/>
      </test>
      <result>
         <assert>/out = 'true'</assert>
      </result>
   </test-case>
   
   <test-case name="sx-gc-eq-109">
      <description>Test of xsl:stream instruction with "=", filtered with text() to make the predicates motionless</description>
      <created by="Michael Kay" on="2013-12-14"/>
      <environment ref="sx-gc-eq-B"/>
      <test>
         <initial-template name="s-009"/>
      </test>
      <result>
         <assert>/out = 'true'</assert>
      </result>
   </test-case>
   
   <test-case name="sx-gc-eq-110">
      <description>Test of xsl:stream instruction with "=", filtered with number() to make the predicates motionless</description>
      <created by="Michael Kay" on="2013-12-14"/>
      <environment ref="sx-gc-eq-B"/>
      <test>
         <initial-template name="s-010"/>
      </test>
      <result>
         <assert>/out = 'true'</assert>
      </result>
   </test-case>
   
   <test-case name="sx-gc-eq-111">
      <description>"=" selecting nothing, returning the $zero case</description>
      <created by="Michael Kay" on="2013-12-14"/>
      <environment ref="sx-gc-eq-B"/>
      <test>
         <initial-template name="s-011"/>
      </test>
      <result>
         <assert>/out = 'false'</assert>
      </result>
   </test-case>
   
   <test-case name="sx-gc-eq-112">
      <description>"=" selecting both streamed nodes and literals</description>
      <created by="Michael Kay" on="2013-12-14"/>
      <environment ref="sx-gc-eq-B"/>
      <test>
         <initial-template name="s-012"/>
      </test>
      <result>
         <assert>/out = 'true'</assert>
      </result>
   </test-case>
   
   <test-case name="sx-gc-eq-113">
      <description>"=" selecting both streamed nodes and literals while also filtering</description>
      <created by="Michael Kay" on="2013-12-14"/>
      <environment ref="sx-gc-eq-B"/>
      <test>
         <initial-template name="s-013"/>
      </test>
      <result>
         <assert>/out = 'true'</assert>
      </result>
   </test-case>
   
   <test-case name="sx-gc-eq-115">
      <description>Test of xsl:stream instruction with "=" of a computed value</description>
      <created by="Michael Kay" on="2013-12-14"/>
      <environment ref="sx-gc-eq-B"/>
      <test>
         <initial-template name="s-015"/>
      </test>
      <result>
         <assert>/out = 'true'</assert>
      </result>
   </test-case>
   
   <test-case name="sx-gc-eq-116">
      <description>Test of xsl:stream instruction with "=" of a computed value</description>
      <created by="Michael Kay" on="2013-12-14"/>
      <environment ref="sx-gc-eq-B"/>
      <test>
         <initial-template name="s-016"/>
      </test>
      <result>
         <assert>/out = 'true'</assert>
      </result>
   </test-case>
   
   <test-case name="sx-gc-eq-117">
      <description>Test of xsl:stream instruction with "=" using copy-of to make it streamable</description>
      <created by="Michael Kay" on="2013-12-14"/>
      <environment ref="sx-gc-eq-B"/>
      <test>
         <initial-template name="s-017"/>
      </test>
      <result>
         <assert>/out = 'true'</assert>
      </result>
   </test-case>
   
   <test-case name="sx-gc-eq-118">
      <description>Test of xsl:stream instruction with "=" over attribute values</description>
      <created by="Michael Kay" on="2013-12-14"/>
      <environment ref="sx-gc-eq-B"/>
      <test>
         <initial-template name="s-018"/>
      </test>
      <result>
         <assert>/out = 'true'</assert>
      </result>
   </test-case>
   
   <test-case name="sx-gc-eq-119">
      <description>Test of xsl:stream instruction with "=" over attribute values, filtered</description>
      <created by="Michael Kay" on="2013-12-14"/>
      <environment ref="sx-gc-eq-B"/>
      <test>
         <initial-template name="s-019"/>
      </test>
      <result>
         <assert>/out = 'true'</assert>
      </result>
   </test-case>
   
   <test-case name="sx-gc-eq-120">
      <description>"=" over attribute values, computed</description>
      <created by="Michael Kay" on="2013-12-14"/>
      <environment ref="sx-gc-eq-B"/>
      <test>
         <initial-template name="s-020"/>
      </test>
      <result>
         <assert>/out = 'true'</assert>
      </result>
   </test-case>
   
   <test-case name="sx-gc-eq-121">
      <description>"=" over values that depend on a condition</description>
      <created by="Michael Kay" on="2013-12-14"/>
      <environment ref="sx-gc-eq-B"/>
      <test>
         <initial-template name="s-021"/>
      </test>
      <result>
         <assert>/out = 'true'</assert>
      </result>
   </test-case>
   
   <test-case name="sx-gc-eq-122">
      <description>"=" with a loop used to compute each value</description>
      <created by="Michael Kay" on="2013-12-14"/>
      <environment ref="sx-gc-eq-B"/>
      <test>
         <initial-template name="s-022"/>
      </test>
      <result>
         <assert>/out = 'true'</assert>
      </result>
   </test-case>
   
   <test-case name="sx-gc-eq-123">
      <description>"=" over a crawling expression</description>
      <created by="Michael Kay" on="2013-12-14"/>
      <environment ref="sx-gc-eq-B"/>
      <test>
         <initial-template name="s-023"/>
      </test>
      <result>
         <assert>/out = 'true'</assert>
      </result>
   </test-case>

   <test-case name="sx-gc-eq-124">
      <description>"=" with a mix of untypedAtomic and numeric values. True result.</description>
      <created by="Michael Kay" on="2014-05-12"/>
      <environment ref="sx-gc-eq-B"/>
      <test>
         <initial-template name="s-024"/>
      </test>
      <result>
         <assert>/out = 'true'</assert>
      </result>
   </test-case>   
   
   <test-case name="sx-gc-eq-125">
      <description>"=" with a mix of untypedAtomic and numeric values. False result</description>
      <created by="Michael Kay" on="2014-05-12"/>
      <environment ref="sx-gc-eq-B"/>
      <test>
         <initial-template name="s-025"/>
      </test>
      <result>
         <assert>/out = 'false'</assert>
      </result>
   </test-case>  
   
   <test-case name="sx-gc-eq-126">
      <description>"=" with a mix of untypedAtomic and numeric values. Error result</description>
      <created by="Michael Kay" on="2014-05-12"/>
      <environment ref="sx-gc-eq-B"/>
      <test>
         <initial-template name="s-026"/>
      </test>
      <result>
         <error code="FORG0001"/>
      </result>
   </test-case>   
   
   <test-case name="sx-gc-eq-127">
      <description>"=" comparing the incomparable. Error result</description>
      <created by="Michael Kay" on="2014-05-12"/>
      <environment ref="sx-gc-eq-B"/>
      <test>
         <initial-template name="s-027"/>
      </test>
      <result>
         <error code="XPTY0004"/>
      </result>
   </test-case>         
   
   <test-case name="sx-gc-eq-128">
      <description>"=" comparing double to decimal. Success result</description>
      <created by="Michael Kay" on="2014-05-12"/>
      <environment ref="sx-gc-eq-B"/>
      <test>
         <initial-template name="s-028"/>
      </test>
      <result>
         <assert>/out = 'true'</assert>
      </result>
   </test-case>  

   <test-case name="sx-gc-eq-901">
      <description>Test of xsl:stream instruction with "=", filtered with predicate that atomizes.</description>
      <created by="Michael Kay" on="2013-12-14"/>
      <test>
         <stylesheet file="sx-gc-eq-901.xsl"/>
         <initial-template name="main"/>
      </test>
      <result>
         <error code="XTSE3430"/>
      </result>
   </test-case>
   
   <test-case name="sx-gc-eq-902">
      <description>Test of xsl:stream instruction with "=", filtered with predicate that uses last().</description>
      <created by="Michael Kay" on="2013-12-14"/>
      <test>
         <stylesheet file="sx-gc-eq-902.xsl"/>
         <initial-template name="main"/>
      </test>
      <result>
         <error code="XTSE3430"/>
      </result>
   </test-case>


</test-set>